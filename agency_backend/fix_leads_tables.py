#!/usr/bin/env python3

"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü CRM (leads)
"""

import sqlite3
import os
from datetime import datetime

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "shared_database.db"

def fix_leads_tables():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å CRM"""

    if not os.path.exists(DB_PATH):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {DB_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False

    print(f"üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ CRM —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {DB_PATH}...")

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"{DB_PATH}.backup.{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    try:
        import shutil
        shutil.copy2(DB_PATH, backup_path)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name LIKE 'lead%'")
        existing_tables = [row[0] for row in cursor.fetchall()]
        print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ CRM —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        tables_to_create = [
            ('leads', '''
            CREATE TABLE IF NOT EXISTS leads (
                id INTEGER PRIMARY KEY,
                title VARCHAR NOT NULL,
                source VARCHAR NOT NULL,
                status VARCHAR DEFAULT 'new',
                manager_id INTEGER,
                client_name VARCHAR,
                client_contact VARCHAR,
                company_name VARCHAR,
                description TEXT,
                proposal_amount FLOAT,
                proposal_date DATETIME,
                deal_amount FLOAT,
                rejection_reason TEXT,
                created_at DATETIME,
                updated_at DATETIME,
                last_activity_at DATETIME,
                reminder_date DATETIME,
                waiting_started_at DATETIME,
                FOREIGN KEY (manager_id) REFERENCES users (id)
            )
            '''),
            ('lead_notes', '''
            CREATE TABLE IF NOT EXISTS lead_notes (
                id INTEGER PRIMARY KEY,
                lead_id INTEGER,
                user_id INTEGER,
                content TEXT NOT NULL,
                lead_status VARCHAR,
                created_at DATETIME,
                FOREIGN KEY (lead_id) REFERENCES leads (id),
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
            '''),
            ('lead_attachments', '''
            CREATE TABLE IF NOT EXISTS lead_attachments (
                id INTEGER PRIMARY KEY,
                lead_id INTEGER,
                user_id INTEGER,
                filename VARCHAR NOT NULL,
                file_path VARCHAR NOT NULL,
                file_size INTEGER,
                mime_type VARCHAR,
                uploaded_at DATETIME,
                FOREIGN KEY (lead_id) REFERENCES leads (id),
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
            '''),
            ('lead_history', '''
            CREATE TABLE IF NOT EXISTS lead_history (
                id INTEGER PRIMARY KEY,
                lead_id INTEGER,
                user_id INTEGER,
                action VARCHAR NOT NULL,
                old_value VARCHAR,
                new_value VARCHAR,
                description TEXT,
                created_at DATETIME,
                FOREIGN KEY (lead_id) REFERENCES leads (id),
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
            ''')
        ]

        for table_name, create_sql in tables_to_create:
            print(f"üîß –°–æ–∑–¥–∞–µ–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É {table_name}...")
            cursor.execute(create_sql)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        tables_and_fields = [
            ('lead_notes', 'lead_status', 'VARCHAR'),
            ('lead_attachments', 'user_id', 'INTEGER'),
            ('lead_attachments', 'file_size', 'INTEGER'),
            ('lead_attachments', 'mime_type', 'VARCHAR'),
        ]

        for table_name, field_name, field_type in tables_and_fields:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns = [column[1] for column in cursor.fetchall()]

            if field_name not in columns:
                try:
                    print(f"üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ {field_name} –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}...")
                    cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN {field_name} {field_type}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è {field_name}: {e}")
            else:
                print(f"‚úÖ –ü–æ–ª–µ {field_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

        print("‚úÖ –í—Å–µ CRM —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
        for table_name in ['leads', 'lead_notes', 'lead_attachments', 'lead_history']:
            print(f"\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}:")
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns = cursor.fetchall()
            for col in columns:
                print(f"  - {col[1]} ({col[2]})")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        conn.rollback()
        return False

    finally:
        conn.close()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CRM —Ç–∞–±–ª–∏—Ü")

    if fix_leads_tables():
        print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:")
        print("cd agency_backend && python3 -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000")
    else:
        print("\nüí• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")