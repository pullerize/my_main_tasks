#!/usr/bin/env python3
import sys
import os
import json
sys.path.append('.')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
os.environ['SQLITE_PATH'] = '/mnt/c/Users/–ì–æ—Å–ø–æ–¥–∏–Ω/Desktop/–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã/8bit_tasks/8bit-codex/agency_backend/shared_database.db'

from app import crud, models
from app.database import SessionLocal

def test_service_analytics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç–∏–ø–æ–≤ —É—Å–ª—É–≥"""
    db = SessionLocal()

    try:
        print('üß™ Testing service types analytics function...')

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        result = crud.get_service_types_analytics(db)

        print(f'üìä Raw analytics result:')
        print(json.dumps(result, indent=2, ensure_ascii=False))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if 'employees' in result:
            for employee in result['employees']:
                print(f'\nüë§ Employee: {employee["employee_name"]} (ID: {employee["employee_id"]})')
                print(f'   Total: {employee["total_created"]} created, {employee["total_completed"]} completed')
                print(f'   Efficiency: {employee["overall_efficiency"]}%')

                for service in employee['service_types']:
                    print(f'   üìã Service "{service["service_type"]}": {service["created"]} created, {service["completed"]} completed ({service["efficiency"]}%)')

    except Exception as e:
        print(f'‚ùå Error: {e}')
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == '__main__':
    test_service_analytics()