#!/usr/bin/env python3

"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π
"""

import sqlite3
import os

DB_PATH = "shared_database.db"

def check_and_fix_db_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    if not os.path.exists(DB_PATH):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {DB_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã tasks
        cursor.execute("PRAGMA table_info(tasks)")
        columns = {column[1]: column[2] for column in cursor.fetchall()}

        print("üìã –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã tasks:")
        for name, type_name in columns.items():
            print(f"  - {name} ({type_name})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
        missing_fields = []

        if 'accepted_at' not in columns:
            missing_fields.append(('accepted_at', 'DATETIME'))

        if 'resume_count' not in columns:
            missing_fields.append(('resume_count', 'INTEGER DEFAULT 0'))

        if 'is_recurring' not in columns:
            missing_fields.append(('is_recurring', 'BOOLEAN'))

        if 'recurrence_type' not in columns:
            missing_fields.append(('recurrence_type', 'VARCHAR'))

        if 'recurrence_time' not in columns:
            missing_fields.append(('recurrence_time', 'VARCHAR'))

        if 'recurrence_days' not in columns:
            missing_fields.append(('recurrence_days', 'VARCHAR'))

        if 'next_run_at' not in columns:
            missing_fields.append(('next_run_at', 'DATETIME'))

        if missing_fields:
            print(f"\nüîß –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è: {[field[0] for field in missing_fields]}")

            for field_name, field_type in missing_fields:
                try:
                    cursor.execute(f"ALTER TABLE tasks ADD COLUMN {field_name} {field_type}")
                    print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: {field_name}")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {field_name}: {e}")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if 'resume_count' in [field[0] for field in missing_fields]:
                cursor.execute("UPDATE tasks SET resume_count = 0 WHERE resume_count IS NULL")

            conn.commit()
            print("‚úÖ –í—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        else:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cursor.execute("PRAGMA table_info(tasks)")
        final_columns = cursor.fetchall()
        print("\nüìã –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã tasks:")
        for col in final_columns:
            print(f"  - {col[1]} ({col[2]})")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        conn.rollback()
        return False

    finally:
        conn.close()

if __name__ == "__main__":
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    check_and_fix_db_structure()