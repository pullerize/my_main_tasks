"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
"""
import os
import requests
import logging
from typing import Optional, Dict

logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"


def send_task_notification(executor_telegram_id: int, task_id: int, task_data: Dict) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ —á–µ—Ä–µ–∑ Telegram API

    Args:
        executor_telegram_id: Telegram ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        task_id: ID –∑–∞–¥–∞—á–∏
        task_data: –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (title, project_name, task_type, deadline_text, format)

    Returns:
        bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not configured")
        return False

    if not executor_telegram_id:
        logger.warning(f"Executor has no telegram_id, notification not sent for task #{task_id}")
        return False

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_text = f"""
üîî **–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞!**

üìã **–ó–∞–¥–∞—á–∞ #{task_id}**
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}
‚îÇ üìÅ **–ü—Ä–æ–µ–∫—Ç:** {task_data.get('project_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚îÇ üè∑Ô∏è **–¢–∏–ø:** {task_data.get('task_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}
"""

        if task_data.get('description'):
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            description = task_data.get('description', '')
            if len(description) > 150:
                description = description[:150] + '...'
            notification_text += f"‚îÇ üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n"

        if task_data.get('format'):
            notification_text += f"‚îÇ üìê **–§–æ—Ä–º–∞—Ç:** {task_data.get('format')}\n"

        notification_text += f"‚îÇ ‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {task_data.get('deadline_text', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}\n"
        notification_text += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        notification_text += "üí° **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É**"

        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
        inline_keyboard = {
            "inline_keyboard": [[
                {
                    "text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                    "callback_data": f"accept_task_{task_id}"
                }
            ]]
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
        response = requests.post(
            f"{TELEGRAM_API_URL}/sendMessage",
            json={
                "chat_id": executor_telegram_id,
                "text": notification_text,
                "parse_mode": "Markdown",
                "reply_markup": inline_keyboard
            },
            timeout=10
        )

        if response.status_code == 200:
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ #{task_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {executor_telegram_id}")
            return True
        else:
            error_data = response.json()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {error_data}")
            return False

    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–µ #{task_id}: {e}")
        return False
