#!/usr/bin/env python3

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞—á –¥–ª—è Telegram –±–æ—Ç–∞
"""

import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

class TaskHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏"""

    def __init__(self, bot_instance):
        self.bot = bot_instance

    async def handle_project_selection(self, update, context, project_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –±–∞–∑—ã
        conn = self.get_db_connection()
        if not conn:
            await query.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        cursor = conn.execute("SELECT name FROM projects WHERE id = ?", (project_id,))
        project = cursor.fetchone()
        conn.close()

        if not project:
            await query.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        task_data = context.user_data.get('task_creation', {})
        task_data['project'] = project['name']
        task_data['step'] = 'task_type_selection'
        context.user_data['task_creation'] = task_data

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞—á
        task_types = [
            ("üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è", "creative"),
            ("üìù –ö–æ–Ω—Ç–µ–Ω—Ç", "content"),
            ("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è", "technical"),
            ("üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è", "analytics"),
            ("üìû –û–±—â–µ–Ω–∏–µ", "communication"),
            ("üé¨ –í–∏–¥–µ–æ", "video")
        ]

        keyboard = []
        for type_name, type_key in task_types:
            keyboard.append([InlineKeyboardButton(
                type_name,
                callback_data=f"select_task_type_{type_key}"
            )])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_user_{task_data['executor_id']}")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {project['name']}\n\n"
            "üè∑Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_task_type_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
        task_type = query.data.replace("select_task_type_", "")

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        task_data = context.user_data.get('task_creation', {})
        task_data['task_type'] = task_type

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤)
        if task_data['role'] == 'designer':
            task_data['step'] = 'format_selection'
            context.user_data['task_creation'] = task_data

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤
            formats = [
                ("üñºÔ∏è –°—Ç–∞—Ç–∏–∫–∞", "static"),
                ("üé¨ –í–∏–¥–µ–æ", "video"),
                ("üì± Stories", "stories"),
                ("üé† –ö–∞—Ä—É—Å–µ–ª—å", "carousel"),
                ("üìÑ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", "presentation"),
                ("üé® –ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è", "illustration")
            ]

            keyboard = []
            for format_name, format_key in formats:
                keyboard.append([InlineKeyboardButton(
                    format_name,
                    callback_data=f"select_format_{format_key}"
                )])

            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_project_{task_data.get('project_id', 1)}")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            type_names = {
                'creative': '–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è',
                'content': '–ö–æ–Ω—Ç–µ–Ω—Ç',
                'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è',
                'analytics': '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è',
                'communication': '–û–±—â–µ–Ω–∏–µ',
                'video': '–í–∏–¥–µ–æ'
            }

            await query.edit_message_text(
                "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
                f"üè∑Ô∏è **–¢–∏–ø:** {type_names.get(task_type, task_type)}\n\n"
                "üé® **–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞:**",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            # –î–ª—è –Ω–µ-–¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –¥–µ—Ç–∞–ª–µ–π
            task_data['step'] = 'task_details'
            context.user_data['task_creation'] = task_data
            await self.handle_task_details_input(update, context)

    async def handle_format_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤)"""
        task_format = query.data.replace("select_format_", "")

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        task_data = context.user_data.get('task_creation', {})
        task_data['task_format'] = task_format
        task_data['step'] = 'task_details'
        context.user_data['task_creation'] = task_data

        await self.handle_task_details_input(update, context)

    async def handle_task_details_input(self, update, context):
        """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        task_data = context.user_data.get('task_creation', {})

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        role_names = {
            'designer': '–î–∏–∑–∞–π–Ω–µ—Ä',
            'smm_manager': '–°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä'
        }

        type_names = {
            'creative': '–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è',
            'content': '–ö–æ–Ω—Ç–µ–Ω—Ç',
            'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è',
            'analytics': '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è',
            'communication': '–û–±—â–µ–Ω–∏–µ',
            'video': '–í–∏–¥–µ–æ'
        }

        format_names = {
            'static': '–°—Ç–∞—Ç–∏–∫–∞',
            'video': '–í–∏–¥–µ–æ',
            'stories': 'Stories',
            'carousel': '–ö–∞—Ä—É—Å–µ–ª—å',
            'presentation': '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è',
            'illustration': '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è'
        }

        message = "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
        message += f"üë§ **–†–æ–ª—å:** {role_names.get(task_data['role'], task_data['role'])}\n"
        message += f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {task_data['project']}\n"
        message += f"üè∑Ô∏è **–¢–∏–ø:** {type_names.get(task_data['task_type'], task_data['task_type'])}\n"

        if task_data.get('task_format'):
            message += f"üé® **–§–æ—Ä–º–∞—Ç:** {format_names.get(task_data['task_format'], task_data['task_format'])}\n"

        message += "\nüìù **–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:**\n\n"
        message += "```\n–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n---\n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n```"

        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        task_data['step'] = 'awaiting_text_input'
        context.user_data['task_creation'] = task_data

    async def handle_set_deadline(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–¥–ª–∞–π–Ω–∞"""
        message = (
            "‚è∞ **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n\n"
            "**–ü—Ä–∏–º–µ—Ä:** `25.12.2024 15:30`\n\n"
            "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"
        )

        from datetime import datetime, timedelta
        now = datetime.now()

        keyboard = [
            [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è 18:00", callback_data="deadline_today_18")],
            [InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞ 12:00", callback_data="deadline_tomorrow_12")],
            [InlineKeyboardButton("üìÖ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è 18:00", callback_data="deadline_3days_18")],
            [InlineKeyboardButton("üìÖ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é 12:00", callback_data="deadline_week_12")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="confirm_task_preview")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–µ–¥–ª–∞–π–Ω–∞
        task_data = context.user_data.get('task_creation', {})
        task_data['step'] = 'awaiting_deadline_input'
        context.user_data['task_creation'] = task_data

    async def handle_confirm_task(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        task_data = context.user_data.get('task_creation', {})

        if not task_data:
            await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success = await self.create_task_in_database(task_data)

            if success:
                await query.edit_message_text(
                    "‚úÖ **–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
                    f"üìã **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {task_data.get('project', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {task_data.get('deadline', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}\n\n"
                    "–ó–∞–¥–∞—á–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.",
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏**\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode='Markdown'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            await query.edit_message_text(
                "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='Markdown'
            )
        finally:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            context.user_data.pop('task_creation', None)

    async def handle_cancel_task(self, query, context):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        context.user_data.pop('task_creation', None)

        await query.edit_message_text(
            "‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
            "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É!",
            parse_mode='Markdown'
        )

    async def create_task_in_database(self, task_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import requests
            from datetime import datetime

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –∑–∞–¥–∞—á–∏
            author_user = self.get_user_by_telegram_id(task_data['user_id'], None)
            if not author_user:
                return False

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            payload = {
                'title': task_data.get('title', '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞'),
                'description': task_data.get('description', ''),
                'project': task_data.get('project', ''),
                'task_type': task_data.get('task_type', ''),
                'task_format': task_data.get('task_format', ''),
                'executor_id': task_data.get('executor_id'),
                'author_id': author_user['id'],
                'deadline': task_data.get('deadline')
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.post(
                f'{API_BASE_URL}/tasks/',
                json=payload,
                timeout=10
            )

            return response.status_code == 200

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ë–î: {e}")
            return False