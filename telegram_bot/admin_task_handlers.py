"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
"""

import sqlite3
import logging
import asyncio
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Optional
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

logger = logging.getLogger(__name__)

class AdminTaskHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""

    def __init__(self, bot_instance):
        self.bot = bot_instance

    def _execute_query(self, conn, query: str, params: tuple, return_id: bool = False):
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
        —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞ –ë–î (SQLite –∏–ª–∏ PostgreSQL)

        Args:
            conn: Database connection
            query: SQL query string
            params: Query parameters
            return_id: If True, –¥–æ–±–∞–≤–ª—è–µ—Ç RETURNING id –¥–ª—è PostgreSQL INSERT –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        import os
        db_engine = os.getenv('DB_ENGINE', 'sqlite').lower()

        if db_engine == 'postgresql':
            # PostgreSQL: —Å–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º %s –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            cursor = conn.cursor()
            # –ó–∞–º–µ–Ω—è–µ–º ? –Ω–∞ %s –¥–ª—è PostgreSQL
            pg_query = query.replace('?', '%s')
            # –ó–∞–º–µ–Ω—è–µ–º boolean –ø–æ–ª—è: 1/0 -> true/false –¥–ª—è PostgreSQL
            pg_query = pg_query.replace('is_active = 1', 'is_active = true')
            pg_query = pg_query.replace('is_active = 0', 'is_active = false')
            pg_query = pg_query.replace('is_archived = 1', 'is_archived = true')
            pg_query = pg_query.replace('is_archived = 0', 'is_archived = false')
            pg_query = pg_query.replace('is_recurring = 1', 'is_recurring = true')
            pg_query = pg_query.replace('is_recurring = 0', 'is_recurring = false')

            # –î–ª—è INSERT –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ PostgreSQL –¥–æ–±–∞–≤–ª—è–µ–º RETURNING id
            if return_id and 'INSERT INTO' in pg_query.upper():
                pg_query = pg_query.rstrip().rstrip(';') + ' RETURNING id'

            cursor.execute(pg_query, params)
            return cursor
        else:
            # SQLite: –∏—Å–ø–æ–ª—å–∑—É–µ–º execute –Ω–∞–ø—Ä—è–º—É—é —Å ?
            return conn.execute(query, params)

    async def handle_admin_task_management(self, update, context):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        keyboard = [
            ["‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", "üìÅ –ê—Ä—Ö–∏–≤ –∑–∞–¥–∞—á"],
            ["üÜï –ù–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –≤ —Ä–∞–±–æ—Ç—É"],
            ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏** üîß\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_admin_create_task(self, update, context):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        context.user_data['admin_task_creation'] = {
            'creator_id': update.message.from_user.id,
            'step': 'role_selection'
        }

        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ä–æ–ª—è–º–∏ (–ø–æ 3 –≤ —Ä—è–¥)
        keyboard = [
            ["üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä", "üé® –î–∏–∑–∞–π–Ω–µ—Ä"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            "üë• **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_role_selection_text(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message_text = update.message.text

        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ —Å —Ä–æ–ª—è–º–∏
        role_mapping = {
            "üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": "admin",
            "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä": "smm_manager",
            "üé® –î–∏–∑–∞–π–Ω–µ—Ä": "designer"
        }

        role = role_mapping.get(message_text)
        if not role:
            return


        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–π –∂–µ –ª–æ–≥–∏–∫–æ–π, —á—Ç–æ –∏ –≤ callback –≤–µ—Ä—Å–∏–∏
        await self._process_role_selection(update, context, role, is_callback=False)

    async def handle_role_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback query"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–æ–ª—å –∏–∑ callback data
        role = query.data.replace("select_role_", "")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–æ–ª–∏
        valid_roles = ['admin', 'designer', 'smm_manager', 'digital']
        if role not in valid_roles:
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å")
            return


        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–π –∂–µ –ª–æ–≥–∏–∫–æ–π
        await self._process_role_selection(query, context, role, is_callback=True)

    async def handle_executor_selection_text(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message_text = update.message.text

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        if not message_text.startswith("üë§ "):
            return

        executor_name = message_text[2:].strip()  # –£–±–∏—Ä–∞–µ–º "üë§ " –≤ –Ω–∞—á–∞–ª–µ

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        task_data = context.user_data.get('admin_task_creation', {})
        role = task_data.get('executor_role')

        if not role:
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–π —Ä–æ–ª–∏ –∏–∑ –∫–µ—à–∞ –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
        users = task_data.get('_cached_users')
        if not users:
            users = await self.get_users_by_role(role)

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        executor = None
        for user in users:
            if user['name'].strip() == executor_name.strip():
                executor = user
                break

        if not executor:
            await update.message.reply_text(
                f"‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."
            )
            return


        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        task_data['executor_id'] = executor['id']
        task_data['executor_name'] = executor['name']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
        if task_data.get('return_to_preview'):
            task_data['step'] = 'final_confirmation'
            task_data.pop('return_to_preview', None)
            context.user_data['admin_task_creation'] = task_data
            await self.show_task_preview(update, context)
            return

        task_data['step'] = 'project_selection'
        context.user_data['admin_task_creation'] = task_data

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∫–µ—à–∏—Ä—É–µ–º
        projects = await self.get_all_projects()

        if not projects:
            await update.message.reply_text(
                f"‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤**\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤.",
                parse_mode='Markdown'
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –≤ –∫–µ—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        task_data['_cached_projects'] = projects
        context.user_data['admin_task_creation'] = task_data

        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
        keyboard = []
        project_buttons = [f"üìÅ {project['name'].strip()}" for project in projects]
        for i in range(0, len(project_buttons), 2):
            row = project_buttons[i:i+2]
            keyboard.append(row)

        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            f"üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {executor['name']}\n\n"
            f"üìÅ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_project_selection_text(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message_text = update.message.text
        logger.debug(f"Project selection text: '{message_text}'")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        if not message_text.startswith("üìÅ "):
            logger.warning(f"Invalid project text format: '{message_text}'")
            return

        project_name = message_text[2:].strip()  # –£–±–∏—Ä–∞–µ–º "üìÅ " –≤ –Ω–∞—á–∞–ª–µ

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
        if not project_name:
            logger.warning("Empty project name after emoji removal")
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        task_data = context.user_data.get('admin_task_creation', {})
        projects = task_data.get('_cached_projects')

        if not projects:
            # –ï—Å–ª–∏ –∫–µ—à–∞ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            projects = await self.get_all_projects()
            task_data['_cached_projects'] = projects

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å O(1) –≤–º–µ—Å—Ç–æ O(n)
        projects_map = {p['name'].strip(): p for p in projects}
        project = projects_map.get(project_name.strip())

        if not project:
            logger.warning(f"Project '{project_name}' not found in {list(projects_map.keys())}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        logger.info(f"Found project: {project['name']} (id={project['id']})")

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        task_data = context.user_data.get('admin_task_creation', {})
        task_data['project_id'] = project['id']
        task_data['project_name'] = project['name']
        task_data['step'] = 'task_type_selection'
        context.user_data['admin_task_creation'] = task_data

        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
        executor_role = task_data.get('executor_role')

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á –¥–ª—è —Ä–æ–ª–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        task_types = await self.get_task_types_by_role(executor_role)

        if not task_types:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–π —Ä–æ–ª–∏")
            return

        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞—á (–ø–æ 3 –≤ —Ä—è–¥)
        keyboard = []
        for i in range(0, len(task_types), 3):
            row = task_types[i:i+3]
            keyboard.append(row)
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            f"üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {task_data.get('executor_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {project['name']}\n\n"
            f"üè∑Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_task_type_selection_text(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message_text = update.message.text

        task_data = context.user_data.get('admin_task_creation', {})
        executor_role = task_data.get('executor_role')

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á –¥–ª—è —Ä–æ–ª–∏ –∏–∑ API
        available_task_types = await self.get_task_types_by_role(executor_role)

        if message_text not in available_task_types:
            return


        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        task_data['task_type'] = message_text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ
        context.user_data['admin_task_creation'] = task_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤
        if executor_role == 'designer':
            task_data['step'] = 'format_selection'
            context.user_data['admin_task_creation'] = task_data

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤
            await self.show_format_selection(update, context)
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è
            task_data['step'] = 'title_input'
            context.user_data['admin_task_creation'] = task_data

            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞
            keyboard = ReplyKeyboardMarkup(
                [["‚ùå –û—Ç–º–µ–Ω–∞"]],
                resize_keyboard=True,
                one_time_keyboard=True
            )

            await update.message.reply_text(
                "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
                "üìù **–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:**\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
                parse_mode='Markdown',
                reply_markup=keyboard
            )

    async def show_format_selection(self, update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤"""
        task_data = context.user_data.get('admin_task_creation', {})

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –∏–∑ API
        try:
            formats_data = await self.bot.get_task_formats_from_api()
            if formats_data:
                # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π: [(display_name, internal_name), ...]
                formats = [display_name for display_name, internal_name in formats_data]
            else:
                # Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–∞–º
                formats = ["üì± 9:16", "‚¨ú 1:1", "üìê 4:5", "üì∫ 16:9", "üîÑ –î—Ä—É–≥–æ–µ"]
        except Exception as e:
            # Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–∞–º
            formats = ["üì± 9:16", "‚¨ú 1:1", "üìê 4:5", "üì∫ 16:9", "üîÑ –î—Ä—É–≥–æ–µ"]

        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ (–ø–æ 3 –≤ —Ä—è–¥)
        keyboard = []
        for i in range(0, len(formats), 3):
            row = formats[i:i+3]
            keyboard.append(row)

        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            f"üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {task_data.get('executor_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {task_data.get('project_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üè∑Ô∏è **–¢–∏–ø:** {task_data.get('task_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"üé® **–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_format_selection_text(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message_text = update.message.text

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑ API
        try:
            formats_data = await self.bot.get_task_formats_from_api()
            if formats_data:
                available_formats = [display_name for display_name, internal_name in formats_data]
            else:
                available_formats = ["üì± 9:16", "‚¨ú 1:1", "üìê 4:5", "üì∫ 16:9", "üîÑ –î—Ä—É–≥–æ–µ"]
        except Exception as e:
            available_formats = ["üì± 9:16", "‚¨ú 1:1", "üìê 4:5", "üì∫ 16:9", "üîÑ –î—Ä—É–≥–æ–µ"]

        if message_text not in available_formats:
            return


        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        task_data = context.user_data.get('admin_task_creation', {})
        task_data['format'] = message_text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞
        task_data['step'] = 'title_input'
        context.user_data['admin_task_creation'] = task_data

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ (—Ñ–æ—Ä–º–∞—Ç—ã) –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞
        keyboard = ReplyKeyboardMarkup(
            [["‚ùå –û—Ç–º–µ–Ω–∞"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await update.message.reply_text(
            "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            "üìù **–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:**\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
            parse_mode='Markdown',
            reply_markup=keyboard
        )

    async def start_title_input_OLD(self, update, context):
        """–ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"""
        task_data = context.user_data.get('admin_task_creation', {})

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        reply_markup = ReplyKeyboardRemove()

        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        task_type_names = {
            "creative": "–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è",
            "content": "–ö–æ–Ω—Ç–µ–Ω—Ç",
            "technical": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è",
            "analytics": "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è",
            "communication": "–û–±—â–µ–Ω–∏–µ",
            "video": "–í–∏–¥–µ–æ"
        }

        task_type_name = task_type_names.get(task_data.get('task_type', ''), '–ù–µ —É–∫–∞–∑–∞–Ω')

        await update.message.reply_text(
            f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            f"üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {task_data.get('executor_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {task_data.get('project_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üè∑Ô∏è **–¢–∏–ø:** {task_type_name}\n\n"
            f"üìù **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def _process_role_selection(self, update_or_query, context, role, is_callback=True, page=0):
        """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        task_data = context.user_data.get('admin_task_creation', {})
        task_data['executor_role'] = role
        task_data['step'] = 'executor_selection'
        context.user_data['admin_task_creation'] = task_data

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–π —Ä–æ–ª–∏
        users = await self.get_users_by_role(role)

        if not users:
            message_text = (
                f"‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é:** {self.get_role_name(role)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ä–æ–ª—å."
            )

            if is_callback:
                await update_or_query.edit_message_text(
                    message_text,
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_create_task")
                    ]])
                )
            else:
                await update_or_query.message.reply_text(
                    message_text,
                    parse_mode='Markdown'
                )
            return

        # –ö–µ—à–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        task_data['_cached_users'] = users
        context.user_data['admin_task_creation'] = task_data

        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ø–æ 3 –≤ —Ä—è–¥)
        keyboard = []
        row = []
        for user in users:
            row.append(f"üë§ {user['name']}")
            if len(row) == 3:
                keyboard.append(row)
                row = []

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        if row:
            keyboard.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        role_name = self.get_role_name(role)
        message_text = (
            f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            f"üë• **–†–æ–ª—å:** {role_name}\n\n"
            f"üë§ **–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:**"
        )

        if is_callback:
            # –î–ª—è callback query –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await update_or_query.message.reply_text(
                message_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            await update_or_query.message.reply_text(
                message_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

    async def handle_executor_page(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        # –§–æ—Ä–º–∞—Ç: executor_page_{role}_{page}
        parts = query.data.replace("executor_page_", "").split("_")
        if len(parts) < 2:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
            return

        role = parts[0]
        try:
            page = int(parts[1])
        except ValueError:
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return

        await self._process_role_selection(query, context, role, is_callback=True, page=page)

    async def handle_executor_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback query"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ callback data
        executor_id = int(query.data.replace("select_executor_", ""))

        task_data = context.user_data.get('admin_task_creation', {})
        users = await self.get_users_by_role(task_data.get('executor_role'))

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        executor = None
        for user in users:
            if user['id'] == executor_id:
                executor = user
                break

        if not executor:
            await query.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        task_data['executor_id'] = executor['id']
        task_data['executor_name'] = executor['name']
        task_data['step'] = 'project_selection'

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∫–µ—à–∏—Ä—É–µ–º –≤ context
        projects = await self.get_all_projects()
        task_data['_cached_projects'] = projects  # –ö–µ—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

        context.user_data['admin_task_creation'] = task_data

        if not projects:
            await query.edit_message_text(
                "‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤**\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤.",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_role_{task_data.get('executor_role')}")
                ]])
            )
            return

        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (10 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        PAGE_SIZE = 10
        total_pages = (len(projects) - 1) // PAGE_SIZE + 1
        page = 0  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        start_idx = page * PAGE_SIZE
        end_idx = min(start_idx + PAGE_SIZE, len(projects))

        keyboard = []
        for project in projects[start_idx:end_idx]:
            keyboard.append([InlineKeyboardButton(
                f"üìÅ {project['name']}",
                callback_data=f"select_project_{project['id']}"
            )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        nav_buttons = []
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"project_page_{page+1}"))

        if nav_buttons:
            keyboard.append(nav_buttons)

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_role_{task_data.get('executor_role')}")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        page_info = f" (—Å—Ç—Ä. {page+1}/{total_pages})" if total_pages > 1 else ""
        await query.edit_message_text(
            f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            f"üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {executor['name']}{page_info}\n\n"
            f"üìÅ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_project_page(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        # –§–æ—Ä–º–∞—Ç: project_page_{page}
        try:
            page = int(query.data.replace("project_page_", ""))
        except ValueError:
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return

        task_data = context.user_data.get('admin_task_creation', {})
        projects = task_data.get('_cached_projects', [])

        if not projects:
            projects = await self.get_all_projects()
            task_data['_cached_projects'] = projects

        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (10 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        PAGE_SIZE = 10
        total_pages = (len(projects) - 1) // PAGE_SIZE + 1
        start_idx = page * PAGE_SIZE
        end_idx = min(start_idx + PAGE_SIZE, len(projects))

        keyboard = []
        for project in projects[start_idx:end_idx]:
            keyboard.append([InlineKeyboardButton(
                f"üìÅ {project['name']}",
                callback_data=f"select_project_{project['id']}"
            )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"project_page_{page-1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"project_page_{page+1}"))

        if nav_buttons:
            keyboard.append(nav_buttons)

        keyboard.append([InlineKeyboardButton("üîô –ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º", callback_data=f"select_role_{task_data.get('executor_role')}")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        page_info = f" (—Å—Ç—Ä. {page+1}/{total_pages})" if total_pages > 1 else ""
        await query.edit_message_text(
            f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            f"üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {task_data.get('executor_name', '–ù–µ –≤—ã–±—Ä–∞–Ω')}{page_info}\n\n"
            f"üìÅ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_project_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ callback query"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ callback data
        project_id = int(query.data.replace("select_project_", ""))

        task_data = context.user_data.get('admin_task_creation', {})

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        projects = task_data.get('_cached_projects', [])
        if not projects:
            # –ï—Å–ª–∏ –∫–µ—à –ø—É—Å—Ç–æ–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
            projects = await self.get_all_projects()

        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç –ø–æ ID
        project = None
        for proj in projects:
            if proj['id'] == project_id:
                project = proj
                break

        if not project:
            await query.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        task_data['project_id'] = project['id']
        task_data['project_name'] = project['name']
        task_data['step'] = 'task_type_selection'
        context.user_data['admin_task_creation'] = task_data

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
        task_types = self.get_task_types_by_role(task_data['executor_role'])

        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞—á
        keyboard = []
        for type_name, type_key in task_types:
            keyboard.append([InlineKeyboardButton(
                f"üè∑Ô∏è {type_name}",
                callback_data=f"select_task_type_{type_key}"
            )])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_executor_{task_data['executor_id']}")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            f"üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {task_data['executor_name']}\n"
            f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {project['name']}\n\n"
            f"üè∑Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_task_type_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ callback query"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏–∑ callback data
        task_type = query.data.replace("select_task_type_", "")

        task_data = context.user_data.get('admin_task_creation', {})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        task_types = await self.get_task_types_by_role(task_data['executor_role'])

        if task_type not in task_types:
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        task_data['task_type'] = task_type
        task_data['step'] = 'format_selection' if task_data['executor_role'] == 'designer' else 'title_input'
        context.user_data['admin_task_creation'] = task_data

        # –ï—Å–ª–∏ –¥–∏–∑–∞–π–Ω–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
        if task_data['executor_role'] == 'designer':
            formats = self.get_formats_for_designer()

            keyboard = []
            for format_name, format_key in formats:
                keyboard.append([InlineKeyboardButton(
                    f"üìê {format_name}",
                    callback_data=f"select_format_{format_key}"
                )])

            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_project_{task_data['project_id']}")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
                f"üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {task_data['executor_name']}\n"
                f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {task_data['project_name']}\n"
                f"üè∑Ô∏è **–¢–∏–ø:** {self.get_task_type_name(task_type)}\n\n"
                f"üìê **–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:**",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è
            await self.start_title_input(query, context)

    async def handle_format_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (–¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤) —á–µ—Ä–µ–∑ callback query"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ callback data
        format_type = query.data.replace("select_format_", "")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞
        formats = self.get_formats_for_designer()
        valid_formats = [format_key for format_name, format_key in formats]

        if format_type not in valid_formats:
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        task_data = context.user_data.get('admin_task_creation', {})
        task_data['format'] = format_type
        task_data['step'] = 'title_input'
        context.user_data['admin_task_creation'] = task_data

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è
        await self.start_title_input(query, context)

    async def start_title_input(self, query, context):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        task_data = context.user_data.get('admin_task_creation', {})
        task_data['step'] = 'title_input'
        context.user_data['admin_task_creation'] = task_data

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_create_task")
        ]])

        await query.edit_message_text(
            "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            "üìù **–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:**\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
            parse_mode='Markdown',
            reply_markup=keyboard
        )

    async def handle_title_input(self, update, context, title):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        if len(title) < 3:
            await update.message.reply_text(
                "‚ùå **–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ**\n\n"
                "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode='Markdown'
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        task_data = context.user_data.get('admin_task_creation', {})
        task_data['title'] = title

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –ª–∏ –º—ã –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if task_data.get('return_to_preview'):
            task_data['step'] = 'final_confirmation'
            task_data.pop('return_to_preview', None)
            context.user_data['admin_task_creation'] = task_data
            await self.show_task_preview(update, context)
            return

        task_data['step'] = 'description_input'
        context.user_data['admin_task_creation'] = task_data

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞: –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        # input_field_placeholder —Å–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        keyboard = ReplyKeyboardMarkup(
            [
                ["üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
                ["‚ùå –û—Ç–º–µ–Ω–∞"]
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
            input_field_placeholder="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ"
        )

        await update.message.reply_text(
            f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:** {title}\n\n"
            f"üìù **–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∑–∞–¥–∞—á–µ?**\n\n"
            f"‚ö†Ô∏è **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞**",
            parse_mode='Markdown',
            reply_markup=keyboard
        )

    async def handle_description_prompt(self, update, context):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è"""
        task_data = context.user_data.get('admin_task_creation', {})
        task_data['step'] = 'description_text_input'
        context.user_data['admin_task_creation'] = task_data

        # –£–±–∏—Ä–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = ReplyKeyboardMarkup(
            [["‚ùå –û—Ç–º–µ–Ω–∞"]],
            resize_keyboard=True,
            one_time_keyboard=False
        )

        await update.message.reply_text(
            "üìù **–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:**\n\n"
            "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
            parse_mode='Markdown',
            reply_markup=keyboard
        )

    async def handle_description_input(self, update, context, description):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
        task_data = context.user_data.get('admin_task_creation', {})
        task_data['description'] = description
        context.user_data['admin_task_creation'] = task_data

        await update.message.reply_text(
            f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ**\n\n"
            f"üìã **–û–ø–∏—Å–∞–Ω–∏–µ:** {description[:100]}{'...' if len(description) > 100 else ''}",
            parse_mode='Markdown'
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–¥–ª–∞–π–Ω–∞
        await self.handle_deadline_prompt(update, context)

    async def handle_deadline_prompt(self, update, context):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–¥–ª–∞–π–Ω–∞"""
        task_data = context.user_data.get('admin_task_creation', {})
        task_data['step'] = 'deadline_input'
        context.user_data['admin_task_creation'] = task_data

        keyboard = ReplyKeyboardMarkup(
            [
                ["üìÖ –°–µ–≥–æ–¥–Ω—è –¥–æ 18:00"],
                ["üåÜ –ó–∞–≤—Ç—Ä–∞ –¥–æ 18:00"],
                ["üìÜ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –¥–æ 18:00"],
                ["‚ùå –û—Ç–º–µ–Ω–∞"]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await update.message.reply_text(
            "‚è∞ **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞—á–∏:**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ `18.09.2025 18:00`\n\n"
            "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –±—ã—Å—Ç—Ä—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
            parse_mode='Markdown',
            reply_markup=keyboard
        )

    async def handle_deadline_input(self, update, context, deadline_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–µ–¥–ª–∞–π–Ω–∞"""
        task_data = context.user_data.get('admin_task_creation', {})

        if deadline_text == "üìÖ –°–µ–≥–æ–¥–Ω—è –¥–æ 18:00":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è 18:00 –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            local_now = datetime.now()
            today_18_local = local_now.replace(hour=18, minute=0, second=0, microsecond=0)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ –µ—Å—Ç—å
            task_data['deadline'] = today_18_local
            task_data['deadline_text'] = today_18_local.strftime("%d.%m.%Y %H:%M")
        elif deadline_text == "üåÜ –ó–∞–≤—Ç—Ä–∞ –¥–æ 18:00":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ 18:00 –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            local_now = datetime.now()
            tomorrow_18_local = (local_now + timedelta(days=1)).replace(hour=18, minute=0, second=0, microsecond=0)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ –µ—Å—Ç—å
            task_data['deadline'] = tomorrow_18_local
            task_data['deadline_text'] = tomorrow_18_local.strftime("%d.%m.%Y %H:%M")
        elif deadline_text == "üìÜ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –¥–æ 18:00":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤ 18:00 –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            local_now = datetime.now()
            week_later_18_local = (local_now + timedelta(days=7)).replace(hour=18, minute=0, second=0, microsecond=0)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ –µ—Å—Ç—å
            task_data['deadline'] = week_later_18_local
            task_data['deadline_text'] = week_later_18_local.strftime("%d.%m.%Y %H:%M")
        else:
            # –ü–∞—Ä—Å–∏–º –¥–µ–¥–ª–∞–π–Ω
            deadline = self.parse_deadline(deadline_text)
            if deadline:
                task_data['deadline'] = deadline
                # –î–µ–¥–ª–∞–π–Ω —É–∂–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                task_data['deadline_text'] = deadline.strftime("%d.%m.%Y %H:%M")
            else:
                await update.message.reply_text(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `18.09.2025 18:00`\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    parse_mode='Markdown'
                )
                return

        context.user_data['admin_task_creation'] = task_data

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏
        await self.show_task_preview(update, context)

    def parse_deadline(self, deadline_text):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–µ–¥–ª–∞–π–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            formats = [
                "%d.%m.%Y %H:%M",
                "%d.%m.%Y %H.%M",
                "%d.%m.%Y",
                "%d/%m/%Y %H:%M",
                "%d/%m/%Y"
            ]

            for fmt in formats:
                try:
                    if fmt.endswith("%H:%M") or fmt.endswith("%H.%M"):
                        local_dt = datetime.strptime(deadline_text, fmt)
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ –µ—Å—Ç—å
                        return local_dt
                    else:
                        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Å—Ç–∞–≤–∏–º 23:59 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                        local_dt = datetime.strptime(deadline_text, fmt).replace(hour=23, minute=59)
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ –µ—Å—Ç—å
                        return local_dt
                except ValueError:
                    continue

            return None
        except Exception:
            return None

    async def show_task_preview(self, update, context):
        """–ü–æ–∫–∞–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏"""
        task_data = context.user_data.get('admin_task_creation', {})

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
        preview_text = f"""
üìã **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏**

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚îÇ üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {task_data.get('executor_name', '–ù–µ –≤—ã–±—Ä–∞–Ω')}
‚îÇ üìÅ **–ü—Ä–æ–µ–∫—Ç:** {task_data.get('project_name', '–ù–µ –≤—ã–±—Ä–∞–Ω')}
‚îÇ üè∑Ô∏è **–¢–∏–ø:** {self.get_task_type_name(task_data.get('task_type', ''))}
"""

        if task_data.get('format'):
            preview_text += f"‚îÇ üìê **–§–æ—Ä–º–∞—Ç:** {task_data.get('format')}\n"

        preview_text += f"‚îÇ ‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {task_data.get('deadline_text', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}\n"

        if task_data.get('description'):
            desc = task_data['description']
            if len(desc) > 100:
                desc = desc[:100] + "..."
            preview_text += f"‚îÇ üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {desc}\n"

        preview_text += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"

        keyboard = ReplyKeyboardMarkup(
            [
                ["‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"],
                ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await update.message.reply_text(
            preview_text,
            parse_mode='Markdown',
            reply_markup=keyboard
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥
        task_data['step'] = 'final_confirmation'
        context.user_data['admin_task_creation'] = task_data

    async def create_task(self, update, context):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        task_data = context.user_data.get('admin_task_creation', {})

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            conn = self.bot.get_db_connection()
            if not conn:
                await update.message.reply_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö**",
                    parse_mode='Markdown',
                    reply_markup=ReplyKeyboardRemove()
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏
            creator = self.bot.get_user_by_telegram_id(task_data['creator_id'], None)
            if not creator:
                await update.message.reply_text(
                    "‚ùå **–û—à–∏–±–∫–∞: —Å–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω**",
                    parse_mode='Markdown',
                    reply_markup=ReplyKeyboardRemove()
                )
                return

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID
            project_name = None
            if task_data.get('project_id'):
                project = await self.get_project_by_id(task_data.get('project_id'))
                if project:
                    project_name = project['name']

            cursor = self._execute_query(conn, """
                INSERT INTO tasks (
                    title, description, project, executor_id, author_id,
                    deadline, status, task_type, task_format, created_at
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                task_data.get('title'),
                task_data.get('description'),
                project_name,
                task_data.get('executor_id'),
                creator['id'],
                task_data.get('deadline'),
                'new',  # —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self.get_task_type_for_webapp(task_data.get('task_type')),
                task_data.get('format'),
                datetime.now()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            ), return_id=True)

            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
            import os
            db_engine = os.getenv('DB_ENGINE', 'sqlite').lower()

            if db_engine == 'postgresql':
                # PostgreSQL: ID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ RETURNING id
                result = cursor.fetchone()
                task_id = result['id'] if isinstance(result, dict) else result[0]
            else:
                # SQLite: –∏—Å–ø–æ–ª—å–∑—É–µ–º lastrowid
                task_id = cursor.lastrowid

            conn.commit()

            # –ü–æ–ª—É—á–∞–µ–º telegram_id –∏ name –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            executor_cursor = self._execute_query(conn,
                "SELECT telegram_id, name FROM users WHERE id = ?",
                (task_data.get('executor_id'),)
            )
            executor_row = executor_cursor.fetchone()

            conn.close()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Ç–≤–µ—Ç)
            if executor_row:
                import os
                db_engine = os.getenv('DB_ENGINE', 'sqlite').lower()

                if db_engine == 'postgresql':
                    executor_telegram_id = executor_row['telegram_id'] if isinstance(executor_row, dict) else executor_row[0]
                    executor_name = executor_row['name'] if isinstance(executor_row, dict) else executor_row[1]
                else:
                    executor_telegram_id = executor_row[0]
                    executor_name = executor_row[1]

                if executor_telegram_id:
                    logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–µ #{task_id} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {executor_name} (telegram_id: {executor_telegram_id})")
                    asyncio.create_task(
                        self.send_task_notification(
                            executor_telegram_id=executor_telegram_id,
                            task_id=task_id,
                            task_data=task_data
                        )
                    )
                else:
                    logger.warning(f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {executor_name} –Ω–µ—Ç telegram_id")
            else:
                logger.warning(f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_message = f"""
‚úÖ **–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!**

üìã **–ó–∞–¥–∞—á–∞ #{task_id}**
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task_data.get('title')}
‚îÇ üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {task_data.get('executor_name')}
‚îÇ üìÅ **–ü—Ä–æ–µ–∫—Ç:** {task_data.get('project_name')}
‚îÇ üè∑Ô∏è **–¢–∏–ø:** {self.get_task_type_name(task_data.get('task_type', ''))}
"""

            if task_data.get('format'):
                success_message += f"‚îÇ üìê **–§–æ—Ä–º–∞—Ç:** {task_data.get('format')}\n"

            success_message += f"‚îÇ ‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {task_data.get('deadline_text', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}\n"
            success_message += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
            success_message += "üì≤ **–ó–∞–¥–∞—á–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.**"

            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            await self.bot.clear_chat_history(update, context, limit=50)

            # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                ["üí∞ –†–∞—Å—Ö–æ–¥—ã"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

            await update.message.reply_text(
                success_message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            context.user_data.pop('admin_task_creation', None)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            await update.message.reply_text(
                "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )

    async def handle_edit_task(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ - –ø–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —à–∞–≥–∞"""
        task_data = context.user_data.get('admin_task_creation', {})

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        task_data['editing'] = True
        task_data['step'] = 'edit_selection'
        context.user_data['admin_task_creation'] = task_data

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        keyboard = []

        # –†–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        executor_role = task_data.get('executor_role', '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞')
        role_display = {
            'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'designer': '–î–∏–∑–∞–π–Ω–µ—Ä',
            'smm_manager': '–°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä'
        }.get(executor_role, executor_role)
        keyboard.append([f"üë§ –†–æ–ª—å: {role_display}"])

        # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        executor_name = task_data.get('executor_name', '–Ω–µ –≤—ã–±—Ä–∞–Ω')
        keyboard.append([f"üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_name}"])

        # –ü—Ä–æ–µ–∫—Ç
        project_name = task_data.get('project_name', '–Ω–µ –≤—ã–±—Ä–∞–Ω')
        keyboard.append([f"üìÅ –ü—Ä–æ–µ–∫—Ç: {project_name}"])

        # –¢–∏–ø –∑–∞–¥–∞—á–∏
        task_type = task_data.get('task_type', '–Ω–µ –≤—ã–±—Ä–∞–Ω')
        keyboard.append([f"üè∑Ô∏è –¢–∏–ø –∑–∞–¥–∞—á–∏: {task_type}"])

        # –§–æ—Ä–º–∞—Ç (–¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤)
        if executor_role == 'designer' and task_data.get('format'):
            format_val = task_data.get('format', '–Ω–µ –≤—ã–±—Ä–∞–Ω')
            keyboard.append([f"üìê –§–æ—Ä–º–∞—Ç: {format_val}"])

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        title = task_data.get('title', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(title) > 30:
            title = title[:30] + "..."
        keyboard.append([f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}"])

        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = task_data.get('description', '')
        if description:
            desc_preview = description[:30] + "..." if len(description) > 30 else description
            keyboard.append([f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {desc_preview}"])
        else:
            keyboard.append([f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"])

        # –î–µ–¥–ª–∞–π–Ω
        deadline = task_data.get('deadline_display', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        keyboard.append([f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline}"])

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
        keyboard.append(["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É"])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    # ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================

    async def check_and_return_to_preview(self, update, context):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–ª–∞–≥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        task_data = context.user_data.get('admin_task_creation', {})
        if task_data.get('return_to_preview'):
            task_data['step'] = 'final_confirmation'
            task_data.pop('return_to_preview', None)
            context.user_data['admin_task_creation'] = task_data
            await self.show_task_preview(update, context)
            return True
        return False

    async def get_users_by_role(self, role: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = self.bot.get_db_connection()
        if not conn:
            return []

        try:
            cursor = self._execute_query(conn, """
                SELECT id, name, telegram_username, role
                FROM users
                WHERE role = ? AND is_active = 1
                ORDER BY name
            """, (role,))

            rows = cursor.fetchall()
            logger.info(f"Found {len(rows)} users with role {role}")

            users = []
            for row in rows:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø row –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                import os
                db_engine = os.getenv('DB_ENGINE', 'sqlite').lower()

                if db_engine == 'postgresql':
                    # PostgreSQL —Å RealDictCursor –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict-like –æ–±—ä–µ–∫—Ç—ã
                    users.append({
                        'id': row['id'] if isinstance(row, dict) else row[0],
                        'name': row['name'] if isinstance(row, dict) else row[1],
                        'telegram_username': row['telegram_username'] if isinstance(row, dict) else row[2],
                        'role': row['role'] if isinstance(row, dict) else row[3]
                    })
                else:
                    # SQLite –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple
                    users.append({
                        'id': row[0],
                        'name': row[1],
                        'telegram_username': row[2],
                        'role': row[3]
                    })

            conn.close()
            logger.info(f"Returning {len(users)} users")
            return users
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏ {role}: {e}")
            if conn:
                conn.close()
            return []

    async def get_user_by_id(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        conn = self.bot.get_db_connection()
        if not conn:
            return None

        try:
            cursor = self._execute_query(conn, """
                SELECT id, name, telegram_username, role
                FROM users
                WHERE id = ?
            """, (user_id,))

            user = cursor.fetchone()
            conn.close()

            if user:
                return {
                    'id': user[0],
                    'name': user[1],
                    'telegram_username': user[2],
                    'role': user[3]
                }
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            conn.close()
            return None

    async def get_all_projects(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = self.bot.get_db_connection()
        if not conn:
            return []

        try:
            cursor = self._execute_query(conn, """
                SELECT id, name, start_date
                FROM projects
                WHERE is_archived = 0
                ORDER BY start_date DESC
            """, ())

            rows = cursor.fetchall()
            logger.info(f"Found {len(rows)} projects")

            import os
            db_engine = os.getenv('DB_ENGINE', 'sqlite').lower()

            projects = []
            for row in rows:
                if db_engine == 'postgresql':
                    # PostgreSQL —Å RealDictCursor –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict-like –æ–±—ä–µ–∫—Ç—ã
                    projects.append({
                        'id': row['id'] if isinstance(row, dict) else row[0],
                        'name': row['name'] if isinstance(row, dict) else row[1],
                        'start_date': row['start_date'] if isinstance(row, dict) else (row[2] if len(row) > 2 else None)
                    })
                else:
                    # SQLite –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple
                    projects.append({
                        'id': row[0],
                        'name': row[1],
                        'start_date': row[2] if len(row) > 2 else None
                    })

            conn.close()
            logger.info(f"Returning {len(projects)} projects")
            return projects
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            if conn:
                conn.close()
            return []

    async def get_project_by_id(self, project_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID"""
        conn = self.bot.get_db_connection()
        if not conn:
            return None

        try:
            cursor = self._execute_query(conn, """
                SELECT id, name
                FROM projects
                WHERE id = ?
            """, (project_id,))
            project = cursor.fetchone()
            conn.close()
            return dict(project) if project else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            conn.close()
            return None

    def get_role_name(self, role: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏"""
        role_names = {
            'admin': 'üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'smm_manager': 'üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä',
            'designer': 'üé® –î–∏–∑–∞–π–Ω–µ—Ä'
        }
        return role_names.get(role, role)

    async def get_task_types_by_role(self, role: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –∏–∑ API"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ API
            task_types_data = await self.bot.get_task_types_from_api(role)
            if task_types_data:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ç–∏–ø—ã –∑–∞–¥–∞—á –∏–∑ API –¥–ª—è —Ä–æ–ª–∏ {role}")
                return [display_name for display_name, internal_name in task_types_data]
            else:
                logger.warning(f"API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è —Ä–æ–ª–∏ {role}")
                return self.get_fallback_task_types_by_role(role)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return self.get_fallback_task_types_by_role(role)

    def get_fallback_task_types_by_role(self, role: str) -> List[str]:
        """Fallback —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç API)"""
        task_types = {
            'designer': [
                "üéûÔ∏è Motion",
                "üñºÔ∏è –°—Ç–∞—Ç–∏–∫–∞",
                "üé¨ –í–∏–¥–µ–æ",
                "üñºÔ∏è –ö–∞—Ä—É—Å–µ–ª—å",
                "üìå –î—Ä—É–≥–æ–µ"
            ],
            'smm_manager': [
                "[INFO] –ü—É–±–ª–∏–∫–∞—Ü–∏—è",
                "[INFO] –ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω",
                "üìä –û—Ç—á–µ—Ç",
                "üìπ –°—ä–µ–º–∫–∞",
                "ü§ù –í—Å—Ç—Ä–µ—á–∞",
                "üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è",
                "üé§ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è",
                "üóÇÔ∏è –ê–¥–º–∏–Ω –∑–∞–¥–∞—á–∏",
                "üîé –ê–Ω–∞–ª–∏–∑",
                "[DB] –ë—Ä–∏—Ñ–∏–Ω–≥",
                "üìú –°—Ü–µ–Ω–∞—Ä–∏–π",
                "üìå –î—Ä—É–≥–æ–µ"
            ],
            'admin': [
                "üìù –ü—É–±–ª–∏–∫–∞—Ü–∏—è",
                "üì∏ –°—ä–µ–º–∫–∏",
                "üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è",
                "üìä –û—Ç—á–µ—Ç",
                "üí∞ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è",
                "ü§ù –í—Å—Ç—Ä–µ—á–∞",
                "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã",
                "üë• –†–∞–±–æ—Ç–∞ —Å –∫–∞–¥—Ä–∞–º–∏",
                "üìã –ü–ª–∞–Ω–µ—Ä–∫–∞",
                "‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞—á–∏",
                "üé§ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ",
                "üìú –î–æ–≥–æ–≤–æ—Ä",
                "üîÑ –î—Ä—É–≥–æ–µ"
            ]
        }
        return task_types.get(role, [])

    def get_formats_for_designer(self) -> List[tuple]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞"""
        return [
            ("üì± 9:16", "9:16"),
            ("‚¨ú 1:1", "1:1"),
            ("üìê 4:5", "4:5"),
            ("üì∫ 16:9", "16:9"),
            ("üîÑ –î—Ä—É–≥–æ–µ", "other")
        ]

    def get_task_type_name(self, task_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
        type_names = {
            'motion': 'üé¨ Motion',
            'static': 'üñºÔ∏è –°—Ç–∞—Ç–∏–∫–∞',
            'video': 'üìπ –í–∏–¥–µ–æ',
            'carousel': 'üé† –ö–∞—Ä—É—Å–µ–ª—å',
            'publication': 'üìù –ü—É–±–ª–∏–∫–∞—Ü–∏—è',
            'content_plan': 'üìÖ –ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω',
            'report': 'üìä –û—Ç—á–µ—Ç',
            'shooting': 'üì∏ –°—ä–µ–º–∫–∞',
            'meeting': 'ü§ù –í—Å—Ç—Ä–µ—á–∞',
            'strategy': 'üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è',
            'presentation': 'üìã –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è',
            'admin_tasks': '‚öôÔ∏è –ê–¥–º–∏–Ω –∑–∞–¥–∞—á–∏',
            'analysis': 'üîç –ê–Ω–∞–ª–∏–∑',
            'briefing': 'üìë –ë—Ä–∏—Ñ–∏–Ω–≥',
            'script': 'üìù –°—Ü–µ–Ω–∞—Ä–∏–π',
            'accounting': 'üí∞ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è',
            'documents': 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã',
            'hr': 'üë• –†–∞–±–æ—Ç–∞ —Å –∫–∞–¥—Ä–∞–º–∏',
            'planning': 'üìã –ü–ª–∞–Ω–µ—Ä–∫–∞',
            'interview': 'üé§ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
            'contract': 'üìú –î–æ–≥–æ–≤–æ—Ä',
            'other': 'üîÑ –î—Ä—É–≥–æ–µ'
        }
        return type_names.get(task_type, task_type)

    def get_task_type_for_webapp(self, task_type: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ú–∞–ø–ø–∏–Ω–≥ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–ª—é—á–µ–π –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        webapp_mapping = {
            'motion': 'Motion',
            'static': '–°—Ç–∞—Ç–∏–∫–∞',
            'video': '–í–∏–¥–µ–æ',
            'carousel': '–ö–∞—Ä—É—Å–µ–ª—å',
            'publication': '–ü—É–±–ª–∏–∫–∞—Ü–∏—è',
            'content_plan': '–ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω',
            'report': '–û—Ç—á–µ—Ç',
            'shooting': '–°—ä–µ–º–∫–∞',
            'meeting': '–í—Å—Ç—Ä–µ—á–∞',
            'strategy': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è',
            'presentation': '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è',
            'admin_tasks': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞—á–∏',
            'analysis': '–ê–Ω–∞–ª–∏–∑',
            'briefing': '–ë—Ä–∏—Ñ–∏–Ω–≥',
            'script': '–°—Ü–µ–Ω–∞—Ä–∏–π',
            'accounting': '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è',
            'documents': '–î–æ–∫—É–º–µ–Ω—Ç—ã',
            'hr': '–†–∞–±–æ—Ç–∞ —Å –∫–∞–¥—Ä–∞–º–∏',
            'planning': '–ü–ª–∞–Ω–µ—Ä–∫–∞',
            'interview': '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
            'contract': '–î–æ–≥–æ–≤–æ—Ä',
            'other': '–î—Ä—É–≥–æ–µ'
        }
        return webapp_mapping.get(task_type, task_type)

    # ================== –ú–ï–¢–û–î–´ –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –ê–ö–¢–ò–í–ù–´–• –ó–ê–î–ê–ß ==================

    async def handle_active_tasks_start(self, update, context):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á - –≤—ã–±–æ—Ä —Ä–æ–ª–∏"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        context.user_data['active_tasks_view'] = {
            'step': 'role_selection'
        }

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        keyboard = [
            ["üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä"],
            ["üé® –î–∏–∑–∞–π–Ω–µ—Ä", "üìã –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            "üìã **–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á**\n\n"
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_active_tasks_role_selection(self, update, context, role_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        # –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä–æ–ª—å
        role_mapping = {
            "üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": "admin",
            "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä": "smm_manager",
            "üé® –î–∏–∑–∞–π–Ω–µ—Ä": "designer",
            "üëë –ì–ª–∞–≤–Ω—ã–π –°–ú–ú": "head_smm"
        }

        if role_text == "üìã –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            await self.show_all_active_tasks(update, context)
            return

        role = role_mapping.get(role_text)
        if not role:
            await update.message.reply_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=ReplyKeyboardRemove()
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        view_data = context.user_data.get('active_tasks_view', {})
        view_data['role'] = role
        view_data['step'] = 'user_selection'
        context.user_data['active_tasks_view'] = view_data

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–π —Ä–æ–ª–∏
        users = await self.get_users_by_role_for_active_tasks(role)

        if not users:
            await update.message.reply_text(
                f"üîç –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é **{self.get_role_display_name(role)}**\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–æ–π —Ä–æ–ª—å—é\n"
                f"‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —ç—Ç–æ–π —Ä–æ–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            context.user_data.pop('active_tasks_view', None)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–ø–æ 3 –≤ —Ä—è–¥)
        keyboard = []
        user_buttons = [f"üë§ {user['name']}" for user in users]
        for i in range(0, len(user_buttons), 3):
            row = user_buttons[i:i+3]
            keyboard.append(row)

        keyboard.append(["üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            f"üë• **–†–æ–ª—å: {self.get_role_display_name(role)}**\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_active_tasks_user_selection(self, update, context, user_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        view_data = context.user_data.get('active_tasks_view', {})
        role = view_data.get('role')

        if not role:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: —Ä–æ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                reply_markup=ReplyKeyboardRemove()
            )
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—É–±–∏—Ä–∞–µ–º "üë§ ")
        user_name = user_text.replace("üë§ ", "")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–π —Ä–æ–ª–∏
        users = await self.get_users_by_role_for_active_tasks(role)
        user = None
        for u in users:
            if u['name'] == user_name:
                user = u
                break

        if not user:
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{user_name}** –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.show_user_active_tasks(update, context, user)

    async def show_user_active_tasks(self, update, context, user):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            conn = self.bot.get_db_connection()
            if not conn:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                    reply_markup=ReplyKeyboardRemove()
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–∞—Ç—É—Å—ã "new", "in_progress" –∏ "overdue")
            cursor = self._execute_query(conn, """
                SELECT id, title, description, project, task_type, deadline, created_at
                FROM tasks
                WHERE executor_id = ? AND status IN ('new', 'in_progress', 'overdue')
                ORDER BY created_at DESC
            """, (user['id'],))

            tasks = cursor.fetchall()

            if not tasks:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
                current_user = update.effective_user
                current_db_user = self.bot.get_user_by_telegram_id(current_user.id, current_user.username)

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
                if current_db_user and current_db_user['role'] == 'admin':
                    keyboard = [
                        ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                        ["üí∞ –†–∞—Å—Ö–æ–¥—ã"]
                    ]
                else:
                    keyboard = [
                        ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                        ["üí∞ –†–∞—Å—Ö–æ–¥—ã"]
                    ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

                await update.message.reply_text(
                    f"üì≠ **{user['name']}** –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n\n"
                    f"–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! ‚úÖ\n\n"
                    f"üè† –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                context.user_data.pop('active_tasks_view', None)
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for i, task in enumerate(tasks, 1):
                task_info = []

                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ —Å –Ω–æ–º–µ—Ä–æ–º
                task_info.append(f"üìù **–ó–∞–¥–∞—á–∞ #{i}**")
                task_info.append(f"**{task[1]}**")  # title
                task_info.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")

                # –ü—Ä–æ–µ–∫—Ç
                if task[3]:  # project
                    task_info.append(f"üéØ **–ü—Ä–æ–µ–∫—Ç:** {task[3]}")

                # –¢–∏–ø –∑–∞–¥–∞—á–∏
                if task[4]:  # task_type
                    task_info.append(f"üìÇ **–¢–∏–ø:** {self.get_task_type_for_webapp(task[4])}")

                # –î–µ–¥–ª–∞–π–Ω
                if task[5]:  # deadline
                    try:
                        from datetime import datetime
                        # –î–µ–¥–ª–∞–π–Ω —É–∂–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                        deadline_dt = datetime.fromisoformat(task[5].replace('Z', '+00:00'))
                        deadline_str = deadline_dt.strftime("%d.%m.%Y –≤ %H:%M")
                        task_info.append(f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {deadline_str}")

                        # –°—Ç–∞—Ç—É—Å –≤—Å–µ–≥–¥–∞ "–í —Ä–∞–±–æ—Ç–µ" –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
                        task_info.append("üü¢ **–°—Ç–∞—Ç—É—Å:** –í —Ä–∞–±–æ—Ç–µ")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
                        now = datetime.now()
                        time_left = local_deadline - now
                        if time_left.days < 0:
                            task_info.append("üî¥ **–°—Ä–æ–∫:** –ü—Ä–æ—Å—Ä–æ—á–µ–Ω!")
                        elif time_left.days == 0:
                            task_info.append("üü° **–°—Ä–æ–∫:** –°–µ–≥–æ–¥–Ω—è!")
                        elif time_left.days == 1:
                            task_info.append("üü† **–°—Ä–æ–∫:** –ó–∞–≤—Ç—Ä–∞")
                        else:
                            task_info.append(f"‚è±Ô∏è **–û—Å—Ç–∞–ª–æ—Å—å:** {time_left.days} –¥–Ω.")
                    except:
                        task_info.append(f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {task[5]}")

                # –û–ø–∏—Å–∞–Ω–∏–µ
                if task[2]:  # description
                    desc = task[2]
                    if len(desc) > 200:
                        desc = desc[:200] + "..."
                    task_info.append(f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{desc}")

                # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                if task[6]:  # created_at
                    try:
                        from datetime import datetime
                        created_dt = datetime.fromisoformat(task[6].replace('Z', '+00:00'))
                        created_str = created_dt.strftime("%d.%m.%Y")
                        task_info.append(f"üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {created_str}")
                    except:
                        pass

                task_message = "\n".join(task_info)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å–ª–µ–¥–Ω—è—è –ª–∏ —ç—Ç–æ –∑–∞–¥–∞—á–∞
                is_last_task = (i == len(tasks))

                if is_last_task:
                    # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª—è–µ–º inline –∫–Ω–æ–ø–∫–∏ –∏ –∑–∞—Ç–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
                    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏
                    inline_keyboard = [
                        [
                            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_task_{task[0]}"),
                            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_task_{task[0]}")
                        ]
                    ]
                    inline_markup = InlineKeyboardMarkup(inline_keyboard)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
                    await update.message.reply_text(
                        task_message,
                        parse_mode='Markdown',
                        reply_markup=inline_markup
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
                    current_user = update.effective_user
                    current_db_user = self.bot.get_user_by_telegram_id(current_user.id, current_user.username)

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
                    if current_db_user and current_db_user['role'] == 'admin':
                        keyboard = [
                            ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                            ["üí∞ –†–∞—Å—Ö–æ–¥—ã"]
                        ]
                    else:
                        keyboard = [
                            ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                            ["üí∞ –†–∞—Å—Ö–æ–¥—ã"]
                        ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    summary_text = (
                        f"üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {user['name']}**\n"
                        f"üë• **–†–æ–ª—å:** {self.get_role_display_name(user.get('role', 'unknown'))}\n"
                        f"üìä **–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:** {len(tasks)}"
                    )

                    await update.message.reply_text(
                        summary_text,
                        parse_mode='Markdown'
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    await update.message.reply_text(
                        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=reply_markup
                    )
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á —Ç–æ–ª—å–∫–æ inline –∫–Ω–æ–ø–∫–∏
                    keyboard = [
                        [
                            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_task_{task[0]}"),
                            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_task_{task[0]}")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await update.message.reply_text(
                        task_message,
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
                    await asyncio.sleep(0.3)

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–µ, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á",
                reply_markup=ReplyKeyboardRemove()
            )
        finally:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            context.user_data.pop('active_tasks_view', None)

    async def show_all_active_tasks(self, update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            conn = self.bot.get_db_connection()
            if not conn:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                    reply_markup=ReplyKeyboardRemove()
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–±–æ—Ç–µ) —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö
            cursor = self._execute_query(conn, """
                SELECT t.id, t.title, t.project, t.task_type, t.deadline, u.name as executor_name, u.role
                FROM tasks t
                LEFT JOIN users u ON t.executor_id = u.id
                WHERE t.status = 'in_progress'
                ORDER BY t.created_at DESC
            """, ())

            tasks = cursor.fetchall()

            if not tasks:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
                current_user = update.effective_user
                current_db_user = self.bot.get_user_by_telegram_id(current_user.id, current_user.username)

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
                if current_db_user and current_db_user['role'] == 'admin':
                    keyboard = [
                        ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                        ["üí∞ –†–∞—Å—Ö–æ–¥—ã"]
                    ]
                else:
                    keyboard = [
                        ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                        ["üí∞ –†–∞—Å—Ö–æ–¥—ã"]
                    ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

                await update.message.reply_text(
                    f"üì≠ **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ**\n\n"
                    f"–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! ‚úÖ\n\n"
                    f"üè† –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                context.user_data.pop('active_tasks_view', None)
                return

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
            tasks_by_user = {}
            for task in tasks:
                executor = task[5] or "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                role = task[6] or "unknown"

                if executor not in tasks_by_user:
                    tasks_by_user[executor] = {
                        'role': role,
                        'tasks': []
                    }
                tasks_by_user[executor]['tasks'].append(task)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            total_users = len(tasks_by_user)
            summary_text = (
                f"üìã **–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Å–∏—Å—Ç–µ–º–µ**\n"
                f"üìä **–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:** {len(tasks)}\n"
                f"üë• **–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏:** {total_users}\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            )

            await update.message.reply_text(
                summary_text,
                parse_mode='Markdown'
            )

            await asyncio.sleep(0.5)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            user_count = 0
            for executor, data in tasks_by_user.items():
                user_count += 1
                role_display = self.get_role_display_name(data['role'])

                user_header = (
                    f"üë§ **{executor}**\n"
                    f"üé≠ **–†–æ–ª—å:** {role_display}\n"
                    f"üìù **–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:** {len(data['tasks'])}\n"
                    f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                )

                await update.message.reply_text(
                    user_header,
                    parse_mode='Markdown'
                )

                await asyncio.sleep(0.3)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for i, task in enumerate(data['tasks'], 1):
                    task_info = []
                    task_info.append(f"üìå **–ó–∞–¥–∞—á–∞ #{i} –¥–ª—è {executor}**")
                    task_info.append(f"**{task[1]}**")  # title
                    task_info.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")

                    if task[2]:  # project
                        task_info.append(f"üéØ **–ü—Ä–æ–µ–∫—Ç:** {task[2]}")

                    if task[3]:  # task_type
                        task_info.append(f"üìÇ **–¢–∏–ø:** {self.get_task_type_for_webapp(task[3])}")

                    if task[4]:  # deadline
                        try:
                            # –î–µ–¥–ª–∞–π–Ω —É–∂–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                            deadline_dt = datetime.fromisoformat(task[4].replace('Z', '+00:00'))
                            deadline_str = deadline_dt.strftime("%d.%m.%Y –≤ %H:%M")
                            task_info.append(f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {deadline_str}")

                            # –°—Ç–∞—Ç—É—Å –≤—Å–µ–≥–¥–∞ "–í —Ä–∞–±–æ—Ç–µ" –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
                            task_info.append("üü¢ **–°—Ç–∞—Ç—É—Å:** –í —Ä–∞–±–æ—Ç–µ")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ—á–Ω–æ—Å—Ç—å –¥–µ–¥–ª–∞–π–Ω–∞
                            now = datetime.now()
                            time_left = local_deadline - now
                            if time_left.days < 0:
                                task_info.append("üî¥ **–°—Ä–æ–∫:** –ü—Ä–æ—Å—Ä–æ—á–µ–Ω!")
                            elif time_left.days == 0:
                                task_info.append("üü° **–°—Ä–æ–∫:** –°–µ–≥–æ–¥–Ω—è!")
                            elif time_left.days == 1:
                                task_info.append("üü† **–°—Ä–æ–∫:** –ó–∞–≤—Ç—Ä–∞")
                            else:
                                task_info.append(f"‚è±Ô∏è **–û—Å—Ç–∞–ª–æ—Å—å:** {time_left.days} –¥–Ω.")
                        except:
                            task_info.append(f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {task[4]}")

                    task_message = "\n".join(task_info)

                    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
                    keyboard = [
                        [
                            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_task_{task[0]}"),
                            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_task_{task[0]}")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await update.message.reply_text(
                        task_message,
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )

                    if i < len(data['tasks']):
                        await asyncio.sleep(0.2)

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                if user_count < total_users:
                    await asyncio.sleep(0.5)

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            await asyncio.sleep(0.5)

            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
            current_user = update.effective_user
            current_db_user = self.bot.get_user_by_telegram_id(current_user.id, current_user.username)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            if current_db_user and current_db_user['role'] == 'admin':
                keyboard = [
                    ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                    ["üí∞ –†–∞—Å—Ö–æ–¥—ã"]
                ]
            else:
                keyboard = [
                    ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                    ["üí∞ –†–∞—Å—Ö–æ–¥—ã"]
                ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

            await update.message.reply_text(
                f"‚úÖ **–û–±–∑–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω**\n"
                f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –æ—Ç {total_users} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
                f"üíº –í—Å–µ –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ: –í —Ä–∞–±–æ—Ç–µ\n\n"
                f"üè† –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á",
                reply_markup=ReplyKeyboardRemove()
            )
        finally:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            context.user_data.pop('active_tasks_view', None)

    async def get_users_by_role_for_active_tasks(self, role_key):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            conn = self.bot.get_db_connection()
            if not conn:
                return []

            cursor = self._execute_query(conn, """
                SELECT id, name, telegram_username, role
                FROM users
                WHERE role = ? AND is_active = 1
                ORDER BY name
            """, (role_key,))

            users = []
            rows = cursor.fetchall()

            import os
            db_engine = os.getenv('DB_ENGINE', 'sqlite').lower()

            for row in rows:
                if db_engine == 'postgresql':
                    # PostgreSQL —Å RealDictCursor –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict-like –æ–±—ä–µ–∫—Ç—ã
                    users.append({
                        'id': row['id'] if isinstance(row, dict) else row[0],
                        'name': row['name'] if isinstance(row, dict) else row[1],
                        'telegram_username': row['telegram_username'] if isinstance(row, dict) else row[2],
                        'role': row['role'] if isinstance(row, dict) else row[3]
                    })
                else:
                    # SQLite –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple
                    users.append({
                        'id': row[0],
                        'name': row[1],
                        'telegram_username': row[2],
                        'role': row[3]
                    })

            logger.info(f"get_users_by_role_for_active_tasks: Found {len(users)} users for role {role_key}")
            return users

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏ {role_key}: {e}")
            return []
        finally:
            if conn:
                conn.close()

    def get_role_display_name(self, role):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–æ–ª–∏"""
        role_names = {
            'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'smm_manager': '–°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä',
            'designer': '–î–∏–∑–∞–π–Ω–µ—Ä',
            'head_smm': '–ì–ª–∞–≤–Ω—ã–π –°–ú–ú'
        }
        return role_names.get(role, role)

    # ================== –ú–ï–¢–û–î–´ –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –ê–†–•–ò–í–ù–´–• –ó–ê–î–ê–ß ==================

    async def handle_archived_tasks_start(self, update, context):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á - –≤—ã–±–æ—Ä —Ä–æ–ª–∏"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        context.user_data['archived_tasks_view'] = {
            'step': 'role_selection'
        }

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        keyboard = [
            ["üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä"],
            ["üé® –î–∏–∑–∞–π–Ω–µ—Ä"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            "üìÅ **–ü—Ä–æ—Å–º–æ—Ç—Ä –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á**\n\n"
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_archived_tasks_role_selection(self, update, context, role_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        # –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä–æ–ª—å
        role_mapping = {
            "üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": "admin",
            "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä": "smm_manager",
            "üé® –î–∏–∑–∞–π–Ω–µ—Ä": "designer"
        }

        role = role_mapping.get(role_text)
        if not role:
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å
        archived_data = context.user_data.get('archived_tasks_view', {})
        archived_data['role'] = role
        archived_data['step'] = 'user_selection'
        context.user_data['archived_tasks_view'] = archived_data

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
        users = await self.get_users_by_role_for_active_tasks(role)

        if not users:
            await update.message.reply_text(
                f"‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é {role_text}",
                parse_mode='Markdown'
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
        keyboard = []
        user_buttons = [f"üë§ {user['name']}" for user in users]
        for i in range(0, len(user_buttons), 2):
            row = user_buttons[i:i+2]
            keyboard.append(row)

        keyboard.append(["üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_archived_tasks_user_selection(self, update, context, user_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        user_name = user_text.replace("üë§ ", "").strip()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        archived_data = context.user_data.get('archived_tasks_view', {})
        selected_role = archived_data.get('role')

        if not selected_role:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ä–æ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–π —Ä–æ–ª–∏
        users = await self.get_users_by_role_for_active_tasks(selected_role)

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
        user = None
        for u in users:
            if u['name'] == user_name:
                user = u
                break

        if not user:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞
        archived_data['user_id'] = user['id']
        archived_data['user_name'] = user['name']
        archived_data['step'] = 'period_selection'
        context.user_data['archived_tasks_view'] = archived_data

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        keyboard = [
            ["üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", "üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é"],
            ["üìÖ –ó–∞ –º–µ—Å—è—Ü", "üìÖ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            f"üë§ **–°–æ—Ç—Ä—É–¥–Ω–∏–∫:** {user['name']}\n\n"
            f"üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_archived_tasks_period_selection(self, update, context, period_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""

        archived_data = context.user_data.get('archived_tasks_view', {})
        user_id = archived_data.get('user_id')
        user_name = archived_data.get('user_name')

        if not user_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = {
            'id': user_id,
            'name': user_name,
            'role': archived_data.get('role')
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥
        archived_data['period'] = period_text
        context.user_data['archived_tasks_view'] = archived_data

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–∏–æ–¥–∞
        await self.show_user_archived_tasks(update, context, user, period_text)

    async def show_user_archived_tasks(self, update, context, user, period_text):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        try:
            conn = self.bot.get_db_connection()
            if not conn:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return

            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
            from datetime import datetime, timedelta
            now = datetime.now()

            if period_text == "üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è":
                start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
                period_label = "—Å–µ–≥–æ–¥–Ω—è"
            elif period_text == "üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é":
                start_date = now - timedelta(days=7)
                period_label = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"
            elif period_text == "üìÖ –ó–∞ –º–µ—Å—è—Ü":
                start_date = now - timedelta(days=30)
                period_label = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
            else:  # –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è
                start_date = None
                period_label = "–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å "done")
            if start_date:
                cursor = self._execute_query(conn, """
                    SELECT id, title, description, project, task_type, deadline, created_at, finished_at
                    FROM tasks
                    WHERE executor_id = ? AND status = 'done' AND finished_at >= ?
                    ORDER BY finished_at DESC
                    LIMIT 50
                """, (user['id'], start_date.isoformat()))
            else:
                cursor = self._execute_query(conn, """
                    SELECT id, title, description, project, task_type, deadline, created_at, finished_at
                    FROM tasks
                    WHERE executor_id = ? AND status = 'done'
                    ORDER BY finished_at DESC
                    LIMIT 50
                """, (user['id'],))

            tasks = cursor.fetchall()

            if not tasks:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
                current_user = update.effective_user
                current_db_user = self.bot.get_user_by_telegram_id(current_user.id, current_user.username)

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
                if current_db_user and current_db_user['role'] == 'admin':
                    keyboard = [
                        ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                        ["üí∞ –†–∞—Å—Ö–æ–¥—ã"]
                    ]
                else:
                    keyboard = [
                        ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                        ["üí∞ –†–∞—Å—Ö–æ–¥—ã"]
                    ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

                await update.message.reply_text(
                    f"üì≠ **{user['name']}** –Ω–µ –∏–º–µ–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n\n"
                    f"üè† –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                context.user_data.pop('archived_tasks_view', None)
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for i, task in enumerate(tasks, 1):
                task_info = []

                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ —Å –Ω–æ–º–µ—Ä–æ–º
                task_info.append(f"üìù **–ó–∞–¥–∞—á–∞ #{i}**")
                task_info.append(f"**{task[1]}**")  # title
                task_info.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")

                # –ü—Ä–æ–µ–∫—Ç
                if task[3]:  # project
                    task_info.append(f"üéØ **–ü—Ä–æ–µ–∫—Ç:** {task[3]}")

                # –¢–∏–ø –∑–∞–¥–∞—á–∏
                if task[4]:  # task_type
                    task_info.append(f"üìÇ **–¢–∏–ø:** {self.get_task_type_for_webapp(task[4])}")

                # –î–µ–¥–ª–∞–π–Ω
                if task[5]:  # deadline
                    try:
                        from datetime import datetime
                        deadline_dt = datetime.fromisoformat(task[5].replace('Z', '+00:00'))
                        deadline_str = deadline_dt.strftime("%d.%m.%Y –≤ %H:%M")
                        task_info.append(f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {deadline_str}")
                    except:
                        task_info.append(f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {task[5]}")

                # –°—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                task_info.append("‚úÖ **–°—Ç–∞—Ç—É—Å:** –ó–∞–≤–µ—Ä—à–µ–Ω–æ")

                # –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if task[7]:  # finished_at
                    try:
                        from datetime import datetime
                        finished_dt = datetime.fromisoformat(task[7].replace('Z', '+00:00'))
                        finished_str = finished_dt.strftime("%d.%m.%Y –≤ %H:%M")
                        task_info.append(f"üèÅ **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {finished_str}")
                    except:
                        pass

                # –û–ø–∏—Å–∞–Ω–∏–µ
                if task[2]:  # description
                    desc = task[2]
                    if len(desc) > 200:
                        desc = desc[:200] + "..."
                    task_info.append(f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{desc}")

                # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                if task[6]:  # created_at
                    try:
                        from datetime import datetime
                        created_dt = datetime.fromisoformat(task[6].replace('Z', '+00:00'))
                        created_str = created_dt.strftime("%d.%m.%Y")
                        task_info.append(f"üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {created_str}")
                    except:
                        pass

                task_message = "\n".join(task_info)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å–ª–µ–¥–Ω—è—è –ª–∏ —ç—Ç–æ –∑–∞–¥–∞—á–∞
                is_last_task = (i == len(tasks))

                if is_last_task:
                    # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    # –£–±–∏—Ä–∞–µ–º Markdown —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
                    await update.message.reply_text(
                        task_message
                    )

                    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
                    current_user = update.effective_user
                    current_db_user = self.bot.get_user_by_telegram_id(current_user.id, current_user.username)

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
                    if current_db_user and current_db_user['role'] == 'admin':
                        keyboard = [
                            ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                            ["üí∞ –†–∞—Å—Ö–æ–¥—ã"]
                        ]
                    else:
                        keyboard = [
                            ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                            ["üí∞ –†–∞—Å—Ö–æ–¥—ã"]
                        ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    summary_text = (
                        f"üìÅ **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {user['name']}**\n"
                        f"üë• **–†–æ–ª—å:** {self.get_role_display_name(user.get('role', 'unknown'))}\n"
                        f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {period_label}\n"
                        f"üìä **–í—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:** {len(tasks)}"
                    )

                    await update.message.reply_text(
                        summary_text,
                        parse_mode='Markdown'
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    await update.message.reply_text(
                        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=reply_markup
                    )
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await update.message.reply_text(
                        task_message
                    )

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
                    await asyncio.sleep(0.3)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {str(e)}",
                parse_mode='Markdown'
            )
        finally:
            if conn:
                conn.close()

    async def handle_admin_message(self, update, context, text):
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ workflow –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        active_tasks_data = context.user_data.get('active_tasks_view')
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ workflow –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        archived_tasks_data = context.user_data.get('archived_tasks_view')

        # –î–µ–±–∞–≥ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
        if text in ["üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä", "üé® –î–∏–∑–∞–π–Ω–µ—Ä"]:
            logger.debug(f"Role button pressed: {text}, active={active_tasks_data is not None}, archived={archived_tasks_data is not None}")

        # –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        if text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏":
            await self.handle_active_tasks_start(update, context)
            return True

        # –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        elif text == "üìÅ –ê—Ä—Ö–∏–≤ –∑–∞–¥–∞—á":
            await self.handle_archived_tasks_start(update, context)
            return True

        # –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–¥–∞—á
        elif text == "üÜï –ù–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –≤ —Ä–∞–±–æ—Ç—É":
            await self.handle_new_tasks_start(update, context)
            return True

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ, –ø–æ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω—ã–µ
        if text in ["üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä", "üé® –î–∏–∑–∞–π–Ω–µ—Ä"]:

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if archived_tasks_data and archived_tasks_data.get('step') == 'role_selection':
                try:
                    await self.handle_archived_tasks_role_selection(update, context, text)
                    return True
                except Exception as e:
                    import traceback
                    traceback.print_exc()
                    return True
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            elif active_tasks_data and active_tasks_data.get('step') == 'role_selection':
                try:
                    await self.handle_active_tasks_role_selection(update, context, text)
                    return True
                except Exception as e:
                    import traceback
                    traceback.print_exc()
                    return True
            else:
                logger.debug("No matching workflow for role button")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        if active_tasks_data and active_tasks_data.get('step') == 'role_selection':
            if text == "üìã –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏":
                await self.show_all_active_tasks(update, context)
                return True

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        elif active_tasks_data and active_tasks_data.get('step') == 'user_selection':
            if text == "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
                await self.handle_active_tasks_start(update, context)
                return True

            selected_role = active_tasks_data.get('role')
            if selected_role:
                users = await self.get_users_by_role_for_active_tasks(selected_role)
                for user in users:
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –∫–Ω–æ–ø–∫–∏
                    button_text = f"üë§ {user['name']}"
                    if button_text == text:
                        await self.handle_active_tasks_user_selection(update, context, text)
                        return True

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        elif archived_tasks_data and archived_tasks_data.get('step') == 'user_selection':
            if text == "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
                await self.handle_archived_tasks_start(update, context)
                return True

            selected_role = archived_tasks_data.get('role')
            if selected_role:
                users = await self.get_users_by_role_for_active_tasks(selected_role)
                for user in users:
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –∫–Ω–æ–ø–∫–∏
                    button_text = f"üë§ {user['name']}"
                    if button_text == text:
                        await self.handle_archived_tasks_user_selection(update, context, text)
                        return True

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        elif archived_tasks_data and archived_tasks_data.get('step') == 'period_selection':
            if text == "üîô –ù–∞–∑–∞–¥":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                selected_role = archived_tasks_data.get('role')
                if selected_role:
                    role_text_mapping = {
                        "admin": "üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                        "smm_manager": "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä",
                        "designer": "üé® –î–∏–∑–∞–π–Ω–µ—Ä"
                    }
                    role_text = role_text_mapping.get(selected_role, "")
                    if role_text:
                        await self.handle_archived_tasks_role_selection(update, context, role_text)
                return True

            if text in ["üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", "üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", "üìÖ –ó–∞ –º–µ—Å—è—Ü", "üìÖ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è"]:
                await self.handle_archived_tasks_period_selection(update, context, text)
                return True

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
        elif text == "üîô –ù–∞–∑–∞–¥" and (active_tasks_data or archived_tasks_data):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á
            if active_tasks_data:
                await self.handle_active_tasks_start(update, context)
            elif archived_tasks_data:
                await self.handle_archived_tasks_start(update, context)
            return True

        return False  # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ

    async def send_task_notification(self, executor_telegram_id: int, task_id: int, task_data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
        logger.info(f"üîî send_task_notification –≤—ã–∑–≤–∞–Ω–∞: task_id={task_id}, executor_telegram_id={executor_telegram_id}")
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
            notification_text = f"""
üîî **–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞!**

üìã **–ó–∞–¥–∞—á–∞ #{task_id}**
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task_data.get('title')}
‚îÇ üìÅ **–ü—Ä–æ–µ–∫—Ç:** {task_data.get('project_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚îÇ üè∑Ô∏è **–¢–∏–ø:** {self.get_task_type_name(task_data.get('task_type', ''))}
"""

            if task_data.get('format'):
                notification_text += f"‚îÇ üìê **–§–æ—Ä–º–∞—Ç:** {task_data.get('format')}\n"

            notification_text += f"‚îÇ ‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {task_data.get('deadline_text', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}\n"
            notification_text += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
            notification_text += "üí° **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É**"

            # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
            inline_keyboard = [
                [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"accept_task_{task_id}")]
            ]
            inline_markup = InlineKeyboardMarkup(inline_keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if self.bot.app:
                try:
                    await self.bot.app.bot.send_message(
                        chat_id=executor_telegram_id,
                        text=notification_text,
                        parse_mode='Markdown',
                        reply_markup=inline_markup
                    )
                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ #{task_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {executor_telegram_id}")
                except Exception as send_error:
                    error_msg = str(send_error)
                    if "bot was blocked by the user" in error_msg or "user is deactivated" in error_msg:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {executor_telegram_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                    elif "chat not found" in error_msg:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {executor_telegram_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º (/start)")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {executor_telegram_id}: {send_error}")
            else:
                logger.error("Bot application is not initialized")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–µ: {e}")

    async def handle_new_tasks_start(self, update, context):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–¥–∞—á (—Å—Ç–∞—Ç—É—Å 'new')"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        db_user = self.bot.get_user_by_telegram_id(user.id, user.username)

        if not db_user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        conn = self.bot.get_db_connection()
        if not conn:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = self._execute_query(conn, """
                SELECT t.id, t.title, t.description, t.project, t.task_type, t.deadline,
                       t.created_at, u.name as executor_name, u.id as executor_id
                FROM tasks t
                LEFT JOIN users u ON t.executor_id = u.id
                WHERE t.status = 'new' AND t.executor_id = ?
                ORDER BY t.created_at DESC
            """, (db_user['id'],))
            tasks = cursor.fetchall()
            conn.close()

            if not tasks:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
                keyboard = [
                    ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                    ["üí∞ –†–∞—Å—Ö–æ–¥—ã"],
                    ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

                await update.message.reply_text(
                    "üéâ **–ù–µ—Ç –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–¥–∞—á!**\n\n"
                    "–í—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ —Ä–∞–±–æ—Ç—É.",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å inline –∫–Ω–æ–ø–∫–æ–π
            for i, task in enumerate(tasks, 1):
                task_id, title, description, project, task_type, deadline, created_at, executor_name, executor_id = task

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
                task_info = []
                task_info.append(f"üÜï **–ó–∞–¥–∞—á–∞ #{task_id}**")
                task_info.append(f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}")

                if executor_name:
                    task_info.append(f"üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {executor_name}")

                if project:
                    task_info.append(f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {project}")

                if task_type:
                    task_info.append(f"üè∑Ô∏è **–¢–∏–ø:** {task_type}")

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–¥–ª–∞–π–Ω
                if deadline:
                    from datetime import datetime
                    try:
                        dl = datetime.fromisoformat(deadline)
                        deadline_str = dl.strftime("%d.%m.%Y –≤ %H:%M")
                        task_info.append(f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {deadline_str}")

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ–≥–¥–∞ "–ù–æ–≤–∞—è"
                        task_info.append("üîµ **–°—Ç–∞—Ç—É—Å:** –ù–æ–≤–∞—è")
                    except:
                        task_info.append(f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {deadline}")

                # –û–ø–∏—Å–∞–Ω–∏–µ
                if description:
                    desc = description
                    if len(desc) > 200:
                        desc = desc[:200] + "..."
                    task_info.append(f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{desc}")

                # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                if created_at:
                    try:
                        from datetime import datetime
                        created_dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        created_str = created_dt.strftime("%d.%m.%Y")
                        task_info.append(f"üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {created_str}")
                    except:
                        pass

                task_message = "\n".join(task_info)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å–ª–µ–¥–Ω—è—è –ª–∏ —ç—Ç–æ –∑–∞–¥–∞—á–∞
                is_last_task = (i == len(tasks))

                # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
                inline_keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"accept_task_{task_id}")
                    ]
                ]
                inline_markup = InlineKeyboardMarkup(inline_keyboard)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å inline –∫–Ω–æ–ø–∫–æ–π
                await update.message.reply_text(
                    task_message,
                    parse_mode='Markdown',
                    reply_markup=inline_markup
                )

                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                if is_last_task:
                    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    keyboard = [
                        ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                        ["üí∞ –†–∞—Å—Ö–æ–¥—ã"],
                        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    summary_text = f"üìä **–í—Å–µ–≥–æ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–¥–∞—á:** {len(tasks)}"

                    await update.message.reply_text(
                        summary_text,
                        parse_mode='Markdown'
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    await update.message.reply_text(
                        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=reply_markup
                    )
                else:
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
                    await asyncio.sleep(0.3)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–¥–∞—á: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á",
                reply_markup=ReplyKeyboardRemove()
            )
