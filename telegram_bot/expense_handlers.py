#!/usr/bin/env python3

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –≤ Telegram –±–æ—Ç–µ
"""

import sqlite3
import asyncio
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import ContextTypes
import logging

logger = logging.getLogger(__name__)

class ExpenseHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏"""

    def __init__(self, bot_instance):
        self.bot = bot_instance

    async def handle_expenses_menu(self, query, context):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        try:
            user = query.from_user
            db_user = self.bot.get_user_by_telegram_id(user.id, user.username)

            if not db_user:
                await query.edit_message_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ."
                )
                return

            keyboard = [
                [InlineKeyboardButton("‚ûï –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥", callback_data="add_expense")],
                [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã", callback_data="view_expenses")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            message = f"""
üí∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏**

üë§ **{db_user['name']}**

**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**
            """

            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_expenses_menu: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_add_expense_start(self, query, context):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
            context.user_data['expense_creation'] = {
                'step': 'name',
                'name': '',
                'amount': '',
                'date': '',
                'project_id': None,
                'description': ''
            }

            message = """
‚ûï **–ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥**

**–®–∞–≥ 1/5:** –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞

üìù *–ù–∞–ø—Ä–∏–º–µ—Ä: –û–±–µ–¥, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è, –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ*

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã
            """

            await query.edit_message_text(message, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_add_expense_start: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_view_expenses_periods(self, query, context):
        """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        try:
            keyboard = [
                [InlineKeyboardButton("üìÖ –ó–∞ –¥–µ–Ω—å", callback_data="period_day")],
                [InlineKeyboardButton("üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="period_week")],
                [InlineKeyboardButton("üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="period_month")],
                [InlineKeyboardButton("üìÖ –ó–∞ –≥–æ–¥", callback_data="period_year")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_expenses")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            message = """
üìã **–ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã**

**–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:**
            """

            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_view_expenses_periods: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_period_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏ –ø–æ–∫–∞–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        try:
            period = query.data.replace("period_", "")
            user = query.from_user
            db_user = self.bot.get_user_by_telegram_id(user.id, user.username)

            if not db_user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
            now = datetime.now()
            if period == "day":
                start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
                period_name = "—Å–µ–≥–æ–¥–Ω—è"
            elif period == "week":
                start_date = now - timedelta(days=7)
                period_name = "–∑–∞ –Ω–µ–¥–µ–ª—é"
            elif period == "month":
                start_date = now - timedelta(days=30)
                period_name = "–∑–∞ –º–µ—Å—è—Ü"
            elif period == "year":
                start_date = now - timedelta(days=365)
                period_name = "–∑–∞ –≥–æ–¥"
            else:
                start_date = now - timedelta(days=30)
                period_name = "–∑–∞ –º–µ—Å—è—Ü"

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
            expenses = self.get_user_expenses_by_period(db_user['id'], start_date)

            if not expenses:
                keyboard = [
                    [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="view_expenses")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_expenses")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                message = f"""
üìã **–ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã {period_name}**

üìù –†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.

**–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.**
                """

                await query.edit_message_text(
                    message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏
            total = 0
            message = f"üìã **–ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã {period_name}**\n\n"

            for expense in expenses:
                amount = float(expense['amount']) if expense['amount'] else 0
                total += amount

                date_str = expense['date'] if expense['date'] else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                project_name = expense['project_name'] if expense['project_name'] else '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞'
                description = expense['description'] if expense['description'] else ''

                message += f"üí≥ **{expense['name']}**\n"
                message += f"   üí∞ –°—É–º–º–∞: {amount:,.0f} —Å—É–º\n"
                message += f"   üìÖ –î–∞—Ç–∞: {date_str}\n"
                message += f"   üìÅ –ü—Ä–æ–µ–∫—Ç: {project_name}\n"
                if description:
                    message += f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {description}\n"
                message += "\n"

            message += f"üíé **–û–±—â–∞—è —Å—É–º–º–∞: {total:,.0f} —Å—É–º**"

            keyboard = [
                [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="view_expenses")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_expenses")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_period_selection: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.")

    async def handle_expense_text_input(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
        if 'expense_creation' not in context.user_data:
            return

        try:
            expense_data = context.user_data['expense_creation']
            text = update.message.text.strip()

            if expense_data['step'] == 'name':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                expense_data['name'] = text
                expense_data['step'] = 'amount'

                message = """
‚ûï **–ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥**

**–®–∞–≥ 2/5:** –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞

üí∞ *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Å—É–º–∞—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)*

üìù *–ù–∞–ø—Ä–∏–º–µ—Ä: 50000*

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã
                """

                await update.message.reply_text(message, parse_mode='Markdown')

            elif expense_data['step'] == 'amount':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
                try:
                    amount = float(text.replace(' ', '').replace(',', ''))
                    if amount <= 0:
                        raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")

                    expense_data['amount'] = amount
                    expense_data['step'] = 'date'

                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    today = datetime.now().strftime("%d.%m.%Y")

                    message = f"""
‚ûï **–ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥**

**–®–∞–≥ 3/5:** –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–∞—Å—Ö–æ–¥–∞

üìÖ *–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì*

üìù *–ù–∞–ø—Ä–∏–º–µ—Ä: {today}*

üí° *–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "—Å–µ–≥–æ–¥–Ω—è"*

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã
                    """

                    await update.message.reply_text(message, parse_mode='Markdown')

                except ValueError:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).\n\n"
                        "üí∞ *–ù–∞–ø—Ä–∏–º–µ—Ä: 50000*",
                        parse_mode='Markdown'
                    )

            elif expense_data['step'] == 'date':
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É
                try:
                    if text.lower() in ['—Å–µ–≥–æ–¥–Ω—è', 'today']:
                        date_obj = datetime.now()
                    else:
                        date_obj = datetime.strptime(text, "%d.%m.%Y")

                    expense_data['date'] = date_obj.strftime("%Y-%m-%d")
                    expense_data['step'] = 'project'

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
                    await self.show_project_selection(update, context)

                except ValueError:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
                        "üìÖ *–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å–µ–≥–æ–¥–Ω—è'*",
                        parse_mode='Markdown'
                    )

            elif expense_data['step'] == 'description':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥
                expense_data['description'] = text
                await self.create_expense(update, context)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_expense_text_input: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def show_project_selection(self, update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            projects = self.get_projects()

            keyboard = []
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É"
            keyboard.append([InlineKeyboardButton("‚ùå –ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É", callback_data="project_none")])

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ 2 –≤ —Ä—è–¥
            for i in range(0, len(projects), 2):
                row = []
                for j in range(2):
                    if i + j < len(projects):
                        project = projects[i + j]
                        row.append(InlineKeyboardButton(
                            f"üìÅ {project['name'][:20]}{'...' if len(project['name']) > 20 else ''}",
                            callback_data=f"project_{project['id']}"
                        ))
                keyboard.append(row)

            keyboard.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="my_expenses")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            message = """
‚ûï **–ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥**

**–®–∞–≥ 4/5:** –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç

üìÅ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ä–∞—Å—Ö–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É"*
            """

            await update.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_project_selection: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤.")

    async def handle_project_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            if 'expense_creation' not in context.user_data:
                await query.answer("–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            expense_data = context.user_data['expense_creation']

            if query.data == "project_none":
                expense_data['project_id'] = None
                project_name = "–ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É"
            else:
                project_id = int(query.data.replace("project_", ""))
                expense_data['project_id'] = project_id

                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
                projects = self.get_projects()
                project_name = next((p['name'] for p in projects if p['id'] == project_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")

            expense_data['step'] = 'description'

            message = f"""
‚ûï **–ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥**

**–®–∞–≥ 5/5:** –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

üìù **–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {expense_data['name']}
‚Ä¢ –°—É–º–º–∞: {expense_data['amount']:,.0f} —Å—É–º
‚Ä¢ –î–∞—Ç–∞: {expense_data['date']}
‚Ä¢ –ü—Ä–æ–µ–∫—Ç: {project_name}

üí¨ *–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞—Å—Ö–æ–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"*
            """

            keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_project_selection: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞.")

    async def handle_skip_description(self, query, context):
        """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"""
        try:
            expense_data = context.user_data['expense_creation']
            expense_data['description'] = ''
            await self.create_expense_from_callback(query, context)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_skip_description: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    async def create_expense(self, update, context):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            expense_data = context.user_data['expense_creation']
            user = update.effective_user
            db_user = self.bot.get_user_by_telegram_id(user.id, user.username)

            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success = self.save_expense_to_db(
                user_id=db_user['id'],
                name=expense_data['name'],
                amount=expense_data['amount'],
                date=expense_data['date'],
                project_id=expense_data['project_id'],
                description=expense_data['description']
            )

            if success:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                project_name = "–ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É"
                if expense_data['project_id']:
                    projects = self.get_projects()
                    project_name = next((p['name'] for p in projects if p['id'] == expense_data['project_id']), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")

                message = f"""
‚úÖ **–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**

üìù **–î–µ—Ç–∞–ª–∏:**
‚Ä¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {expense_data['name']}
‚Ä¢ –°—É–º–º–∞: {expense_data['amount']:,.0f} —Å—É–º
‚Ä¢ –î–∞—Ç–∞: {expense_data['date']}
‚Ä¢ –ü—Ä–æ–µ–∫—Ç: {project_name}
{f"‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {expense_data['description']}" if expense_data['description'] else ""}

üí∞ –†–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ—Ç—á–µ—Ç–∞—Ö.
                """

                keyboard = [
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞—Å—Ö–æ–¥", callback_data="add_expense")],
                    [InlineKeyboardButton("üìã –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã", callback_data="view_expenses")],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Ö–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
            context.user_data.pop('expense_creation', None)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ create_expense: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞.")


    def get_projects(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        conn = self.bot.get_db_connection()
        if not conn:
            return []

        try:
            cursor = conn.execute("SELECT id, name FROM projects ORDER BY name")
            projects = [dict(row) for row in cursor.fetchall()]
            conn.close()
            return projects
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            conn.close()
            return []

    def save_expense_to_db(self, user_id, name, amount, date, project_id=None, description=None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        conn = self.bot.get_db_connection()
        if not conn:
            return False

        try:
            conn.execute("""
                INSERT INTO employee_expenses (
                    user_id, name, amount, date, project_id, description, created_at
                ) VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                user_id, name, float(amount), date, project_id, description, datetime.now()
            ))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: {e}")
            conn.close()
            return False

    def get_user_expenses_by_period(self, user_id, start_date):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        conn = self.bot.get_db_connection()
        if not conn:
            return []

        try:
            cursor = conn.execute("""
                SELECT
                    ee.id, ee.name, ee.amount, ee.date, ee.description,
                    p.name as project_name
                FROM employee_expenses ee
                LEFT JOIN projects p ON ee.project_id = p.id
                WHERE ee.user_id = ?
                AND ee.created_at >= ?
                ORDER BY ee.created_at DESC
            """, (user_id, start_date))

            expenses = [dict(row) for row in cursor.fetchall()]
            conn.close()
            return expenses
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
            conn.close()
            return []