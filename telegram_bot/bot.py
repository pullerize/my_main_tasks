#!/usr/bin/env python3

"""
8Bit Task Management System - Telegram Bot
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
"""

import os
import sys
import platform
import asyncio
import logging
import sqlite3
import subprocess
import atexit
import threading
from datetime import datetime
from typing import Optional, List, Dict, Any

# –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
try:
    import fcntl  # Unix/Linux
    HAS_FCNTL = True
except ImportError:
    HAS_FCNTL = False
    try:
        import msvcrt  # Windows
        HAS_MSVCRT = True
    except ImportError:
        HAS_MSVCRT = False

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
try:
    import nest_asyncio
    nest_asyncio.apply()
except ImportError:
    os.system(f"{sys.executable} -m pip install nest_asyncio --break-system-packages")
    import nest_asyncio
    nest_asyncio.apply()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.constants import UpdateType
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
from admin_task_handlers import AdminTaskHandlers
from user_task_handlers import UserTaskHandlers
from expense_handlers import ExpenseHandlers

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv(os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env'))
except ImportError:
    os.system(f"{sys.executable} -m pip install python-dotenv --break-system-packages")
    from dotenv import load_dotenv
    load_dotenv(os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env'))

BOT_TOKEN = os.getenv('BOT_TOKEN')
DATABASE_PATH = os.getenv('SQLITE_PATH', os.path.join(os.path.dirname(os.path.dirname(__file__)), 'shared_database.db'))
API_BASE_URL = 'http://127.0.0.1:8000'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è httpx –∏ telegram (—É–±–∏—Ä–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –ª–æ–≥–æ–≤)
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)

# –°–æ–∑–¥–∞—ë–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ 409 Conflict –≤ –ª–æ–≥–∞—Ö
class ConflictErrorFilter(logging.Filter):
    def filter(self, record):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ 409 Conflict - –æ–Ω–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
        return '409' not in record.getMessage() and 'Conflict' not in record.getMessage()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ telegram.ext.Updater
updater_logger = logging.getLogger('telegram.ext.Updater')
updater_logger.addFilter(ConflictErrorFilter())

# –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if platform.system() == 'Windows':
    LOCK_FILE = os.path.join(os.environ.get('TEMP', ''), 'telegram_bot.lock')
else:
    LOCK_FILE = '/tmp/telegram_bot.lock'

lock_file_handle = None

def acquire_lock():
    """–ü–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ)"""
    global lock_file_handle

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if os.path.exists(LOCK_FILE):
        try:
            with open(LOCK_FILE, 'r') as f:
                pid = f.read().strip()
                if pid.isdigit():
                    # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —Ç–∞–∫–∏–º PID
                    if is_process_running(int(pid)):
                        return False
                    else:
                        # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π lock —Ñ–∞–π–ª
                        os.remove(LOCK_FILE)
        except (IOError, OSError, ValueError):
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            try:
                os.remove(LOCK_FILE)
            except:
                pass

    try:
        # –°–æ–∑–¥–∞–µ–º lock —Ñ–∞–π–ª
        lock_file_handle = open(LOCK_FILE, 'w')

        if HAS_FCNTL:  # Unix/Linux
            import fcntl
            fcntl.flock(lock_file_handle.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
        elif HAS_MSVCRT:  # Windows
            import msvcrt
            # –ù–∞ Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞
            msvcrt.locking(lock_file_handle.fileno(), msvcrt.LK_NBLCK, 1)

        lock_file_handle.write(str(os.getpid()))
        lock_file_handle.flush()

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        atexit.register(release_lock)
        return True

    except (IOError, OSError):
        if lock_file_handle:
            try:
                lock_file_handle.close()
            except:
                pass
            lock_file_handle = None
        return False

def is_process_running(pid):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å –¥–∞–Ω–Ω—ã–º PID"""
    try:
        if platform.system() == 'Windows':
            import subprocess
            try:
                result = subprocess.run(['tasklist', '/FI', f'PID eq {pid}'],
                                      capture_output=True, text=True, check=False)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –≤—ã–≤–æ–¥–µ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞—à–∏–º PID –∏ python
                lines = result.stdout.strip().split('\n')
                for line in lines:
                    if str(pid) in line and ('python' in line.lower() or 'bot.py' in line.lower()):
                        return True
                return False
            except (subprocess.CalledProcessError, Exception):
                return False
        else:
            os.kill(pid, 0)  # –ù–µ —É–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            return True
    except (OSError, ProcessLookupError):
        return False

def release_lock():
    """–û—Å–≤–æ–±–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É"""
    global lock_file_handle
    try:
        if lock_file_handle:
            if HAS_FCNTL:
                import fcntl
                fcntl.flock(lock_file_handle.fileno(), fcntl.LOCK_UN)
            elif HAS_MSVCRT:
                import msvcrt
                msvcrt.locking(lock_file_handle.fileno(), msvcrt.LK_UNLCK, 1)

            lock_file_handle.close()
            lock_file_handle = None

        if os.path.exists(LOCK_FILE):
            os.remove(LOCK_FILE)
    except (IOError, OSError):
        pass

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
# –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å —Ñ–ª–∞–≥–æ–º --force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
force_start = '--force' in sys.argv
if force_start:
    print("‚ö†Ô∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        if os.path.exists(LOCK_FILE):
            os.remove(LOCK_FILE)
    except:
        pass

if not acquire_lock():
    print("‚ùå –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
    print("üîÑ –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.")
    print("üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python bot.py --force")
    sys.exit(1)

class TelegramBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""

    def __init__(self, token: str):
        self.token = token
        self.app = None
        self.API_BASE_URL = API_BASE_URL  # –î–æ–±–∞–≤–ª—è–µ–º API_BASE_URL –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç

        # Connection pool –¥–ª—è SQLite (–æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
        self._connection_pool = []
        self._pool_size = 5
        self._pool_lock = threading.Lock()

        logger.info("‚úÖ Connection pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        self.admin_handlers = AdminTaskHandlers(self)
        self.user_task_handlers = UserTaskHandlers(self)
        self.expense_handlers = ExpenseHandlers(self)

    def _create_connection(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {DATABASE_PATH}")
            conn = sqlite3.connect(
                DATABASE_PATH,
                timeout=30.0,
                check_same_thread=False
            )
            conn.row_factory = sqlite3.Row
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return conn
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None

    def get_db_connection(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞"""
        with self._pool_lock:
            if self._connection_pool:
                conn = self._connection_pool.pop()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∏–∑–Ω—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                try:
                    conn.execute("SELECT 1")
                    return conn
                except:
                    # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ—Ä—Ç–≤–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                    return self._create_connection()
            else:
                # –ü—É–ª –ø—É—Å—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                return self._create_connection()

    def return_db_connection(self, conn):
        """–í–µ—Ä–Ω—É—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—É–ª"""
        if conn:
            with self._pool_lock:
                if len(self._connection_pool) < self._pool_size:
                    self._connection_pool.append(conn)
                else:
                    conn.close()

    def get_user_by_telegram_id(self, telegram_id: int, username: str = None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID –∏–ª–∏ username —á–µ—Ä–µ–∑ API"""
        try:
            import requests
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å SQLite –Ω–∞ Windows FS
            response = requests.get(
                f'{API_BASE_URL}/users/by-telegram/{telegram_id}',
                params={'username': username} if username else {},
                timeout=5
            )

            if response.status_code == 200:
                user_dict = response.json()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_dict.get('role') == 'inactive' or not user_dict.get('is_active', True):
                    return None
                return user_dict
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API: {e}")
            return None

    def get_user_tasks(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å in_progress)"""
        conn = self.get_db_connection()
        if not conn:
            return []

        try:
            cursor = conn.execute("""
                SELECT t.*
                FROM tasks t
                WHERE t.executor_id = ? AND t.status = 'in_progress'
                ORDER BY t.created_at DESC
                LIMIT 10
            """, (user_id,))
            tasks = [dict(row) for row in cursor.fetchall()]
            conn.close()
            return tasks
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
            conn.close()
            return []

    def get_user_in_progress_tasks(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –≤ —Ä–∞–±–æ—Ç—É (—Å—Ç–∞—Ç—É—Å in_progress)"""
        conn = self.get_db_connection()
        if not conn:
            return []

        try:
            cursor = conn.execute("""
                SELECT t.*
                FROM tasks t
                WHERE t.executor_id = ? AND t.status = 'in_progress'
                ORDER BY t.created_at DESC
                LIMIT 10
            """, (user_id,))
            tasks = [dict(row) for row in cursor.fetchall()]
            conn.close()
            return tasks
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ: {e}")
            conn.close()
            return []

    def get_user_projects(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏"""
        conn = self.get_db_connection()
        if not conn:
            return []

        try:
            cursor = conn.execute("""
                SELECT DISTINCT p.*
                FROM projects p
                INNER JOIN tasks t ON p.id = t.project_id
                WHERE t.executor_id = ? AND t.status = 'in_progress'
                ORDER BY p.created_at DESC
            """, (user_id,))
            projects = [dict(row) for row in cursor.fetchall()]
            conn.close()
            return projects
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            conn.close()
            return []

    def get_user_expenses(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self.get_db_connection()
        if not conn:
            return []

        try:
            cursor = conn.execute("""
                SELECT e.*, p.name as project_name
                FROM employee_expenses e
                LEFT JOIN projects p ON e.project_id = p.id
                WHERE e.employee_id = ?
                ORDER BY e.date DESC
                LIMIT 10
            """, (user_id,))
            expenses = [dict(row) for row in cursor.fetchall()]
            conn.close()
            return expenses
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
            conn.close()
            return []

    def require_auth(self, func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        async def wrapper(update: Update, context):
            user = update.effective_user
            db_user = self.get_user_by_telegram_id(user.id, user.username)

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not db_user:
                success, message, api_user = await self.try_auto_authorize(
                    user.id,
                    user.username,
                    user.first_name,
                    user.last_name
                )

                if success:
                    # –ü–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                    db_user = self.get_user_by_telegram_id(user.id, user.username)

            if not db_user:
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                keyboard = [
                    [InlineKeyboardButton("üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="authorize")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    "‚ùå **–î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç**\n\n"
                    "**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
                    "‚Ä¢ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ\n"
                    "‚Ä¢ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                    "‚Ä¢ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n"
                    f"**–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n"
                    f"‚Ä¢ Telegram ID: `{user.id}`\n"
                    f"‚Ä¢ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"‚Ä¢ –ò–º—è: {user.first_name} {user.last_name or ''}",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                return

            context.user_data['db_user'] = db_user
            return await func(update, context)
        return wrapper

    async def try_auto_authorize(self, user_id: int, username: str = None, first_name: str = None, last_name: str = None):
        """–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            import requests
            response = requests.post(f'{API_BASE_URL}/telegram/auto-auth', json={
                'telegram_id': user_id,
                'username': username,
                'first_name': first_name,
                'last_name': last_name
            }, timeout=5)

            if response.status_code == 200:
                data = response.json()
                return data.get('success', False), data.get('message', ''), data.get('user')
            else:
                return False, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É", None

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
    def init_task_creation(self, user_id: int):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        return {
            'user_id': user_id,
            'step': 'role_selection',  # role_selection -> user_selection -> project_selection -> task_type -> format (–¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤) -> deadline -> confirmation
            'role': None,
            'executor_id': None,
            'project': None,
            'task_type': None,
            'task_format': None,
            'title': None,
            'description': None,
            'deadline': None,
            'deadline_date': None,
            'deadline_time': None
        }

    def get_users_by_role(self, role: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏"""
        conn = self.get_db_connection()
        if not conn:
            return []

        try:
            cursor = conn.execute(
                "SELECT * FROM users WHERE role = ? AND is_active = 1",
                (role,)
            )
            users = [dict(row) for row in cursor.fetchall()]
            conn.close()
            return users
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏: {e}")
            conn.close()
            return []

    def get_all_projects(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        conn = self.get_db_connection()
        if not conn:
            return []

        try:
            cursor = conn.execute(
                "SELECT * FROM projects WHERE is_archived = 0 ORDER BY name"
            )
            projects = [dict(row) for row in cursor.fetchall()]
            conn.close()
            return projects
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            conn.close()
            return []

    async def get_task_types_from_api(self, role: str = None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –∏–∑ API"""
        try:
            import aiohttp
            url = f'{API_BASE_URL}/tasks/types'
            if role:
                url += f'?role={role}'

            timeout = aiohttp.ClientTimeout(total=5)  # –£–º–µ–Ω—å—à–∏–ª —Ç–∞–π–º–∞—É—Ç –¥–æ 5 —Å–µ–∫—É–Ω–¥
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        if role:
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏
                            return [(f"{item['icon']} {item['name']}", item['name']) for item in data]
                        else:
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã
                            return data
                    else:
                        # Fallback –∫ —Å—Ç–∞—Ä—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –ø—Ä–∏ –æ—à–∏–±–∫–µ API
                        return self.get_fallback_task_types(role)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –∏–∑ API: {e}")
            return self.get_fallback_task_types(role)

    async def get_task_formats_from_api(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∑–∞–¥–∞—á –∏–∑ API"""
        try:
            import aiohttp
            timeout = aiohttp.ClientTimeout(total=5)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(f'{API_BASE_URL}/tasks/formats') as response:
                    if response.status == 200:
                        data = await response.json()
                        return [(f"{item['icon']} {item['name']}", item['name']) for item in data]
                    else:
                        # Fallback –∫ —Å—Ç–∞—Ä—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –ø—Ä–∏ –æ—à–∏–±–∫–µ API
                        return self.get_fallback_task_formats()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∑–∞–¥–∞—á –∏–∑ API: {e}")
            return self.get_fallback_task_formats()

    def get_fallback_task_types(self, role: str = None):
        """Fallback —Ç–∏–ø—ã –∑–∞–¥–∞—á –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        task_types_map = {
            'designer': [
                ("üéûÔ∏è Motion", "Motion"),
                ("üñºÔ∏è –°—Ç–∞—Ç–∏–∫–∞", "–°—Ç–∞—Ç–∏–∫–∞"),
                ("üé¨ –í–∏–¥–µ–æ", "–í–∏–¥–µ–æ"),
                ("üñºÔ∏è –ö–∞—Ä—É—Å–µ–ª—å", "–ö–∞—Ä—É—Å–µ–ª—å"),
                ("üìå –î—Ä—É–≥–æ–µ", "–î—Ä—É–≥–æ–µ")
            ],
            'smm_manager': [
                ("üìù –ü—É–±–ª–∏–∫–∞—Ü–∏—è", "–ü—É–±–ª–∏–∫–∞—Ü–∏—è"),
                ("üìÖ –ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω", "–ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω"),
                ("üìä –û—Ç—á–µ—Ç", "–û—Ç—á–µ—Ç"),
                ("üìπ –°—ä–µ–º–∫–∞", "–°—ä–µ–º–∫–∞"),
                ("ü§ù –í—Å—Ç—Ä–µ—á–∞", "–í—Å—Ç—Ä–µ—á–∞"),
                ("üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è"),
                ("üé§ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"),
                ("üóÇÔ∏è –ê–¥–º–∏–Ω –∑–∞–¥–∞—á–∏", "–ê–¥–º–∏–Ω –∑–∞–¥–∞—á–∏"),
                ("üîé –ê–Ω–∞–ª–∏–∑", "–ê–Ω–∞–ª–∏–∑"),
                ("üìã –ë—Ä–∏—Ñ–∏–Ω–≥", "–ë—Ä–∏—Ñ–∏–Ω–≥"),
                ("üìú –°—Ü–µ–Ω–∞—Ä–∏–π", "–°—Ü–µ–Ω–∞—Ä–∏–π"),
                ("üìå –î—Ä—É–≥–æ–µ", "–î—Ä—É–≥–æ–µ")
            ],
            'digital': [
                ("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã"),
                ("üìà –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"),
                ("üß™ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"),
                ("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"),
                ("üí∞ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π"),
                ("üìß Email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "Email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥"),
                ("üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞", "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞"),
                ("üéØ –¢–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞", "–¢–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞"),
                ("üîç SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"),
                ("üìä –í–µ–±-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "–í–µ–±-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞"),
                ("üìå –î—Ä—É–≥–æ–µ", "–î—Ä—É–≥–æ–µ")
            ]
        }

        if role:
            return task_types_map.get(role, [])

        # –°—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return [
            ("üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è", "creative"),
            ("üìù –ö–æ–Ω—Ç–µ–Ω—Ç", "content"),
            ("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è", "technical"),
            ("üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è", "analytics"),
            ("üìû –û–±—â–µ–Ω–∏–µ", "communication"),
            ("üé¨ –í–∏–¥–µ–æ", "video")
        ]

    def get_fallback_task_formats(self):
        """Fallback —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–¥–∞—á –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        return [
            ("üì± 9:16", "9:16"),
            ("üî≤ 1:1", "1:1"),
            ("üñºÔ∏è 4:5", "4:5"),
            ("üéûÔ∏è 16:9", "16:9"),
            ("üìå –î—Ä—É–≥–æ–µ", "–î—Ä—É–≥–æ–µ")
        ]

    def create_keyboard_3_per_row(self, buttons_data, back_button=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ 3 –≤ —Ä—è–¥"""
        keyboard = []
        row = []

        for button_text, callback_data in buttons_data:
            row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
            if len(row) == 3:
                keyboard.append(row)
                row = []

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if row:
            keyboard.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if back_button:
            keyboard.append([InlineKeyboardButton(back_button[0], callback_data=back_button[1])])

        return keyboard

    async def clear_chat_history(self, update: Update, context, limit: int = 50):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å–æ–æ–±—â–µ–Ω–∏–π)"""
        try:
            chat_id = update.effective_chat.id
            message_id = update.effective_message.message_id

            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
            for i in range(1, limit + 1):
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=message_id - i)
                except Exception:
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
                    pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")

    async def start_command(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        db_user = self.get_user_by_telegram_id(user.id, user.username)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not db_user:
            success, message, api_user = await self.try_auto_authorize(
                user.id,
                user.username,
                user.first_name,
                user.last_name
            )

            if success:
                # –ü–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                db_user = self.get_user_by_telegram_id(user.id, user.username)

        if db_user:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∂–∏ –¥–ª—è —Ä–æ–ª–∏
            role_emojis = {
                'designer': 'üé®',
                'smm_manager': 'üì±',
                'digital': 'üíª',
                'admin': 'üîë',
                'head_smm': 'üëë'
            }

            role_names = {
                'designer': '–î–∏–∑–∞–π–Ω–µ—Ä',
                'smm_manager': '–°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä',
                'digital': 'Digital',
                'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'head_smm': '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –°–ú–ú'
            }

            role_emoji = role_emojis.get(db_user['role'], 'üë§')
            role_name = role_names.get(db_user['role'], db_user['role'])

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                ["üí∞ –†–∞—Å—Ö–æ–¥—ã"],
                ["üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            access_status = "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if db_user['role'] != 'inactive' else "üî¥ –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"

            message = f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 8Bit Digital!


üë§ {db_user['name']} ‚Äî –Ω–∞—à üèÜ {role_name}

üîë –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {access_status}


–ì–æ—Ç–æ–≤—ã –≤–∑—è—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ —Ä–∞–±–æ—Ç—É?

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è"""

            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            return
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            keyboard = [
                [InlineKeyboardButton("üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="authorize")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            message = f"""
üéØ **–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ 8Bit**

‚ùå **–î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç**

**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
‚Ä¢ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ
‚Ä¢ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
‚Ä¢ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω

**–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
‚Ä¢ Telegram ID: `{user.id}`
‚Ä¢ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ò–º—è: {user.first_name} {user.last_name or ''}
            """

            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            return

    async def help_command(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã 8Bit**

**üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/tasks - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏
/projects - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã
/expenses - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:**
–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
2. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
3. –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã

**üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö
‚Ä¢ –£—á–µ—Ç –ª–∏—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

**üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def status_command(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            import requests
            response = requests.get(f'{API_BASE_URL}/health', timeout=5)
            backend_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if response.status_code == 200 else "‚ùå –û—à–∏–±–∫–∞"
        except:
            backend_status = "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = self.get_db_connection()
        db_status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if conn else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        if conn:
            conn.close()

        user = update.effective_user
        message = f"""
üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã 8Bit**

üîß **–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
‚Ä¢ Backend API: {backend_status}
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}
‚Ä¢ Telegram Bot: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç

üë§ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ ID: `{user.id}`
‚Ä¢ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üåê **–°—Å—ã–ª–∫–∏:**
‚Ä¢ API: {API_BASE_URL}
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_PATH}

‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%H:%M:%S')}
        """
        await update.message.reply_text(message, parse_mode='Markdown')

    @property
    def tasks_command(self):
        return self.require_auth(self._tasks_command)

    async def _tasks_command(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /tasks - –º–æ–∏ –∑–∞–¥–∞—á–∏"""
        db_user = context.user_data['db_user']
        tasks = self.get_user_tasks(db_user['id'])

        if not tasks:
            await update.message.reply_text(
                "üìã **–ú–æ–∏ –∑–∞–¥–∞—á–∏**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.",
                parse_mode='Markdown'
            )
            return

        message = "üìã **–ú–æ–∏ –∑–∞–¥–∞—á–∏**\n\n"
        for task in tasks:
            status_emoji = {
                'new': '‚è≥',
                'in_progress': 'üîÑ',
                'done': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(task['status'], '‚ùì')

            message += f"{status_emoji} **{task['title']}**\n"
            message += f"   –ü—Ä–æ–µ–∫—Ç: {task['project_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            message += f"   –°—Ç–∞—Ç—É—Å: {task['status']}\n"
            if task['deadline']:
                message += f"   –î–µ–¥–ª–∞–π–Ω: {task['deadline']}\n"
            message += "\n"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_tasks")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="task_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    @property
    def projects_command(self):
        return self.require_auth(self._projects_command)

    async def _projects_command(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /projects - –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã"""
        db_user = context.user_data['db_user']
        projects = self.get_user_projects(db_user['id'])

        if not projects:
            await update.message.reply_text(
                "üìÅ **–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.",
                parse_mode='Markdown'
            )
            return

        message = "üìÅ **–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã**\n\n"
        for project in projects:
            status_emoji = {
                'active': 'üü¢',
                'completed': '‚úÖ',
                'paused': '‚è∏Ô∏è',
                'cancelled': '‚ùå'
            }.get(project['status'], '‚ùì')

            message += f"{status_emoji} **{project['name']}**\n"
            if project['description']:
                message += f"   {project['description'][:100]}...\n" if len(project['description']) > 100 else f"   {project['description']}\n"
            message += f"   –°—Ç–∞—Ç—É—Å: {project['status']}\n"
            message += "\n"

        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_projects")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    @property
    def expenses_command(self):
        return self.require_auth(self._expenses_command)

    async def _expenses_command(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /expenses - –º–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã"""
        db_user = context.user_data['db_user']
        expenses = self.get_user_expenses(db_user['id'])

        if not expenses:
            await update.message.reply_text(
                "üí∞ **–ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö.",
                parse_mode='Markdown'
            )
            return

        message = "üí∞ **–ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã**\n\n"
        total = 0

        for expense in expenses:
            amount = float(expense['amount']) if expense['amount'] else 0
            total += amount

            message += f"üí≥ **{expense['description']}**\n"
            message += f"   –°—É–º–º–∞: {amount:.2f} ‚ÇΩ\n"
            message += f"   –î–∞—Ç–∞: {expense['date']}\n"
            if expense['project_name']:
                message += f"   –ü—Ä–æ–µ–∫—Ç: {expense['project_name']}\n"
            message += "\n"

        message += f"**–û–±—â–∞—è —Å—É–º–º–∞: {total:.2f} ‚ÇΩ**"

        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_expenses")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="expense_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_user_task_management(self, update, context):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        keyboard = [
            ["üìã –ü—Ä–∏–Ω—è—Ç—ã–µ –≤ —Ä–∞–±–æ—Ç—É", "üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏"],
            ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
            ["üí∞ –†–∞—Å—Ö–æ–¥—ã"],
                    ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏** üîß\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def show_user_in_progress_tasks(self, update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–Ω—è—Ç—ã–µ –≤ —Ä–∞–±–æ—Ç—É"""
        user = update.effective_user
        db_user = self.get_user_by_telegram_id(user.id, user.username)

        if not db_user:
            await update.message.reply_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        tasks = self.get_user_in_progress_tasks(db_user['id'])

        if not tasks:
            await update.message.reply_text(
                "üìã **–ü—Ä–∏–Ω—è—Ç—ã–µ –≤ —Ä–∞–±–æ—Ç—É**\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –ø—Ä–∏–Ω—è—Ç—ã—Ö –≤ —Ä–∞–±–æ—Ç—É.",
                parse_mode='Markdown'
            )
            return

        message = "üìã **–ü—Ä–∏–Ω—è—Ç—ã–µ –≤ —Ä–∞–±–æ—Ç—É**\n\n"
        for task in tasks:
            status_emoji = 'üîÑ'  # in_progress
            priority_emoji = 'üî•' if task.get('high_priority') else ''

            message += f"{status_emoji} **{task['title']}**{priority_emoji}\n"
            if task.get('description'):
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ 100 —Å–∏–º–≤–æ–ª–∞–º–∏
                desc = task['description'][:100] + "..." if len(task['description']) > 100 else task['description']
                message += f"   üìù {desc}\n"
            if task.get('project'):
                message += f"   üìÅ –ü—Ä–æ–µ–∫—Ç: {task['project']}\n"
            if task.get('deadline'):
                deadline = task['deadline']
                message += f"   ‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline}\n"
            message += "\n"

        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_in_progress_tasks")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_callback_query(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        if query.data == "authorize":
            await self.handle_authorize_button(query, context)
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        elif query.data == "admin_task_management":
            await self.admin_handlers.handle_admin_task_management(query, context)
        elif query.data == "my_tasks":
            await self._tasks_command(query, context)
        elif query.data == "create_task":
            await self.handle_create_task_start_from_callback(query, context)
        elif query.data == "my_projects":
            await self._projects_command(query, context)
        elif query.data == "my_expenses":
            await self.expense_handlers.handle_expenses_menu(query, context)
        elif query.data == "add_expense":
            await self.expense_handlers.handle_add_expense_start(query, context)
        elif query.data == "view_expenses":
            await self.expense_handlers.handle_view_expenses_periods(query, context)
        elif query.data.startswith("period_"):
            await self.expense_handlers.handle_period_selection(query, context)
        elif query.data.startswith("project_"):
            await self.expense_handlers.handle_project_selection(query, context)
        elif query.data == "skip_description":
            await self.expense_handlers.handle_skip_description(query, context)
        elif query.data == "user_task_management":
            await self.admin_handlers.handle_admin_task_management(query, context)
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∑–∞–¥–∞—á
        elif query.data.startswith("complete_task_"):
            task_id = query.data.replace("complete_task_", "")
            await self.handle_complete_task(query, context, task_id)
        elif query.data.startswith("delete_task_"):
            task_id = query.data.replace("delete_task_", "")
            await self.handle_delete_task(query, context, task_id)
        elif query.data == "reports":
            await self.handle_reports_menu(query, context)
        # –°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á —É–±—Ä–∞–Ω—ã - —Ç–µ–ø–µ—Ä—å –≤—Å—ë —á–µ—Ä–µ–∑ ReplyKeyboard
        # –°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        elif query.data == "refresh_tasks":
            await self._tasks_command(query, context)
        elif query.data == "refresh_in_progress_tasks":
            await self.show_user_in_progress_tasks(query, context)
        elif query.data == "refresh_projects":
            await self._projects_command(query, context)
        elif query.data == "refresh_expenses":
            await self._expenses_command(query, context)
        elif query.data == "task_stats":
            await self._task_statistics(query, context)
        elif query.data == "expense_stats":
            await self._expense_statistics(query, context)
        # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        elif query.data == "admin_create_task":
            await self.admin_handlers.handle_admin_create_task(query, context)
        elif query.data.startswith("select_role_"):
            await self.admin_handlers.handle_role_selection(query, context)
        elif query.data.startswith("executor_page_"):
            await self.admin_handlers.handle_executor_page(query, context)
        elif query.data.startswith("select_executor_"):
            await self.admin_handlers.handle_executor_selection(query, context)
        elif query.data.startswith("project_page_"):
            await self.admin_handlers.handle_project_page(query, context)
        elif query.data.startswith("select_project_") and 'admin_task_creation' in context.user_data:
            await self.admin_handlers.handle_project_selection(query, context)
        elif query.data.startswith("select_task_type_") and 'admin_task_creation' in context.user_data:
            await self.admin_handlers.handle_task_type_selection(query, context)
        elif query.data.startswith("select_format_"):
            await self.admin_handlers.handle_format_selection(query, context)
        elif query.data == "back_to_main":
            await self.handle_back_to_main(query, context)
        elif query.data.startswith("accept_task_"):
            task_id = query.data.replace("accept_task_", "")
            await self.handle_accept_task_callback(query, context, task_id)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data}")

    async def handle_reports_menu(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)"""
        try:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            message = """
üìä **–û—Ç—á–µ—Ç—ã**

üöß **–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**

–ó–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ:
‚Ä¢ –†–∞—Å—Ö–æ–¥–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º

‚ö†Ô∏è *–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è*
            """

            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_reports_menu: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_accept_task_callback(self, query, context, task_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ callback –∫–Ω–æ–ø–∫—É"""
        try:
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î
            conn = self.get_db_connection()
            if not conn:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                    parse_mode='Markdown'
                )
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            from datetime import datetime
            accepted_at = datetime.now().isoformat()

            cursor = conn.execute(
                "UPDATE tasks SET status = 'in_progress', accepted_at = ? WHERE id = ?",
                (accepted_at, task_id)
            )
            conn.commit()

            if cursor.rowcount > 0:
                conn.close()
                await query.edit_message_text(
                    f"‚úÖ **–ó–∞–¥–∞—á–∞ #{task_id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!**\n\n"
                    f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–í —Ä–∞–±–æ—Ç–µ'",
                    parse_mode='Markdown'
                )
            else:
                conn.close()
                await query.edit_message_text(
                    f"‚ùå –ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    parse_mode='Markdown'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏ #{task_id}: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏",
                parse_mode='Markdown'
            )

    async def handle_back_to_main(self, query, context):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = query.from_user
        db_user = self.get_user_by_telegram_id(user.id, user.username)

        if db_user:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            context.user_data.pop('admin_task_creation', None)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∂–∏ –¥–ª—è —Ä–æ–ª–∏
            role_emojis = {
                'designer': 'üé®',
                'smm_manager': 'üì±',
                'digital': 'üíª',
                'admin': 'üîë',
                'head_smm': 'üëë'
            }

            role_names = {
                'designer': '–î–∏–∑–∞–π–Ω–µ—Ä',
                'smm_manager': '–°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä',
                'digital': 'Digital',
                'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'head_smm': '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –°–ú–ú'
            }

            role_emoji = role_emojis.get(db_user['role'], 'üë§')
            role_name = role_names.get(db_user['role'], db_user['role'])

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                ["üí∞ –†–∞—Å—Ö–æ–¥—ã"],
                ["üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            access_status = "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if db_user['role'] != 'inactive' else "üî¥ –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"

            message = f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 8Bit Digital!


üë§ {db_user['name']} ‚Äî –Ω–∞—à üèÜ {role_name}

üîë –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {access_status}


–ì–æ—Ç–æ–≤—ã –≤–∑—è—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ —Ä–∞–±–æ—Ç—É?

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è"""

            await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)

    async def handle_authorize_button(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        user = query.from_user

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await query.edit_message_text("üîÑ **–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...**\n\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ...", parse_mode='Markdown')

        # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
        success, message, api_user = await self.try_auto_authorize(
            user.id,
            user.username,
            user.first_name,
            user.last_name
        )

        if success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏–ª—Å—è
            db_user = self.get_user_by_telegram_id(user.id, user.username)
            if db_user:
                await query.edit_message_text(
                    f"‚úÖ **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!**\n\n"
                    f"üë§ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {db_user['name']}!**\n"
                    f"üîπ –†–æ–ª—å: {db_user['role']}",
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text(
                    f"‚úÖ **{message}**\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –µ—â–µ —Ä–∞–∑.",
                    parse_mode='Markdown'
                )
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="authorize")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"‚ùå **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å**\n\n"
                f"**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
                f"‚Ä¢ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ\n"
                f"‚Ä¢ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                f"‚Ä¢ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
                f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {message}\n\n"
                f"**–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n"
                f"‚Ä¢ Telegram ID: `{user.id}`\n"
                f"‚Ä¢ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"‚Ä¢ –ò–º—è: {user.first_name} {user.last_name or ''}\n\n"
                f"üìû **–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞**",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
    async def handle_create_task_start_from_callback(self, query, context):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ callback (inline –∫–Ω–æ–ø–∫–∏)"""
        user = query.from_user

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        context.user_data['task_creation'] = self.init_task_creation(user.id)

        # –°–æ–∑–¥–∞–µ–º ReplyKeyboard —Å —Ä–æ–ª—è–º–∏
        role_buttons = ["üé® –î–∏–∑–∞–π–Ω–µ—Ä", "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä", ]
        reply_markup = self.create_reply_keyboard_3_per_row(role_buttons, "üîô –û—Ç–º–µ–Ω–∞")

        # –£–±–∏—Ä–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.edit_message_text(
            "üìã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**",
            parse_mode='Markdown'
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboard
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
                 "üë• **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_create_task_start(self, update, context):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
        user = update.effective_user

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        context.user_data['task_creation'] = self.init_task_creation(user.id)

        # –°–æ–∑–¥–∞–µ–º ReplyKeyboard —Å —Ä–æ–ª—è–º–∏
        role_buttons = ["üé® –î–∏–∑–∞–π–Ω–µ—Ä", "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä", ]
        reply_markup = self.create_reply_keyboard_3_per_row(role_buttons, "üîô –û—Ç–º–µ–Ω–∞")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboard
        await update.message.reply_text(
            "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            "üë• **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_user_selection_with_reply(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ReplyKeyboard"""
        task_data = context.user_data.get('task_creation', {})
        role = task_data.get('role', '')

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
        users = self.get_users_by_role(role)

        if not users:
            await update.message.reply_text(
                f"‚ùå **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é {role}**\n\n"
                "üîô **–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏**",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        task_data['available_users'] = users
        context.user_data['task_creation'] = task_data

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        user_buttons = [f"üë§ {user['name']}" for user in users]
        reply_markup = self.create_reply_keyboard_3_per_row(user_buttons, "üîô –ù–∞–∑–∞–¥")

        role_names = {
            'designer': '–î–∏–∑–∞–π–Ω–µ—Ä',
            'smm_manager': '–°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä',
            'digital': 'Digital'
        }

        await update.message.reply_text(
            f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            f"üèÜ **–†–æ–ª—å:** {role_names.get(role, role)}\n\n"
            "üë§ **–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_project_selection_with_reply(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å ReplyKeyboard"""
        task_data = context.user_data.get('task_creation', {})

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
        projects = self.get_all_projects()

        if not projects:
            await update.message.reply_text(
                "‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤**\n\n"
                "üîô **–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        task_data['available_projects'] = projects
        context.user_data['task_creation'] = task_data

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        project_buttons = [f"üìÅ {project['name']}" for project in projects]
        reply_markup = self.create_reply_keyboard_3_per_row(project_buttons, "üîô –ù–∞–∑–∞–¥")

        await update.message.reply_text(
            "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            "üìÅ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_user_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        executor_id = int(query.data.replace("select_user_", ""))

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        task_data = context.user_data.get('task_creation', {})
        task_data['executor_id'] = executor_id
        task_data['step'] = 'project_selection'
        context.user_data['task_creation'] = task_data

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
        projects = self.get_all_projects()

        if not projects:
            await query.edit_message_text(
                "‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤**\n\n"
                "üîô **–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_role_{task_data.get('role', '')}")
                ]])
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
        keyboard = []
        for i in range(0, len(projects), 2):
            row = []
            for j in range(2):
                if i + j < len(projects):
                    project = projects[i + j]
                    row.append(InlineKeyboardButton(
                        f"üìÅ {project['name']}",
                        callback_data=f"select_project_{project['id']}"
                    ))
            keyboard.append(row)

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_role_{task_data.get('role', '')}")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            "üìÅ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def _task_statistics(self, update, context):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º"""
        db_user = context.user_data['db_user']
        conn = self.get_db_connection()

        query = update.callback_query if hasattr(update, 'callback_query') and update.callback_query else None

        if not conn:
            if query:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        try:
            cursor = conn.execute("""
                SELECT status, COUNT(*) as count
                FROM tasks
                WHERE assigned_to = ?
                GROUP BY status
            """, (db_user['id'],))

            stats = dict(cursor.fetchall())
            conn.close()

            message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á**\n\n"
            for status, count in stats.items():
                emoji = {
                    'new': '‚è≥',
                    'in_progress': 'üîÑ',
                    'done': '‚úÖ',
                    'cancelled': '‚ùå'
                }.get(status, '‚ùì')
                message += f"{emoji} {status}: {count}\n"

            if query:
                await query.edit_message_text(message, parse_mode='Markdown')
            else:
                await update.message.reply_text(message, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á: {e}")
            if query:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def _expense_statistics(self, update, context):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º"""
        db_user = context.user_data['db_user']
        conn = self.get_db_connection()

        query = update.callback_query if hasattr(update, 'callback_query') and update.callback_query else None

        if not conn:
            if query:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        try:
            cursor = conn.execute("""
                SELECT
                    COUNT(*) as total_count,
                    SUM(amount) as total_amount,
                    AVG(amount) as avg_amount
                FROM employee_expenses
                WHERE employee_id = ?
            """, (db_user['id'],))

            stats = cursor.fetchone()
            conn.close()

            message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤**\n\n"
            message += f"üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_count']}\n"
            message += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']:.2f} ‚ÇΩ\n"
            message += f"üìà –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: {stats['avg_amount']:.2f} ‚ÇΩ\n"

            if query:
                await query.edit_message_text(message, parse_mode='Markdown')
            else:
                await update.message.reply_text(message, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
            if query:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def unknown_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        message = """
‚ùì **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/tasks - –ú–æ–∏ –∑–∞–¥–∞—á–∏
/projects - –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã
/expenses - –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/help - –°–ø—Ä–∞–≤–∫–∞

–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """
        await update.message.reply_text(message, parse_mode='Markdown')

    async def text_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è —Å–∞–º–æ–≥–æ —Å–µ–±—è)
        if update.message.from_user.is_bot:
            return

        text = update.message.text.strip()
        user = update.effective_user

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π)
        if text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" or text == "üîô –ù–∞–∑–∞–¥" or text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
            await self.start_command(update, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        if text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π":
            await self.clear_chat_history(update, context, limit=100)
            await update.message.reply_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.start_command(update, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if text == "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏":
            user = update.effective_user
            db_user = self.get_user_by_telegram_id(user.id, user.username)
            if not db_user:
                await update.message.reply_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            if db_user['role'] == 'admin':
                await self.admin_handlers.handle_admin_task_management(update, context)
            else:
                await self.user_task_handlers.handle_user_task_management(update, context)
            return

        elif text == "üí∞ –†–∞—Å—Ö–æ–¥—ã":
            user = update.effective_user
            db_user = self.get_user_by_telegram_id(user.id, user.username)
            if not db_user:
                await update.message.reply_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            await self.expense_handlers.handle_expenses_menu(update, context)
            return

        elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥":
            user = update.effective_user
            db_user = self.get_user_by_telegram_id(user.id, user.username)
            if not db_user:
                await update.message.reply_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            await self.expense_handlers.handle_add_expense_start(update, context)
            return

        elif text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã":
            user = update.effective_user
            db_user = self.get_user_by_telegram_id(user.id, user.username)
            if not db_user:
                await update.message.reply_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            await self.expense_handlers.handle_view_expenses_start(update, context)
            return

        elif text in ["üìÖ –Ø–Ω–≤–∞—Ä—å", "üìÖ –§–µ–≤—Ä–∞–ª—å", "üìÖ –ú–∞—Ä—Ç", "üìÖ –ê–ø—Ä–µ–ª—å", "üìÖ –ú–∞–π", "üìÖ –ò—é–Ω—å",
                      "üìÖ –ò—é–ª—å", "üìÖ –ê–≤–≥—É—Å—Ç", "üìÖ –°–µ–Ω—Ç—è–±—Ä—å", "üìÖ –û–∫—Ç—è–±—Ä—å", "üìÖ –ù–æ—è–±—Ä—å", "üìÖ –î–µ–∫–∞–±—Ä—å",
                      "üìÖ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", "üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", "üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", "üìÖ –ó–∞ –º–µ—Å—è—Ü"]:
            user = update.effective_user
            db_user = self.get_user_by_telegram_id(user.id, user.username)
            if not db_user:
                await update.message.reply_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç - –µ—Å–ª–∏ —ç—Ç–æ –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏, –ø–µ—Ä–µ–¥–∞–µ–º –≤ admin_handlers
            archived_data = context.user_data.get('archived_tasks_view')
            if archived_data and archived_data.get('step') == 'period_selection':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ admin_handlers
                if db_user['role'] == 'admin':
                    await self.admin_handlers.handle_archived_tasks_period_selection(update, context, text)
                    return

            # –ò–Ω–∞—á–µ —ç—Ç–æ —Ä–∞—Å—Ö–æ–¥—ã
            await self.expense_handlers.handle_period_selection_text(update, context, text)
            return

        elif text == "üìã –ü—Ä–∏–Ω—è—Ç—ã–µ –≤ —Ä–∞–±–æ—Ç—É":
            user = update.effective_user
            db_user = self.get_user_by_telegram_id(user.id, user.username)
            if not db_user:
                await update.message.reply_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            await self.show_user_in_progress_tasks(update, context)
            return

        elif text == "üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏":
            user = update.effective_user
            db_user = self.get_user_by_telegram_id(user.id, user.username)
            if not db_user:
                await update.message.reply_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            await self._tasks_command(update, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –∑–∞–¥–∞—á
        admin_task_data = context.user_data.get('admin_task_creation')
        if admin_task_data and text == "‚ùå –û—Ç–º–µ–Ω–∞":
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            context.user_data.pop('admin_task_creation', None)
            await self.start_command(update, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—ã–±–æ—Ä —à–∞–≥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if admin_task_data and admin_task_data.get('step') == 'edit_selection':
            if text.startswith("üë§ –†–æ–ª—å:"):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
                admin_task_data['step'] = 'role_selection'
                admin_task_data['return_to_preview'] = True
                context.user_data['admin_task_creation'] = admin_task_data
                await self.admin_handlers.handle_admin_create_task(update, context)
                return
            elif text.startswith("üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:"):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                admin_task_data['step'] = 'executor_selection'
                admin_task_data['return_to_preview'] = True
                context.user_data['admin_task_creation'] = admin_task_data
                role = admin_task_data.get('executor_role')
                await self.admin_handlers._process_role_selection(update, context, role, is_callback=False)
                return
            elif text.startswith("üìÅ –ü—Ä–æ–µ–∫—Ç:"):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
                admin_task_data['step'] = 'project_selection'
                admin_task_data['return_to_preview'] = True
                context.user_data['admin_task_creation'] = admin_task_data

                projects = await self.admin_handlers.get_all_projects()
                keyboard = []
                for project in projects:
                    keyboard.append([f"üìÅ {project['name']}"])
                keyboard.append(["üîô –ù–∞–∑–∞–¥"])
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

                await update.message.reply_text(
                    f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
                    f"üìÅ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:**",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                return
            elif text.startswith("üè∑Ô∏è –¢–∏–ø –∑–∞–¥–∞—á–∏:"):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
                admin_task_data['step'] = 'task_type_selection'
                admin_task_data['return_to_preview'] = True
                context.user_data['admin_task_creation'] = admin_task_data

                executor_role = admin_task_data.get('executor_role')
                task_types = await self.admin_handlers.get_task_types_by_role(executor_role)

                keyboard = []
                for task_type in task_types:
                    keyboard.append([task_type])
                keyboard.append(["üîô –ù–∞–∑–∞–¥"])
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

                await update.message.reply_text(
                    f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
                    f"üè∑Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:**",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                return
            elif text.startswith("üìê –§–æ—Ä–º–∞—Ç:"):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞
                admin_task_data['step'] = 'format_selection'
                admin_task_data['return_to_preview'] = True
                context.user_data['admin_task_creation'] = admin_task_data
                await self.admin_handlers.show_format_selection(update, context)
                return
            elif text.startswith("üìù –ù–∞–∑–≤–∞–Ω–∏–µ:"):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è
                admin_task_data['step'] = 'title_input'
                admin_task_data['return_to_preview'] = True
                context.user_data['admin_task_creation'] = admin_task_data

                keyboard = ReplyKeyboardMarkup(
                    [["‚ùå –û—Ç–º–µ–Ω–∞"]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )

                await update.message.reply_text(
                    "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
                    "üìù **–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:**\n\n"
                    "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
                return
            elif text.startswith("üìã –û–ø–∏—Å–∞–Ω–∏–µ:"):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
                admin_task_data['step'] = 'description_prompt'
                admin_task_data['return_to_preview'] = True
                context.user_data['admin_task_creation'] = admin_task_data
                await self.admin_handlers.handle_description_prompt(update, context)
                return
            elif text.startswith("‚è∞ –î–µ–¥–ª–∞–π–Ω:"):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–¥–ª–∞–π–Ω–∞
                admin_task_data['step'] = 'deadline_input'
                admin_task_data['return_to_preview'] = True
                context.user_data['admin_task_creation'] = admin_task_data
                await self.admin_handlers.handle_deadline_prompt(update, context)
                return
            elif text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
                admin_task_data['step'] = 'final_confirmation'
                context.user_data['admin_task_creation'] = admin_task_data
                await self.admin_handlers.show_task_preview(update, context)
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        active_tasks_data = context.user_data.get('active_tasks_view')
        if active_tasks_data and text == "üîô –ù–∞–∑–∞–¥":
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∞–¥–º–∏–Ω –º–µ–Ω—é
            context.user_data.pop('active_tasks_view', None)
            await self.admin_handlers.handle_admin_task_management(update, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–π –∑–∞–¥–∞—á–∏
        if admin_task_data and text == "üîô –ù–∞–∑–∞–¥":
            current_step = admin_task_data.get('step')

            if current_step == 'role_selection':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
                await self.admin_handlers.handle_admin_task_management(update, context)
                return
            elif current_step == 'executor_selection':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
                admin_task_data['step'] = 'role_selection'
                context.user_data['admin_task_creation'] = admin_task_data
                await self.admin_handlers.handle_admin_create_task(update, context)
                return
            elif current_step == 'project_selection':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                admin_task_data['step'] = 'role_selection'
                context.user_data['admin_task_creation'] = admin_task_data
                await self.admin_handlers.handle_admin_create_task(update, context)
                return
            elif current_step == 'task_type_selection':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
                admin_task_data['step'] = 'project_selection'
                context.user_data['admin_task_creation'] = admin_task_data
                executor_name = admin_task_data.get('executor_name', '')
                await self.admin_handlers.handle_executor_selection(update, context, executor_name)
                return
            elif current_step == 'format_selection':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
                admin_task_data['step'] = 'task_type_selection'
                context.user_data['admin_task_creation'] = admin_task_data
                project_name = admin_task_data.get('project_name', '')
                await self.admin_handlers.handle_project_selection(update, context, project_name)
                return
            elif current_step == 'title_input':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
                if admin_task_data.get('executor_role') == 'designer' and admin_task_data.get('format'):
                    # –î–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞
                    admin_task_data['step'] = 'format_selection'
                    context.user_data['admin_task_creation'] = admin_task_data
                    task_type_text = self.admin_handlers.get_task_type_name(admin_task_data.get('task_type', ''))
                    await self.admin_handlers.handle_task_type_selection(update, context, task_type_text)
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
                    admin_task_data['step'] = 'task_type_selection'
                    context.user_data['admin_task_creation'] = admin_task_data
                    project_name = admin_task_data.get('project_name', '')
                    await self.admin_handlers.handle_project_selection(update, context, project_name)
                return
            elif current_step == 'description_input':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è
                admin_task_data['step'] = 'title_input'
                context.user_data['admin_task_creation'] = admin_task_data
                await self.admin_handlers.start_title_input(update, context)
                return
            elif current_step == 'description_text_input':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
                admin_task_data['step'] = 'description_input'
                context.user_data['admin_task_creation'] = admin_task_data
                title = admin_task_data.get('title', '')
                await self.admin_handlers.handle_title_input(update, context, title)
                return
            elif current_step == 'deadline_input':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
                if admin_task_data.get('description'):
                    admin_task_data['step'] = 'description_text_input'
                    context.user_data['admin_task_creation'] = admin_task_data
                    await self.admin_handlers.handle_description_prompt(update, context)
                else:
                    admin_task_data['step'] = 'description_input'
                    context.user_data['admin_task_creation'] = admin_task_data
                    title = admin_task_data.get('title', '')
                    await self.admin_handlers.handle_title_input(update, context, title)
                return
            elif current_step == 'final_confirmation':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–¥–ª–∞–π–Ω–∞
                admin_task_data['step'] = 'deadline_input'
                context.user_data['admin_task_creation'] = admin_task_data
                await self.admin_handlers.handle_deadline_prompt(update, context)
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–π –∑–∞–¥–∞—á–∏
        if admin_task_data and admin_task_data.get('step') == 'role_selection':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏
            role_buttons = ["üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä", "üé® –î–∏–∑–∞–π–Ω–µ—Ä", ]
            if text in role_buttons:
                await self.admin_handlers.handle_role_selection_text(update, context)
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–π –∑–∞–¥–∞—á–∏
        if admin_task_data and admin_task_data.get('step') == 'executor_selection':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä–æ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            if text.startswith("üë§ ") and text != "üë§":
                await self.admin_handlers.handle_executor_selection_text(update, context)
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–π –∑–∞–¥–∞—á–∏
        if admin_task_data and admin_task_data.get('step') == 'project_selection':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞
            if text.startswith("üìÅ ") and text != "üìÅ":
                await self.admin_handlers.handle_project_selection_text(update, context)
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–π –∑–∞–¥–∞—á–∏
        if admin_task_data and admin_task_data.get('step') == 'task_type_selection':
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ API
            executor_role = admin_task_data.get('executor_role')
            available_task_types = await self.admin_handlers.get_task_types_by_role(executor_role)
            if text in available_task_types:
                await self.admin_handlers.handle_task_type_selection_text(update, context)
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–π –∑–∞–¥–∞—á–∏ (–¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤)
        if admin_task_data and admin_task_data.get('step') == 'format_selection':
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ API
            try:
                formats_data = await self.get_task_formats_from_api()
                if formats_data:
                    available_formats = [display_name for display_name, internal_name in formats_data]
                else:
                    available_formats = ["üì± 9:16", "‚¨ú 1:1", "üìê 4:5", "üì∫ 16:9", "üîÑ –î—Ä—É–≥–æ–µ"]
            except Exception:
                available_formats = ["üì± 9:16", "‚¨ú 1:1", "üìê 4:5", "üì∫ 16:9", "üîÑ –î—Ä—É–≥–æ–µ"]

            if text in available_formats:
                await self.admin_handlers.handle_format_selection_text(update, context)
                return

        if admin_task_data and admin_task_data.get('step') == 'title_input':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            await self.admin_handlers.handle_title_input(update, context, text)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        if 'expense_creation' in context.user_data:
            expense_data = context.user_data['expense_creation']

            if text == "/cancel" or text == "‚ùå –û—Ç–º–µ–Ω–∞":
                context.user_data.pop('expense_creation', None)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await self.start_command(update, context)
                return

            if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
                # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥
                current_step = expense_data.get('step')
                if current_step == 'amount':
                    expense_data['step'] = 'name'
                    await self.expense_handlers.handle_add_expense_start(update, context)
                elif current_step == 'project':
                    expense_data['step'] = 'amount'
                    keyboard = [
                        ["‚óÄÔ∏è –ù–∞–∑–∞–¥", "‚ùå –û—Ç–º–µ–Ω–∞"]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
                    message = f"""‚ûï **–ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥**

**–®–∞–≥ 2/5:** –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞

üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Å—É–º–∞—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)

üìù –ù–∞–ø—Ä–∏–º–µ—Ä: 50000"""
                    await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
                elif current_step == 'description':
                    expense_data['step'] = 'project'
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–Ω–æ–≤–æ
                    await self.expense_handlers.show_project_selection(update, context)
                elif current_step == 'date':
                    expense_data['step'] = 'description'
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                    projects = self.expense_handlers.get_projects()
                    project_name = "–ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É"
                    if expense_data.get('project_id'):
                        project = next((p for p in projects if p['id'] == expense_data['project_id']), None)
                        if project:
                            project_name = project['name']

                    keyboard = [
                        ["‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
                        ["‚óÄÔ∏è –ù–∞–∑–∞–¥", "‚ùå –û—Ç–º–µ–Ω–∞"]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
                    message = f"""‚ûï **–ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥**

**–®–∞–≥ 4/5:** –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

üìù **–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {expense_data['name']}
‚Ä¢ –°—É–º–º–∞: {expense_data['amount']:,.0f} —Å—É–º
‚Ä¢ –ü—Ä–æ–µ–∫—Ç: {project_name}

üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞—Å—Ö–æ–¥—É"""
                    await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
                return

            await self.expense_handlers.handle_expense_text_input(update, context)
            return

        if admin_task_data and admin_task_data.get('step') == 'description_input':
            if text == "üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ":
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
                await self.admin_handlers.handle_description_prompt(update, context)
                return
            elif text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–µ–¥–ª–∞–π–Ω—É
                await self.admin_handlers.handle_deadline_prompt(update, context)
                return
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
                await update.message.reply_text(
                    "‚ö†Ô∏è **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞**\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ:\n"
                    "‚Ä¢ **üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ** - —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n"
                    "‚Ä¢ **‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å** - —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥\n"
                    "‚Ä¢ **‚ùå –û—Ç–º–µ–Ω–∞** - —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                    parse_mode='Markdown'
                )
                return

        if admin_task_data and admin_task_data.get('step') == 'description_text_input':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
            await self.admin_handlers.handle_description_input(update, context, text)
            return

        if admin_task_data and admin_task_data.get('step') == 'deadline_input':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –¥–µ–¥–ª–∞–π–Ω–∞
            await self.admin_handlers.handle_deadline_input(update, context, text)
            return

        if admin_task_data and admin_task_data.get('step') == 'final_confirmation':
            if text == "‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É":
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                await self.admin_handlers.create_task(update, context)
                return
            elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
                await self.admin_handlers.handle_edit_task(update, context)
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∑–∞–¥–∞—á
        if text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É":
            user = update.effective_user
            db_user = self.get_user_by_telegram_id(user.id, user.username)
            if db_user and db_user['role'] == 'admin':
                await self.admin_handlers.handle_admin_create_task(update, context)
            elif db_user and db_user['role'] in ['smm_manager', 'designer']:
                await self.user_task_handlers.handle_user_create_task(update, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏" –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏":
            user = update.effective_user
            db_user = self.get_user_by_telegram_id(user.id, user.username)
            if db_user and db_user['role'] in ['smm_manager', 'designer']:
                await self.user_task_handlers.handle_active_tasks(update, context)
                return
            # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ admin_handlers

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏" –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if text == "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏":
            user = update.effective_user
            db_user = self.get_user_by_telegram_id(user.id, user.username)
            if db_user and db_user['role'] in ['smm_manager', 'designer']:
                await self.user_task_handlers.handle_completed_tasks(update, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –≤ —Ä–∞–±–æ—Ç—É" –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if text == "üÜï –ù–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –≤ —Ä–∞–±–æ—Ç—É":
            await self.admin_handlers.handle_new_tasks_start(update, context)
            return

        elif text in ["üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä", "üé® –î–∏–∑–∞–π–Ω–µ—Ä", ]:

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ user_task_creation –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_task_data = context.user_data.get('user_task_creation')
            if user_task_data and user_task_data.get('step') == 'role_selection':
                await self.user_task_handlers.handle_role_selection_text(update, context)
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            active_tasks_data = context.user_data.get('active_tasks_view')
            archived_tasks_data = context.user_data.get('archived_tasks_view')

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            if archived_tasks_data and archived_tasks_data.get('step') == 'role_selection':
                await self.admin_handlers.handle_archived_tasks_role_selection(update, context, text)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            if active_tasks_data and active_tasks_data.get('step') == 'role_selection':
                await self.admin_handlers.handle_active_tasks_role_selection(update, context, text)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–¥–∞—á
            # –≠—Ç–æ—Ç –±–ª–æ–∫ –¥—É–±–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã—à–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∞—Ö 1574-1580, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö
        elif admin_task_data and admin_task_data.get('step') == 'executor_selection':
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –∏–º—è
            users = await self.admin_handlers.get_users_by_role(admin_task_data.get('executor_role'))
            for user in users:
                display_name = user['name']
                if display_name == text:
                    await self.admin_handlers.handle_executor_selection(update, context, text)
                    return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö
        elif admin_task_data and admin_task_data.get('step') == 'project_selection':
            projects = await self.admin_handlers.get_all_projects()
            for project in projects:
                if project['name'] == text:
                    await self.admin_handlers.handle_project_selection(update, context, text)
                    return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö
        elif admin_task_data and admin_task_data.get('step') == 'task_type_selection':
            task_types = self.admin_handlers.get_task_types_by_role(admin_task_data['executor_role'])
            for type_name, type_key in task_types:
                if type_name == text:
                    await self.admin_handlers.handle_task_type_selection(update, context, text)
                    return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö (–¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤)
        elif admin_task_data and admin_task_data.get('step') == 'format_selection':
            formats = self.admin_handlers.get_formats_for_designer()
            for format_name, format_key in formats:
                if format_name == text:
                    await self.admin_handlers.handle_format_selection(update, context, text)
                    return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏)
        user = update.effective_user
        db_user = self.get_user_by_telegram_id(user.id, user.username)
        if db_user:
            logger.debug(f"User found: {db_user.get('name')}, role: {db_user.get('role')}")

        if db_user and db_user['role'] == 'admin':
            # –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–µ
            result = await self.admin_handlers.handle_admin_message(update, context, text)
            if result:
                return  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            else:
                logger.debug("Admin message not handled by admin_handlers")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if db_user and db_user['role'] in ['smm_manager', 'designer']:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É" –∏ "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
            if text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É":
                await self.user_task_handlers.handle_complete_task(update, context)
                return
            elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
                await self.user_task_handlers.handle_delete_task(update, context)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∑–∞–¥–∞—á–∏
            if context.user_data.get('awaiting_task_id'):
                handled = await self.user_task_handlers.handle_task_id_input(update, context)
                if handled:
                    return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±—ã—á–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            user_task_data = context.user_data.get('user_task_creation')
            if user_task_data:
                step = user_task_data.get('step')

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
                if text == "‚ùå –û—Ç–º–µ–Ω–∞":
                    context.user_data.pop('user_task_creation', None)
                    await self.user_task_handlers.handle_user_task_management(update, context)
                    return

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
                if step == 'role_selection':
                    await self.user_task_handlers.handle_role_selection_text(update, context)
                    return
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                elif step == 'executor_selection':
                    await self.user_task_handlers.handle_executor_selection_text(update, context)
                    return
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                elif step == 'title':
                    await self.user_task_handlers.handle_task_title(update, context)
                    return
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                elif step == 'description':
                    await self.user_task_handlers.handle_task_description(update, context)
                    return
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
                elif step == 'project':
                    await self.user_task_handlers.handle_task_project(update, context)
                    return
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
                elif step == 'task_type':
                    await self.user_task_handlers.handle_task_type(update, context)
                    return
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (–¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤)
                elif step == 'format_selection':
                    await self.user_task_handlers.handle_task_format(update, context)
                    return
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞
                elif step == 'deadline':
                    await self.user_task_handlers.handle_task_deadline(update, context)
                    return
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                elif step == 'final_confirmation':
                    await self.user_task_handlers.handle_task_confirmation(update, context)
                    return
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                elif step == 'edit_selection':
                    await self.user_task_handlers.handle_edit_selection(update, context)
                    return

        # –ö–Ω–æ–ø–∫–∞ "–ê—Ä—Ö–∏–≤ –∑–∞–¥–∞—á" –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ admin_handlers

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
        if text == "üîô –û—Ç–º–µ–Ω–∞":
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            context.user_data.pop('task_creation', None)
            await update.message.reply_text(
                "‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ**",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        task_data = context.user_data.get('task_creation')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
        if text in ["üé® –î–∏–∑–∞–π–Ω–µ—Ä", "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä", ]:
            if not task_data:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                user = update.effective_user
                task_data = self.init_task_creation(user.id)
                context.user_data['task_creation'] = task_data

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
            role_map = {
                "üé® –î–∏–∑–∞–π–Ω–µ—Ä": "designer",
                "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä": "smm_manager"
            }
            role = role_map[text]
            task_data['role'] = role
            task_data['step'] = 'user_selection'
            context.user_data['task_creation'] = task_data

            await self.handle_user_selection_with_reply(update, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if task_data and text.startswith("üë§ ") and task_data.get('step') == 'user_selection':
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_name = text.replace("üë§ ", "")
            available_users = task_data.get('available_users', [])
            selected_user = None

            for user in available_users:
                if user['name'] == user_name:
                    selected_user = user
                    break

            if selected_user:
                task_data['executor_id'] = selected_user['id']
                task_data['step'] = 'project_selection'
                context.user_data['task_creation'] = task_data
                await self.handle_project_selection_with_reply(update, context)
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
        if task_data and text.startswith("üìÅ ") and task_data.get('step') == 'project_selection':
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
            project_name = text.replace("üìÅ ", "")
            available_projects = task_data.get('available_projects', [])
            selected_project = None

            for project in available_projects:
                if project['name'] == project_name:
                    selected_project = project
                    break

            if selected_project:
                task_data['project'] = selected_project['name']
                task_data['project_id'] = selected_project['id']
                task_data['step'] = 'task_type_selection'
                context.user_data['task_creation'] = task_data
                await self.handle_task_type_selection_with_reply(update, context)
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        if task_data and task_data.get('step') == 'task_type_selection':
            available_task_types = task_data.get('available_task_types', [])
            selected_task_type = None

            # –ù–∞–π–¥–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏
            for task_type in available_task_types:
                if task_type[0] == text:  # task_type[0] - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –∏–∫–æ–Ω–∫–æ–π
                    selected_task_type = task_type[1]  # task_type[1] - —ç—Ç–æ –∫–ª—é—á
                    break

            if selected_task_type:
                task_data['task_type'] = selected_task_type
                context.user_data['task_creation'] = task_data

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤)
                if task_data.get('role') == 'designer':
                    task_data['step'] = 'format_selection'
                    context.user_data['task_creation'] = task_data
                    await self.handle_format_selection_with_reply(update, context)
                else:
                    # –î–ª—è –Ω–µ-–¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è
                    task_data['step'] = 'awaiting_title_input'
                    context.user_data['task_creation'] = task_data
                    await self.handle_task_details_input_with_reply(update, context)
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤)
        if task_data and task_data.get('step') == 'format_selection':
            available_formats = task_data.get('available_formats', [])
            selected_format = None

            # –ù–∞–π–¥–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            for format_item in available_formats:
                if format_item[0] == text:  # format_item[0] - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –∏–∫–æ–Ω–∫–æ–π
                    selected_format = format_item[1]  # format_item[1] - —ç—Ç–æ –∫–ª—é—á
                    break

            if selected_format:
                task_data['task_format'] = selected_format
                task_data['step'] = 'awaiting_title_input'
                context.user_data['task_creation'] = task_data
                await self.handle_task_details_input_with_reply(update, context)
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ –ø—Ä–µ–≤—å—é –∑–∞–¥–∞—á–∏
        if task_data and task_data.get('step') == 'task_preview':
            preview_options = task_data.get('preview_options', [])
            if text in preview_options:
                if text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω":
                    await self.handle_set_deadline(update, context)
                    return
                elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è
                    task_data['step'] = 'awaiting_title_input'
                    context.user_data['task_creation'] = task_data
                    await self.handle_task_details_input_with_reply(update, context)
                    return
                elif text in ["üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"]:
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
                    await self.handle_description_input(update, context)
                    return
                elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
                    # –û—Ç–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                    context.user_data.pop('task_creation', None)
                    await update.message.reply_text(
                        "‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
                        "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É!",
                        parse_mode='Markdown',
                        reply_markup=ReplyKeyboardRemove()
                    )
                    return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞
        if task_data and task_data.get('step') == 'deadline_selection':
            deadline_options = task_data.get('deadline_options', [])
            if text in deadline_options:
                if text == "üîô –ù–∞–∑–∞–¥":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–≤—å—é –∑–∞–¥–∞—á–∏
                    await self.handle_task_preview(update, context)
                    return
                else:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞
                    await self.handle_quick_deadline_selection(update, context, text)
                    return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if task_data and task_data.get('step') == 'final_confirmation':
            confirmation_options = task_data.get('confirmation_options', [])
            if text in confirmation_options:
                if text == "‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É":
                    await self.handle_confirm_task_final(update, context)
                    return
                elif text == "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω":
                    await self.handle_set_deadline(update, context)
                    return
                elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–≤—å—é –∑–∞–¥–∞—á–∏
                    await self.handle_task_preview(update, context)
                    return
                elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
                    # –û—Ç–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                    context.user_data.pop('task_creation', None)
                    await update.message.reply_text(
                        "‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
                        "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É!",
                        parse_mode='Markdown',
                        reply_markup=ReplyKeyboardRemove()
                    )
                    return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if text == "üîô –ù–∞–∑–∞–¥" and task_data:
            step = task_data.get('step')
            if step == 'user_selection':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
                role_buttons = ["üé® –î–∏–∑–∞–π–Ω–µ—Ä", "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä", ]
                reply_markup = self.create_reply_keyboard_3_per_row(role_buttons, "üîô –û—Ç–º–µ–Ω–∞")
                await update.message.reply_text(
                    "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
                    "üë• **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:**",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                task_data['step'] = 'role_selection'
                context.user_data['task_creation'] = task_data
                return
            elif step == 'project_selection':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self.handle_user_selection_with_reply(update, context)
                return
            elif step == 'task_type_selection':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
                await self.handle_project_selection_with_reply(update, context)
                return
            elif step == 'format_selection':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
                await self.handle_task_type_selection_with_reply(update, context)
                return
            elif step == 'deadline_selection':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–≤—å—é –∑–∞–¥–∞—á–∏
                await self.handle_task_preview(update, context)
                return
            elif step == 'final_confirmation':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–¥–ª–∞–π–Ω–∞
                await self.handle_set_deadline(update, context)
                return

        if task_data:
            step = task_data.get('step')

            if step == 'awaiting_title_input':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                task_data['title'] = update.message.text.strip()
                context.user_data['task_creation'] = task_data

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
                await self.handle_description_input(update, context)
                return

            elif step == 'awaiting_description_input':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                task_data['description'] = update.message.text.strip()
                context.user_data['task_creation'] = task_data

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∏–ª–∏ –∫ preview –∑–∞–¥–∞—á–∏
                await self.handle_task_preview(update, context)
                return

            elif step == 'awaiting_deadline_input':
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –¥–µ–¥–ª–∞–π–Ω–∞
                await self.handle_deadline_text_input(update, context)
                return

        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
        user = update.effective_user
        db_user = self.get_user_by_telegram_id(user.id, user.username)
        if db_user and db_user['role'] == 'admin':
            handled = await self.admin_handlers.handle_text_messages_for_admin(update, context)
            if handled:
                return

        # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –ø—Ä–æ—Ü–µ—Å—Å—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∞–º –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        pass

    async def error_handler(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        error_message = str(context.error)

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã 409 - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        if "409" in error_message or "Conflict" in error_message:
            return  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–∏ –æ—à–∏–±–∫–∏, –æ–Ω–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä—å—ë–∑–Ω—ã–µ –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("status", self.status_command))

        # –ö–æ–º–∞–Ω–¥—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        self.app.add_handler(CommandHandler("tasks", self.tasks_command))
        self.app.add_handler(CommandHandler("projects", self.projects_command))
        self.app.add_handler(CommandHandler("expenses", self.expenses_command))
        self.app.add_handler(CommandHandler("task", self.handle_create_task_start))
        self.app.add_handler(CommandHandler("skip", self.skip_command))

        # Callback –∫–Ω–æ–ø–∫–∏
        self.app.add_handler(CallbackQueryHandler(self.handle_callback_query))

        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.app.add_handler(MessageHandler(filters.COMMAND, self.unknown_command))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.text_message))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.app.add_error_handler(self.error_handler)

        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á

    async def handle_project_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        project_id = int(query.data.replace("select_project_", ""))

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –±–∞–∑—ã
        conn = self.get_db_connection()
        if not conn:
            await query.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        cursor = conn.execute("SELECT name FROM projects WHERE id = ?", (project_id,))
        project = cursor.fetchone()
        conn.close()

        if not project:
            await query.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        task_data = context.user_data.get('task_creation', {})
        task_data['project'] = project['name']
        task_data['step'] = 'task_type_selection'
        context.user_data['task_creation'] = task_data

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á –∏–∑ API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        role = task_data.get('role')
        task_types = await self.get_task_types_from_api(role)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
        buttons_data = [(type_name, f"select_task_type_{type_key}") for type_name, type_key in task_types]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ 3 –≤ —Ä—è–¥
        keyboard = self.create_keyboard_3_per_row(
            buttons_data,
            back_button=("üîô –ù–∞–∑–∞–¥", f"select_user_{task_data['executor_id']}")
        )
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {project['name']}\n\n"
            "üè∑Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_task_type_selection_with_reply(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ —Å ReplyKeyboard"""
        task_data = context.user_data.get('task_creation', {})
        role = task_data.get('role', '')

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á –∏–∑ API
        task_types = await self.get_task_types_from_api(role)

        if not task_types:
            await update.message.reply_text(
                "‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á**",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        task_data['available_task_types'] = task_types
        context.user_data['task_creation'] = task_data

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞—á (—É–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
        type_buttons = [task_type[0] for task_type in task_types]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å –∏–∫–æ–Ω–∫–∞–º–∏
        reply_markup = self.create_reply_keyboard_3_per_row(type_buttons, "üîô –ù–∞–∑–∞–¥")

        await update.message.reply_text(
            "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            "üè∑Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_format_selection_with_reply(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ —Å ReplyKeyboard"""
        task_data = context.user_data.get('task_creation', {})

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–¥–∞—á –∏–∑ API
        formats = await self.get_task_formats_from_api()

        if not formats:
            await update.message.reply_text(
                "‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤**",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        task_data['available_formats'] = formats
        context.user_data['task_creation'] = task_data

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        format_buttons = [format_item[0] for format_item in formats]  # –ë–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å –∏–∫–æ–Ω–∫–∞–º–∏
        reply_markup = self.create_reply_keyboard_3_per_row(format_buttons, "üîô –ù–∞–∑–∞–¥")

        type_names = {
            'creative': '–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è',
            'content': '–ö–æ–Ω—Ç–µ–Ω—Ç',
            'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è',
            'analytics': '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è',
            'communication': '–û–±—â–µ–Ω–∏–µ',
            'video': '–í–∏–¥–µ–æ'
        }

        task_type = task_data.get('task_type', '')
        await update.message.reply_text(
            "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            f"üè∑Ô∏è **–¢–∏–ø:** {type_names.get(task_type, task_type)}\n\n"
            "üé® **–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_task_details_input_with_reply(self, update, context):
        """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å ReplyKeyboard"""
        task_data = context.user_data.get('task_creation', {})

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        message = self.get_task_summary_message(task_data)
        message += "\nüìù **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:**"

        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove()
        )

    async def handle_task_type_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
        task_type = query.data.replace("select_task_type_", "")

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        task_data = context.user_data.get('task_creation', {})
        task_data['task_type'] = task_type

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤)
        if task_data.get('role') == 'designer':
            task_data['step'] = 'format_selection'
            context.user_data['task_creation'] = task_data

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–¥–∞—á –∏–∑ API
            formats = await self.get_task_formats_from_api()

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∑–∞–¥–∞—á
            buttons_data = [(format_name, f"select_format_{format_key}") for format_name, format_key in formats]

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ 3 –≤ —Ä—è–¥
            keyboard = self.create_keyboard_3_per_row(
                buttons_data,
                back_button=("üîô –ù–∞–∑–∞–¥", f"select_project_{task_data.get('project_id', 1)}")
            )
            reply_markup = InlineKeyboardMarkup(keyboard)

            type_names = {
                'creative': '–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è',
                'content': '–ö–æ–Ω—Ç–µ–Ω—Ç',
                'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è',
                'analytics': '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è',
                'communication': '–û–±—â–µ–Ω–∏–µ',
                'video': '–í–∏–¥–µ–æ'
            }

            await query.edit_message_text(
                "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
                f"üè∑Ô∏è **–¢–∏–ø:** {type_names.get(task_type, task_type)}\n\n"
                "üé® **–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞:**",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            # –î–ª—è –Ω–µ-–¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è
            task_data['step'] = 'awaiting_title_input'
            context.user_data['task_creation'] = task_data
            await self.handle_task_details_input(query, context)

    async def handle_format_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤)"""
        task_format = query.data.replace("select_format_", "")

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        task_data = context.user_data.get('task_creation', {})
        task_data['task_format'] = task_format
        task_data['step'] = 'awaiting_title_input'
        context.user_data['task_creation'] = task_data

        await self.handle_task_details_input(query, context)

    async def handle_task_details_input(self, query, context):
        """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        task_data = context.user_data.get('task_creation', {})

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        message = self.get_task_summary_message(task_data)
        message += "\nüìù **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:**"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons_data = []
        back_callback = self.get_previous_step_callback(task_data)

        keyboard = self.create_keyboard_3_per_row(
            buttons_data,
            back_button=("üîô –ù–∞–∑–∞–¥", back_callback)
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        task_data['step'] = 'awaiting_title_input'
        context.user_data['task_creation'] = task_data

    async def handle_description_input(self, update, context):
        """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        task_data = context.user_data.get('task_creation', {})

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        message = self.get_task_summary_message(task_data)
        message += f"\nüìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        message += "üìù **–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):**"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons_data = [
            ("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_description"),
        ]

        keyboard = self.create_keyboard_3_per_row(
            buttons_data,
            back_button=("üîô –ù–∞–∑–∞–¥", "edit_title")
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        task_data['step'] = 'awaiting_description_input'
        context.user_data['task_creation'] = task_data

    def get_task_summary_message(self, task_data):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–¥–∞—á–∏"""
        role_names = {
            'designer': '–î–∏–∑–∞–π–Ω–µ—Ä',
            'smm_manager': '–°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä',
            'digital': 'Digital'
        }

        message = "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
        message += f"üë§ **–†–æ–ª—å:** {role_names.get(task_data.get('role', ''), task_data.get('role', ''))}\n"
        message += f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {task_data.get('project', '')}\n"
        message += f"üè∑Ô∏è **–¢–∏–ø:** {task_data.get('task_type', '')}\n"

        if task_data.get('task_format'):
            message += f"üé® **–§–æ—Ä–º–∞—Ç:** {task_data.get('task_format', '')}\n"

        return message

    def get_previous_step_callback(self, task_data):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞"""
        if task_data.get('task_format'):
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç, –∑–Ω–∞—á–∏—Ç –º—ã –æ—Ç –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞
            return f"select_task_type_{task_data.get('task_type', '')}"
        elif task_data.get('task_type'):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            return f"select_project_{task_data.get('project_id', 1)}"
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
            return f"select_user_{task_data.get('executor_id', '')}"

    async def handle_cancel_task(self, query, context):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        context.user_data.pop('task_creation', None)

        await query.edit_message_text(
            "‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
            "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É!",
            parse_mode='Markdown'
        )

    async def handle_complete_task(self, query, context, task_id):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        user = query.from_user
        db_user = self.get_user_by_telegram_id(user.id, user.username)

        if not db_user:
            await query.edit_message_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            conn = self.get_db_connection()
            if not conn:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return

            cursor = conn.execute("SELECT title, executor_id FROM tasks WHERE id = ?", (task_id,))
            task = cursor.fetchone()

            if not task:
                await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–∞–¥–º–∏–Ω –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–¥–∞—á–∏)
            if db_user['role'] != 'admin' and task['executor_id'] != db_user['id']:
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ "completed"
            conn.execute("""
                UPDATE tasks
                SET status = 'done', finished_at = datetime('now')
                WHERE id = ?
            """, (task_id,))
            conn.commit()

            await query.edit_message_text(
                f"‚úÖ **–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"üìù **{task['title']}**\n"
                f"üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
                parse_mode='Markdown'
            )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
        finally:
            if conn:
                conn.close()

    async def handle_delete_task(self, query, context, task_id):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        user = query.from_user
        db_user = self.get_user_by_telegram_id(user.id, user.username)

        if not db_user:
            await query.edit_message_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            conn = self.get_db_connection()
            if not conn:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return

            cursor = conn.execute("SELECT title, executor_id FROM tasks WHERE id = ?", (task_id,))
            task = cursor.fetchone()

            if not task:
                await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–∞–¥–º–∏–Ω –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–¥–∞—á–∏)
            if db_user['role'] != 'admin' and task['executor_id'] != db_user['id']:
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏")
                return

            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
            conn.execute("DELETE FROM tasks WHERE id = ?", (task_id,))
            conn.commit()

            await query.edit_message_text(
                f"üóëÔ∏è **–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞**\n\n"
                f"üìù **{task['title']}**\n"
                f"‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
                parse_mode='Markdown'
            )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
        finally:
            if conn:
                conn.close()

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üéØ 8Bit Task Management System - Telegram Bot", flush=True)
        print("=" * 50, flush=True)
        print(f"üñ•Ô∏è  –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()}", flush=True)
        print(f"üêç Python: {sys.version}", flush=True)
        print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_PATH}", flush=True)
        print(f"üåê API: {API_BASE_URL}", flush=True)
        print(flush=True)

        if not BOT_TOKEN:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ", flush=True)
            print("–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω: BOT_TOKEN=your_token", flush=True)
            return

        print(f"‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(BOT_TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤)", flush=True)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = self.get_db_connection()
        if conn:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞", flush=True)
            conn.close()
        else:
            print("‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", flush=True)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
        try:
            import requests
            response = requests.get(f'{API_BASE_URL}/health', timeout=3)
            print("‚úÖ Backend API –¥–æ—Å—Ç—É–ø–µ–Ω" if response.status_code == 200 else "‚ö†Ô∏è  Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", flush=True)
        except:
            print("‚ö†Ô∏è  Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", flush=True)

        print(flush=True)
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...", flush=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = Application.builder().token(self.token).build()

        print("üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...", flush=True)
        self.setup_handlers()

        print("‚úÖ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", flush=True)

        # –û—á–∏—â–∞–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
        try:
            from telegram import Bot
            bot = Bot(token=self.token)
            await bot.delete_webhook(drop_pending_updates=True)
            print("üîÑ Webhook –æ—á–∏—â–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ polling", flush=True)
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å webhook: {e}", flush=True)

        print("üîó –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start", flush=True)
        print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", flush=True)
        print(flush=True)

        try:
            # –ó–∞–ø—É—Å–∫ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            await self.app.run_polling(
                drop_pending_updates=True,
                allowed_updates=list(UpdateType),
                poll_interval=1.0,
                timeout=30
            )
        except Exception as e:
            error_msg = str(e)
            if "Conflict" in error_msg and "getUpdates" in error_msg:
                print("‚ùå –û—à–∏–±–∫–∞: –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
                print("üîÑ –ó–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                print("üí° –°–æ–≤–µ—Ç: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∫–æ–º–∞–Ω–¥–æ–π: ps aux | grep python")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
            release_lock()  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

    # ============ TASK CREATION HANDLER METHODS ============

    def create_keyboard_3_per_row(self, buttons_data, back_button=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ 3 –≤ —Ä—è–¥"""
        keyboard = []
        row = []

        for button_text, callback_data in buttons_data:
            row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
            if len(row) == 3:
                keyboard.append(row)
                row = []

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—ã–π —Ä—è–¥ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∫–Ω–æ–ø–∫–∏
        if row:
            keyboard.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if back_button:
            keyboard.append([InlineKeyboardButton(back_button[0], callback_data=back_button[1])])

        return keyboard

    def create_reply_keyboard_3_per_row(self, buttons_data, back_button_text=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ ReplyKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ 3 –≤ —Ä—è–¥"""
        keyboard = []
        row = []

        for button_text in buttons_data:
            row.append(KeyboardButton(button_text))
            if len(row) == 3:
                keyboard.append(row)
                row = []

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—ã–π —Ä—è–¥ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∫–Ω–æ–ø–∫–∏
        if row:
            keyboard.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if back_button_text:
            keyboard.append([KeyboardButton(back_button_text)])

        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    def get_task_summary_message(self, task_data):
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–¥–∞—á–∏"""
        role_names = {
            'designer': '–î–∏–∑–∞–π–Ω–µ—Ä',
            'smm_manager': '–°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä',
            'digital': 'Digital'
        }

        type_names = {
            'creative': '–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è',
            'content': '–ö–æ–Ω—Ç–µ–Ω—Ç',
            'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è',
            'analytics': '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è',
            'communication': '–û–±—â–µ–Ω–∏–µ',
            'video': '–í–∏–¥–µ–æ'
        }

        format_names = {
            'static': '–°—Ç–∞—Ç–∏–∫–∞',
            'video': '–í–∏–¥–µ–æ',
            'stories': 'Stories',
            'carousel': '–ö–∞—Ä—É—Å–µ–ª—å',
            'presentation': '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è',
            'illustration': '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è'
        }

        message = "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
        message += f"üë§ **–†–æ–ª—å:** {role_names.get(task_data.get('role', ''), task_data.get('role', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'))}\n"

        if task_data.get('project'):
            message += f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {task_data['project']}\n"

        if task_data.get('task_type'):
            message += f"üè∑Ô∏è **–¢–∏–ø:** {type_names.get(task_data['task_type'], task_data['task_type'])}\n"

        if task_data.get('task_format'):
            message += f"üé® **–§–æ—Ä–º–∞—Ç:** {format_names.get(task_data['task_format'], task_data['task_format'])}\n"

        return message

    def get_previous_step_callback(self, task_data):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥"""
        step = task_data.get('step', '')

        if step == 'user_selection':
            return "create_task"
        elif step == 'project_selection':
            return f"select_role_{task_data.get('role', '')}"
        elif step == 'task_type_selection':
            return f"select_user_{task_data.get('executor_id', '')}"
        elif step == 'format_selection':
            return f"select_project_{task_data.get('project_id', '')}"
        elif step == 'awaiting_title_input':
            if task_data.get('role') == 'designer' and task_data.get('task_format'):
                return f"select_format_{task_data.get('task_format', '')}"
            else:
                return f"select_task_type_{task_data.get('task_type', '')}"
        elif step == 'awaiting_description_input':
            return "edit_title"
        else:
            return "cancel_task"

    async def handle_description_input(self, update, context):
        """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        task_data = context.user_data.get('task_creation', {})

        message = self.get_task_summary_message(task_data)
        message += f"\nüìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        message += "üìù **–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):**"

        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_title")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        task_data['step'] = 'awaiting_description_input'
        context.user_data['task_creation'] = task_data

    async def handle_skip_description(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
        task_data = context.user_data.get('task_creation', {})
        task_data['description'] = ''
        task_data['step'] = 'task_preview'
        context.user_data['task_creation'] = task_data

        await self.handle_task_preview(query, context)

    async def handle_edit_title(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è"""
        task_data = context.user_data.get('task_creation', {})

        message = self.get_task_summary_message(task_data)
        message += "\nüìù **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:**"

        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        task_data['step'] = 'awaiting_title_input'
        context.user_data['task_creation'] = task_data

    async def handle_task_preview(self, update, context):
        """–ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –¥–µ–¥–ª–∞–π–Ω–∞"""
        task_data = context.user_data.get('task_creation', {})

        message = self.get_task_summary_message(task_data)
        message += f"\nüìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"

        description = task_data.get('description', '')
        if description:
            message += f"\nüìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}"
        else:
            message += "\nüìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** –ù–µ —É–∫–∞–∑–∞–Ω–æ"

        message += "\n\n‚úÖ **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–¥–ª–∞–π–Ω–∞:**"

        # –°–æ–∑–¥–∞–µ–º ReplyKeyboard —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        button_options = ["‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"]
        if not description:
            button_options.append("üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
        else:
            button_options.append("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")

        reply_markup = self.create_reply_keyboard_3_per_row(button_options, "‚ùå –û—Ç–º–µ–Ω–∞")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ text_message
        task_data['preview_options'] = button_options + ["‚ùå –û—Ç–º–µ–Ω–∞"]
        task_data['step'] = 'task_preview'
        context.user_data['task_creation'] = task_data

        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_deadline_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞"""
        from datetime import datetime, timedelta

        task_data = context.user_data.get('task_creation', {})
        deadline_data = query.data.replace("deadline_", "")

        now = datetime.now()

        if deadline_data == "today_18":
            deadline = now.replace(hour=18, minute=0, second=0, microsecond=0)
            if deadline < now:
                deadline += timedelta(days=1)
        elif deadline_data == "tomorrow_12":
            deadline = (now + timedelta(days=1)).replace(hour=12, minute=0, second=0, microsecond=0)
        elif deadline_data == "3days_18":
            deadline = (now + timedelta(days=3)).replace(hour=18, minute=0, second=0, microsecond=0)
        elif deadline_data == "week_12":
            deadline = (now + timedelta(days=7)).replace(hour=12, minute=0, second=0, microsecond=0)
        else:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–¥–ª–∞–π–Ω–∞")
            return

        task_data['deadline'] = deadline.strftime('%d.%m.%Y %H:%M')
        context.user_data['task_creation'] = task_data

        await self.handle_final_confirmation(query, context)

    async def handle_deadline_text_input(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        from datetime import datetime

        task_data = context.user_data.get('task_creation', {})
        deadline_text = update.message.text.strip()

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú
            deadline = datetime.strptime(deadline_text, '%d.%m.%Y %H:%M')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –≤ –±—É–¥—É—â–µ–º
            if deadline < datetime.now():
                await update.message.reply_text(
                    "‚ùå **–û—à–∏–±–∫–∞:** –î–µ–¥–ª–∞–π–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`",
                    parse_mode='Markdown'
                )
                return

            task_data['deadline'] = deadline_text
            task_data['step'] = 'final_confirmation'
            context.user_data['task_creation'] = task_data

            await self.handle_final_confirmation(update, context)

        except ValueError:
            await update.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n"
                "**–ü—Ä–∏–º–µ—Ä:** `25.12.2024 15:30`",
                parse_mode='Markdown'
            )

    async def handle_final_confirmation(self, update, context):
        """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        task_data = context.user_data.get('task_creation', {})

        message = "‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏**\n\n"
        message += self.get_task_summary_message(task_data).replace("‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n", "")
        message += f"\nüìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"

        description = task_data.get('description', '')
        if description:
            message += f"\nüìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}"

        message += f"\n‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {task_data.get('deadline', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}"
        message += "\n\n**–í—Å—ë –≤–µ—Ä–Ω–æ? –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É?**"

        # –°–æ–∑–¥–∞–µ–º ReplyKeyboard —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_options = [
            "‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É",
            "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω",
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
        ]

        reply_markup = self.create_reply_keyboard_3_per_row(confirmation_options, "‚ùå –û—Ç–º–µ–Ω–∞")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ text_message
        task_data['confirmation_options'] = confirmation_options + ["‚ùå –û—Ç–º–µ–Ω–∞"]
        task_data['step'] = 'final_confirmation'
        context.user_data['task_creation'] = task_data

        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def skip_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /skip"""
        task_data = context.user_data.get('task_creation')
        if task_data and task_data.get('step') == 'awaiting_description_input':
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            task_data['description'] = ''
            task_data['step'] = 'task_preview'
            context.user_data['task_creation'] = task_data

            await self.handle_task_preview(update, context)
        else:
            await update.message.reply_text(
                "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"
            )

    async def handle_set_deadline(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–¥–ª–∞–π–Ω–∞"""
        message = (
            "‚è∞ **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n\n"
            "**–ü—Ä–∏–º–µ—Ä:** `25.12.2024 15:30`\n\n"
            "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"
        )

        # –°–æ–∑–¥–∞–µ–º ReplyKeyboard —Å –±—ã—Å—Ç—Ä—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞
        deadline_options = [
            "üìÖ –°–µ–≥–æ–¥–Ω—è 18:00",
            "üìÖ –ó–∞–≤—Ç—Ä–∞ 12:00",
            "üìÖ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è 18:00",
            "üìÖ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é 12:00"
        ]

        reply_markup = self.create_reply_keyboard_3_per_row(deadline_options, "üîô –ù–∞–∑–∞–¥")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ text_message
        task_data = context.user_data.get('task_creation', {})
        task_data['deadline_options'] = deadline_options + ["üîô –ù–∞–∑–∞–¥"]
        task_data['step'] = 'deadline_selection'
        context.user_data['task_creation'] = task_data

        await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)

    async def handle_confirm_task(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        task_data = context.user_data.get('task_creation', {})

        if not task_data:
            await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success = await self.create_task_in_database(task_data)

            if success:
                await query.edit_message_text(
                    "‚úÖ **–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
                    f"üìã **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {task_data.get('project', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {task_data.get('deadline', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}\n\n"
                    "–ó–∞–¥–∞—á–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.",
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏**\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode='Markdown'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            await query.edit_message_text(
                "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='Markdown'
            )
        finally:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            context.user_data.pop('task_creation', None)

    async def handle_cancel_task(self, query, context):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        context.user_data.pop('task_creation', None)

        await query.edit_message_text(
            "‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
            "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É!",
            parse_mode='Markdown'
        )

    async def create_task_in_database(self, task_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import requests
            from datetime import datetime

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –∑–∞–¥–∞—á–∏
            author_user = self.get_user_by_telegram_id(task_data['user_id'], None)
            if not author_user:
                return False

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            payload = {
                'title': task_data.get('title', '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞'),
                'description': task_data.get('description', ''),
                'project': task_data.get('project', ''),
                'task_type': task_data.get('task_type', ''),
                'task_format': task_data.get('task_format', ''),
                'executor_id': task_data.get('executor_id'),
                'author_id': author_user['id'],
                'deadline': task_data.get('deadline')
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.post(
                f'{API_BASE_URL}/tasks/',
                json=payload,
                timeout=10
            )

            return response.status_code == 200

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ë–î: {e}")
            return False

    async def handle_quick_deadline_selection(self, update, context, deadline_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞"""
        from datetime import datetime, timedelta

        task_data = context.user_data.get('task_creation', {})
        now = datetime.now()

        if deadline_text == "üìÖ –°–µ–≥–æ–¥–Ω—è 18:00":
            deadline = now.replace(hour=18, minute=0, second=0, microsecond=0)
            if deadline < now:
                deadline += timedelta(days=1)
        elif deadline_text == "üìÖ –ó–∞–≤—Ç—Ä–∞ 12:00":
            deadline = (now + timedelta(days=1)).replace(hour=12, minute=0, second=0, microsecond=0)
        elif deadline_text == "üìÖ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è 18:00":
            deadline = (now + timedelta(days=3)).replace(hour=18, minute=0, second=0, microsecond=0)
        elif deadline_text == "üìÖ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é 12:00":
            deadline = (now + timedelta(days=7)).replace(hour=12, minute=0, second=0, microsecond=0)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–¥–ª–∞–π–Ω–∞",
                reply_markup=ReplyKeyboardRemove()
            )
            return

        task_data['deadline'] = deadline.strftime('%d.%m.%Y %H:%M')
        context.user_data['task_creation'] = task_data

        await self.handle_final_confirmation(update, context)

    async def handle_confirm_task_final(self, update, context):
        """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        task_data = context.user_data.get('task_creation', {})

        if not task_data:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=ReplyKeyboardRemove()
            )
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success = await self.create_task_in_database(task_data)

            if success:
                await update.message.reply_text(
                    "‚úÖ **–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
                    f"üìã **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {task_data.get('project', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {task_data.get('deadline', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}\n\n"
                    "–ó–∞–¥–∞—á–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.",
                    parse_mode='Markdown',
                    reply_markup=ReplyKeyboardRemove()
                )
            else:
                await update.message.reply_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏**\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode='Markdown',
                    reply_markup=ReplyKeyboardRemove()
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            await update.message.reply_text(
                "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
        finally:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            context.user_data.pop('task_creation', None)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TelegramBot(BOT_TOKEN)

    retry_count = 0
    max_retries = 3

    while retry_count < max_retries:
        try:
            await bot.run()
            break  # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...", flush=True)
            release_lock()
            break
        except Exception as e:
            if "409 Conflict" in str(e) or "Conflict" in str(e):
                retry_count += 1
                wait_time = retry_count * 15  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                print(f"\n‚ö†Ô∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries})", flush=True)
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...", flush=True)
                await asyncio.sleep(wait_time)

                if retry_count >= max_retries:
                    print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –í–æ–∑–º–æ–∂–Ω–æ, –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç.", flush=True)
                    print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ.", flush=True)
                    release_lock()
                    break
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}", flush=True)
                import traceback
                traceback.print_exc()
                release_lock()
                break

    release_lock()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞
    print("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", flush=True)

if __name__ == "__main__":
    asyncio.run(main())