#!/usr/bin/env python3

"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞
"""

import os
import sys
import psutil
import atexit
import signal
from pathlib import Path
from typing import Optional
from config import BotConfig, logger


class ProcessManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞"""

    def __init__(self):
        self.lock_file_path = BotConfig.get_lock_file_path()
        self.lock_file_handle: Optional[object] = None
        self.current_pid = os.getpid()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        atexit.register(self.release_lock)
        signal.signal(signal.SIGTERM, self._signal_handler)
        signal.signal(signal.SIGINT, self._signal_handler)

    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.release_lock()
        sys.exit(0)

    def is_process_running(self, pid: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å –¥–∞–Ω–Ω—ã–º PID"""
        try:
            return psutil.pid_exists(pid)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}: {e}")
            return False

    def acquire_lock(self) -> bool:
        """–ü–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π lock —Ñ–∞–π–ª
            if self.lock_file_path.exists():
                try:
                    with open(self.lock_file_path, 'r') as f:
                        old_pid = int(f.read().strip())

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å
                    if self.is_process_running(old_pid):
                        logger.warning(f"–î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {old_pid})")
                        return False
                    else:
                        # –°—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å –º–µ—Ä—Ç–≤, —É–¥–∞–ª—è–µ–º lock —Ñ–∞–π–ª
                        logger.info(f"–£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π lock —Ñ–∞–π–ª (PID: {old_pid})")
                        self.lock_file_path.unlink()

                except (ValueError, IOError) as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è lock —Ñ–∞–π–ª–∞: {e}, —É–¥–∞–ª—è–µ–º –µ–≥–æ")
                    try:
                        self.lock_file_path.unlink()
                    except:
                        pass

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π lock —Ñ–∞–π–ª
            self.lock_file_handle = open(self.lock_file_path, 'w')
            self.lock_file_handle.write(str(self.current_pid))
            self.lock_file_handle.flush()

            logger.info(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ (PID: {self.current_pid})")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False

    def release_lock(self):
        """–û—Å–≤–æ–±–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É"""
        try:
            if self.lock_file_handle:
                self.lock_file_handle.close()
                self.lock_file_handle = None

            if self.lock_file_path.exists():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ lock —Ñ–∞–π–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∞—à–µ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
                try:
                    with open(self.lock_file_path, 'r') as f:
                        file_pid = int(f.read().strip())

                    if file_pid == self.current_pid:
                        self.lock_file_path.unlink()
                        logger.info("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
                    else:
                        logger.warning(f"Lock —Ñ–∞–π–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É (PID: {file_pid})")

                except (ValueError, IOError) as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")

    def check_and_acquire_lock(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        if not self.acquire_lock():
            print("‚ùå –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            print("üîÑ –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.")

            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            try:
                if self.lock_file_path.exists():
                    with open(self.lock_file_path, 'r') as f:
                        running_pid = int(f.read().strip())

                    if self.is_process_running(running_pid):
                        try:
                            process = psutil.Process(running_pid)
                            print(f"üîç –ó–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: PID {running_pid}, –∫–æ–º–∞–Ω–¥–∞: {' '.join(process.cmdline())}")
                        except:
                            print(f"üîç –ó–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: PID {running_pid}")

            except Exception:
                pass

            return False

        return True

    def force_cleanup(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö lock —Ñ–∞–π–ª–æ–≤ (–¥–ª—è –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π)"""
        try:
            if self.lock_file_path.exists():
                self.lock_file_path.unlink()
                print("üßπ Lock —Ñ–∞–π–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
process_manager = ProcessManager()