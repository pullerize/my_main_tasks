"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (SMM –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –¥–∏–∑–∞–π–Ω–µ—Ä—ã)
"""

import sqlite3
import logging
import asyncio
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Optional
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from markdown_utils import escape_markdown

logger = logging.getLogger(__name__)

class UserTaskHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    def __init__(self, bot_instance):
        self.bot = bot_instance

    async def handle_user_task_management(self, update, context):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        keyboard = [
            ["‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"],
            ["üÜï –ù–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –≤ —Ä–∞–±–æ—Ç—É"],
            ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏** üìã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    def get_allowed_roles_for_user(self, user_role):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á–∏"""
        if user_role == 'smm_manager':
            return ['smm_manager', 'designer']
        elif user_role == 'designer':
            return ['designer', 'smm_manager']
        return []

    def get_role_display_name(self, role):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–æ–ª–∏"""
        role_names = {
            'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'smm_manager': '–°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä',
            'designer': '–î–∏–∑–∞–π–Ω–µ—Ä',
            'head_smm': '–ì–ª–∞–≤–Ω—ã–π –°–ú–ú'
        }
        return role_names.get(role, role)

    async def handle_user_create_task(self, update, context):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        user = update.message.from_user

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
        conn = self.bot.get_db_connection()
        if not conn:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
            return

        db_user = conn.execute(
            "SELECT * FROM users WHERE telegram_id = ?",
            (user.id,)
        ).fetchone()

        conn.close()

        if not db_user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        user_role = db_user['role']

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        context.user_data['user_task_creation'] = {
            'creator_id': user.id,
            'creator_role': user_role,
            'step': 'role_selection'
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏
        allowed_roles = self.get_allowed_roles_for_user(user_role)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ä–æ–ª—è–º–∏
        role_buttons = []
        role_mapping = {
            'smm_manager': "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä",
            'designer': "üé® –î–∏–∑–∞–π–Ω–µ—Ä"
        }

        for role in allowed_roles:
            if role in role_mapping:
                role_buttons.append(role_mapping[role])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
        keyboard = []
        for i in range(0, len(role_buttons), 2):
            row = role_buttons[i:i+2]
            keyboard.append(row)
        keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            "üë• **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_role_selection_text(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message_text = update.message.text

        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ —Å —Ä–æ–ª—è–º–∏
        role_mapping = {
            "üì± –°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä": "smm_manager",
            "üé® –î–∏–∑–∞–π–Ω–µ—Ä": "designer"
        }

        role = role_mapping.get(message_text)
        if not role:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–æ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç—É —Ä–æ–ª—å
        task_data = context.user_data.get('user_task_creation', {})
        creator_role = task_data.get('creator_role')
        allowed_roles = self.get_allowed_roles_for_user(creator_role)

        if role not in allowed_roles:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç—É —Ä–æ–ª—å.")
            return

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –≤—ã–±–æ—Ä–æ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        await self._process_role_selection(update, context, role)

    async def _process_role_selection(self, update, context, role):
        """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å
        context.user_data['user_task_creation']['selected_role'] = role
        context.user_data['user_task_creation']['step'] = 'executor_selection'

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
        conn = self.bot.get_db_connection()

        users = conn.execute(
            "SELECT id, name, telegram_id FROM users WHERE role = ? AND role != 'inactive' ORDER BY name",
            (role,)
        ).fetchall()

        conn.close()

        if not users:
            await update.message.reply_text(
                f"‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é {role}"
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
        keyboard = []
        for i in range(0, len(users), 2):
            row = []
            for user in users[i:i+2]:
                row.append(f"üë§ {user['name']}")
            keyboard.append(row)
        keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        role_names = {
            'smm_manager': '–°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä',
            'designer': '–î–∏–∑–∞–π–Ω–µ—Ä'
        }

        await update.message.reply_text(
            f"üë§ **–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è** ({role_names.get(role, role)}):",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_executor_selection_text(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message_text = update.message.text

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        if not message_text.startswith("üë§ "):
            return

        executor_name = message_text.replace("üë§ ", "")

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        conn = self.bot.get_db_connection()

        task_data = context.user_data.get('user_task_creation', {})
        selected_role = task_data.get('selected_role')

        executor = conn.execute(
            "SELECT * FROM users WHERE name = ? AND role = ?",
            (executor_name, selected_role)
        ).fetchone()

        conn.close()

        if not executor:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        context.user_data['user_task_creation']['executor_id'] = executor['id']
        context.user_data['user_task_creation']['executor_name'] = executor['name']
        context.user_data['user_task_creation']['step'] = 'title'

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        keyboard = [["‚ùå –û—Ç–º–µ–Ω–∞"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            "üìù **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_task_title(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        title = update.message.text.strip()

        if not title or title == "‚ùå –û—Ç–º–µ–Ω–∞":
            return

        context.user_data['user_task_creation']['title'] = title

        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É
        if context.user_data['user_task_creation'].get('return_to_preview'):
            context.user_data['user_task_creation'].pop('return_to_preview', None)
            await self.show_task_preview(update, context)
            return

        context.user_data['user_task_creation']['step'] = 'description'

        keyboard = [
            ["‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            "üìÑ **–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏** (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_task_description(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        description = update.message.text.strip()

        if description == "‚ùå –û—Ç–º–µ–Ω–∞":
            return

        if description == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            description = ""

        context.user_data['user_task_creation']['description'] = description
        context.user_data['user_task_creation']['step'] = 'project'

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        conn = self.bot.get_db_connection()

        projects = conn.execute(
            "SELECT id, name FROM projects WHERE is_archived = 0 ORDER BY name"
        ).fetchall()

        conn.close()

        # –ö–µ—à–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        task_data = context.user_data.get('user_task_creation', {})
        task_data['_cached_projects'] = [dict(row) for row in projects]
        context.user_data['user_task_creation'] = task_data

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
        keyboard = []
        for i in range(0, len(projects), 2):
            row = []
            for project in projects[i:i+2]:
                row.append(f"üìÅ {project['name']}")
            keyboard.append(row)
        keyboard.append(["‚è≠Ô∏è –ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞"])
        keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            "üìÅ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç** (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_task_project(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        message_text = update.message.text.strip()

        if message_text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return

        project_id = None
        project_name = None

        if message_text != "‚è≠Ô∏è –ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞" and message_text.startswith("üìÅ "):
            project_name = message_text.replace("üìÅ ", "").strip()

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ –∏–º–µ–Ω–∏
            if not project_name:
                logger.warning("Empty project name after emoji removal")
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞")
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –ø—Ä–æ–µ–∫—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
            task_data = context.user_data.get('user_task_creation', {})
            projects = task_data.get('_cached_projects')

            if not projects:
                # –ï—Å–ª–∏ –∫–µ—à–∞ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –ë–î
                conn = self.bot.get_db_connection()
                projects = conn.execute(
                    "SELECT id, name FROM projects WHERE is_archived = 0 ORDER BY name"
                ).fetchall()
                conn.close()
                # –ö–µ—à–∏—Ä—É–µ–º –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                task_data['_cached_projects'] = [dict(row) for row in projects]
                context.user_data['user_task_creation'] = task_data

            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ O(1)
            projects_map = {p['name'].strip(): p['id'] for p in task_data['_cached_projects']}
            project_id = projects_map.get(project_name)

            if not project_id:
                logger.warning(f"Project '{project_name}' not found")
                await update.message.reply_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

        context.user_data['user_task_creation']['project_id'] = project_id
        context.user_data['user_task_creation']['step'] = 'task_type'

        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        task_data = context.user_data.get('user_task_creation', {})
        executor_role = task_data.get('selected_role')

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á –∏–∑ API
        task_types = await self.bot.get_task_types_from_api(executor_role)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞—á (–ø–æ 3 –≤ —Ä—è–¥)
        keyboard = []
        type_buttons = [display_name for display_name, internal_name in task_types]

        for i in range(0, len(type_buttons), 3):
            row = type_buttons[i:i+3]
            keyboard.append(row)
        keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            "üè∑Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_task_type(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
        message_text = update.message.text.strip()

        if message_text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return

        task_data = context.user_data.get('user_task_creation', {})
        executor_role = task_data.get('selected_role')

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á –¥–ª—è —Ä–æ–ª–∏
        task_types = await self.bot.get_task_types_from_api(executor_role)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ (–±–µ–∑ –∏–∫–æ–Ω–æ–∫) –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        available_types = {}
        for display_name, internal_name in task_types:
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
            clean_name = display_name.strip()
            available_types[clean_name] = internal_name

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if message_text not in available_types:
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
        context.user_data['user_task_creation']['task_type'] = available_types[message_text]

        # –ï—Å–ª–∏ —Ä–æ–ª—å –¥–∏–∑–∞–π–Ω–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã
        if executor_role == 'designer':
            context.user_data['user_task_creation']['step'] = 'format_selection'
            await self.show_format_selection(update, context)
        else:
            context.user_data['user_task_creation']['step'] = 'deadline'
            await self.show_deadline_selection(update, context)

    async def show_format_selection(self, update, context):
        """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑ API
        formats = await self.bot.get_task_formats_from_api()

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ (–ø–æ 3 –≤ —Ä—è–¥)
        keyboard = []
        format_buttons = [display_name for display_name, internal_name in formats]

        for i in range(0, len(format_buttons), 3):
            row = format_buttons[i:i+3]
            keyboard.append(row)
        keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            "üìê **–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏:**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_task_format(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–¥–∞—á–∏"""
        message_text = update.message.text.strip()

        if message_text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        formats = await self.bot.get_task_formats_from_api()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        available_formats = {}
        for display_name, internal_name in formats:
            clean_name = display_name.strip()
            available_formats[clean_name] = internal_name

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if message_text not in available_formats:
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞
        context.user_data['user_task_creation']['task_format'] = available_formats[message_text]
        context.user_data['user_task_creation']['step'] = 'deadline'

        await self.show_deadline_selection(update, context)

    async def show_deadline_selection(self, update, context):
        """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞"""
        keyboard = [
            ["üìÖ –°–µ–≥–æ–¥–Ω—è –¥–æ 18:00"],
            ["üåÜ –ó–∞–≤—Ç—Ä–∞ –¥–æ 18:00"],
            ["üìÖ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è –¥–æ 18:00"],
            ["üìÜ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –¥–æ 18:00"],
            ["‚è≠Ô∏è –ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω** –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18.09.2025 18:00)",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_task_deadline(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞"""
        message_text = update.message.text.strip()

        if message_text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return

        deadline = None
        now = datetime.now()

        if message_text == "üìÖ –°–µ–≥–æ–¥–Ω—è –¥–æ 18:00":
            deadline = now.replace(hour=18, minute=0, second=0, microsecond=0)
        elif message_text == "üåÜ –ó–∞–≤—Ç—Ä–∞ –¥–æ 18:00":
            deadline = (now + timedelta(days=1)).replace(hour=18, minute=0, second=0, microsecond=0)
        elif message_text == "üìÖ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è –¥–æ 18:00":
            deadline = (now + timedelta(days=3)).replace(hour=18, minute=0, second=0, microsecond=0)
        elif message_text == "üìÜ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –¥–æ 18:00":
            deadline = (now + timedelta(days=7)).replace(hour=18, minute=0, second=0, microsecond=0)
        elif message_text == "‚è≠Ô∏è –ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞":
            deadline = None
        else:
            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú
            try:
                deadline = datetime.strptime(message_text, "%d.%m.%Y %H:%M")
            except ValueError:
                await update.message.reply_text(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: `18.09.2025 18:00`",
                    parse_mode='Markdown'
                )
                return

        context.user_data['user_task_creation']['deadline'] = deadline.isoformat() if deadline else None

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if deadline:
            context.user_data['user_task_creation']['deadline_text'] = deadline.strftime("%d.%m.%Y –≤ %H:%M")
        else:
            context.user_data['user_task_creation']['deadline_text'] = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏
        await self.show_task_preview(update, context)

    async def show_task_preview(self, update, context):
        """–ü–æ–∫–∞–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏"""
        task_data = context.user_data.get('user_task_creation', {})

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        project_name = "–ù–µ –≤—ã–±—Ä–∞–Ω"
        if task_data.get('project_id'):
            conn = self.bot.get_db_connection()
            project = conn.execute(
                "SELECT name FROM projects WHERE id = ?",
                (task_data['project_id'],)
            ).fetchone()
            conn.close()
            if project:
                project_name = project['name']

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        safe_title = escape_markdown(task_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
        safe_executor = escape_markdown(task_data.get('executor_name', '–ù–µ –≤—ã–±—Ä–∞–Ω'))
        safe_project = escape_markdown(project_name)
        safe_type = escape_markdown(task_data.get('task_type', '–ù–µ —É–∫–∞–∑–∞–Ω'))
        safe_format = escape_markdown(task_data.get('task_format', '')) if task_data.get('task_format') else ''
        safe_deadline = escape_markdown(task_data.get('deadline_text', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'))

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
        preview_text = f"""
üìã **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏**

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {safe_title}
‚îÇ üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {safe_executor}
‚îÇ üìÅ **–ü—Ä–æ–µ–∫—Ç:** {safe_project}
‚îÇ üè∑Ô∏è **–¢–∏–ø:** {safe_type}
"""

        if task_data.get('task_format'):
            preview_text += f"‚îÇ üìê **–§–æ—Ä–º–∞—Ç:** {safe_format}\n"

        preview_text += f"‚îÇ ‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {safe_deadline}\n"

        if task_data.get('description'):
            desc = task_data['description']
            if len(desc) > 100:
                desc = desc[:100] + "..."
            safe_desc = escape_markdown(desc)
            preview_text += f"‚îÇ üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {safe_desc}\n"

        preview_text += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"

        keyboard = [
            ["‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"],
            ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            preview_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥
        task_data['step'] = 'final_confirmation'
        context.user_data['user_task_creation'] = task_data

    async def handle_task_confirmation(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        message_text = update.message.text.strip()

        if message_text == "‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É":
            await self._save_task(update, context)
        elif message_text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
            await self.handle_edit_task(update, context)
        elif message_text == "‚ùå –û—Ç–º–µ–Ω–∞":
            context.user_data.pop('user_task_creation', None)
            await self.handle_user_task_management(update, context)

    async def handle_edit_task(self, update, context):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        keyboard = [
            ["üìù –ù–∞–∑–≤–∞–Ω–∏–µ", "üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"],
            ["üìÅ –ü—Ä–æ–µ–∫—Ç", "üè∑Ô∏è –¢–∏–ø –∑–∞–¥–∞—á–∏"],
            ["‚è∞ –î–µ–¥–ª–∞–π–Ω", "üìÑ –û–ø–∏—Å–∞–Ω–∏–µ"],
            ["üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            "‚úèÔ∏è **–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?**",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

        context.user_data['user_task_creation']['step'] = 'edit_selection'

    async def handle_edit_selection(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        message_text = update.message.text.strip()
        task_data = context.user_data.get('user_task_creation', {})

        if message_text == "üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É":
            await self.show_task_preview(update, context)
            return

        edit_mapping = {
            "üìù –ù–∞–∑–≤–∞–Ω–∏–µ": ('title', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:'),
            "üìÑ –û–ø–∏—Å–∞–Ω–∏–µ": ('description', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å):'),
            "üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": ('executor', 'executor_selection'),
            "üìÅ –ü—Ä–æ–µ–∫—Ç": ('project', 'project_selection'),
            "üè∑Ô∏è –¢–∏–ø –∑–∞–¥–∞—á–∏": ('task_type', 'task_type_selection'),
            "‚è∞ –î–µ–¥–ª–∞–π–Ω": ('deadline', 'deadline_selection')
        }

        if message_text in edit_mapping:
            field, next_step = edit_mapping[message_text]
            task_data['editing_field'] = field
            task_data['return_to_preview'] = True

            if field == 'title':
                task_data['step'] = 'title'
                keyboard = [["‚ùå –û—Ç–º–µ–Ω–∞"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
                await update.message.reply_text(next_step, parse_mode='Markdown', reply_markup=reply_markup)
            elif field == 'description':
                task_data['step'] = 'description'
                keyboard = [["‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"], ["‚ùå –û—Ç–º–µ–Ω–∞"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
                await update.message.reply_text(next_step, parse_mode='Markdown', reply_markup=reply_markup)
            elif field == 'executor':
                task_data['step'] = 'executor_selection'
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
                await self._process_role_selection(update, context, task_data['selected_role'])
            elif field == 'project':
                task_data['step'] = 'project'
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
                conn = self.bot.get_db_connection()
                projects = conn.execute(
                    "SELECT id, name FROM projects WHERE is_archived = 0 ORDER BY name"
                ).fetchall()
                conn.close()

                keyboard = []
                for i in range(0, len(projects), 2):
                    row = []
                    for project in projects[i:i+2]:
                        row.append(f"üìÅ {project['name']}")
                    keyboard.append(row)
                keyboard.append(["‚è≠Ô∏è –ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞"])
                keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])

                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
                await update.message.reply_text("üìÅ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç** (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", parse_mode='Markdown', reply_markup=reply_markup)
            elif field == 'task_type':
                task_data['step'] = 'task_type'
                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á –∏–∑ API
                task_types = await self.bot.get_task_types_from_api(task_data.get('selected_role'))
                keyboard = []
                type_buttons = [display_name for display_name, internal_name in task_types]
                for i in range(0, len(type_buttons), 3):
                    row = type_buttons[i:i+3]
                    keyboard.append(row)
                keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
                await update.message.reply_text("üè∑Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:**", parse_mode='Markdown', reply_markup=reply_markup)
            elif field == 'deadline':
                task_data['step'] = 'deadline'
                await self.show_deadline_selection(update, context)

            context.user_data['user_task_creation'] = task_data

    async def _save_task(self, update, context):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ë–î"""
        task_data = context.user_data.get('user_task_creation', {})

        conn = self.bot.get_db_connection()

        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–∑ –ë–î
            creator_telegram_id = task_data['creator_id']
            creator = conn.execute(
                "SELECT id FROM users WHERE telegram_id = ?",
                (creator_telegram_id,)
            ).fetchone()

            if not creator:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            creator_id = creator[0]

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å project_id
            project_name = None
            if task_data.get('project_id'):
                project = conn.execute(
                    "SELECT name FROM projects WHERE id = ?",
                    (task_data['project_id'],)
                ).fetchone()
                if project:
                    project_name = project['name']

            # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            cursor = conn.execute("""
                INSERT INTO tasks (
                    title, description, project, task_type, task_format, deadline,
                    author_id, executor_id, status, created_at
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                task_data['title'],
                task_data.get('description', ''),
                project_name,  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –∞ –Ω–µ ID
                task_data['task_type'],
                task_data.get('task_format'),  # –§–æ—Ä–º–∞—Ç –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤
                task_data.get('deadline'),
                creator_id,
                task_data['executor_id'],
                'new',
                datetime.now().isoformat()
            ))

            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
            # –î–ª—è PostgreSQL: DBConnection –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç RETURNING id, –∏—Å–ø–æ–ª—å–∑—É–µ–º fetchone()
            # –î–ª—è SQLite: –∏—Å–ø–æ–ª—å–∑—É–µ–º lastrowid
            import os
            db_engine = os.getenv('DB_ENGINE', 'sqlite').lower()
            if db_engine == 'postgresql':
                result = cursor.fetchone()
                task_id = result['id'] if result else None
            else:
                task_id = cursor.lastrowid

            if not task_id:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏")

            conn.commit()

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            safe_title = escape_markdown(task_data.get('title'))
            safe_executor = escape_markdown(task_data.get('executor_name'))
            safe_project = escape_markdown(project_name if project_name else '–ù–µ –≤—ã–±—Ä–∞–Ω')
            safe_type = escape_markdown(task_data.get('task_type'))
            safe_format = escape_markdown(task_data.get('task_format', '')) if task_data.get('task_format') else ''
            safe_deadline = escape_markdown(task_data.get('deadline_text', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'))

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_message = f"""
‚úÖ **–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!**

üìã **–ó–∞–¥–∞—á–∞ #{task_id}**
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {safe_title}
‚îÇ üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {safe_executor}
‚îÇ üìÅ **–ü—Ä–æ–µ–∫—Ç:** {safe_project}
‚îÇ üè∑Ô∏è **–¢–∏–ø:** {safe_type}
"""

            if task_data.get('task_format'):
                success_message += f"‚îÇ üìê **–§–æ—Ä–º–∞—Ç:** {safe_format}\n"

            success_message += f"‚îÇ ‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {safe_deadline}\n"
            success_message += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
            success_message += "üì≤ **–ó–∞–¥–∞—á–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.**"

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            executor_info = conn.execute(
                "SELECT telegram_id, name FROM users WHERE id = ?",
                (task_data['executor_id'],)
            ).fetchone()

            if executor_info and executor_info[0]:
                executor_telegram_id = executor_info[0]

                notification = f"üîî **–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞!**"

                try:
                    await context.bot.send_message(
                        chat_id=executor_telegram_id,
                        text=notification,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                ["‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"],
                ["üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"],
                ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

            await update.message.reply_text(
                success_message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('user_task_creation', None)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}"
            )
        finally:
            conn.close()

    async def handle_active_tasks(self, update, context):
        """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.message.from_user

        conn = self.bot.get_db_connection()

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = conn.execute(
            "SELECT id, name, role FROM users WHERE telegram_id = ?",
            (user.id,)
        ).fetchone()

        if not db_user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            conn.close()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)
        tasks = conn.execute("""
            SELECT t.id, t.title, t.description, t.project, t.task_type, t.deadline, t.created_at, t.task_format
            FROM tasks t
            WHERE t.executor_id = ? AND t.status IN ('new', 'in_progress')
            ORDER BY
                CASE WHEN t.deadline IS NULL THEN 1 ELSE 0 END,
                t.deadline ASC,
                t.created_at DESC
            LIMIT 50
        """, (db_user['id'],)).fetchall()

        conn.close()

        if not tasks:
            keyboard = [
                ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                ["üí∞ –†–∞—Å—Ö–æ–¥—ã", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

            await update.message.reply_text(
                "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.",
                reply_markup=reply_markup
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ (–∫–∞–∫ —É –∞–¥–º–∏–Ω–∞)
        for i, task in enumerate(tasks, 1):
            task_info = []

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            safe_title = escape_markdown(task[1]) if task[1] else ""
            safe_project = escape_markdown(task[3]) if task[3] else ""
            safe_type = escape_markdown(task[4]) if task[4] else ""
            safe_format = escape_markdown(task[7]) if task[7] else ""

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ —Å –Ω–æ–º–µ—Ä–æ–º
            task_info.append(f"üìù **–ó–∞–¥–∞—á–∞ #{i}**")
            task_info.append(f"**{safe_title}**")  # title
            task_info.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")

            # –ü—Ä–æ–µ–∫—Ç
            if task[3]:  # project
                task_info.append(f"üéØ **–ü—Ä–æ–µ–∫—Ç:** {safe_project}")

            # –¢–∏–ø –∑–∞–¥–∞—á–∏
            if task[4]:  # task_type
                task_info.append(f"üìÇ **–¢–∏–ø:** {safe_type}")

            # –§–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏ (–¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤)
            if task[7]:  # task_format
                task_info.append(f"üé® **–§–æ—Ä–º–∞—Ç:** {safe_format}")

            # –î–µ–¥–ª–∞–π–Ω
            if task[5]:  # deadline
                try:
                    deadline_dt = datetime.fromisoformat(task[5].replace('Z', '+00:00'))
                    deadline_str = deadline_dt.strftime("%d.%m.%Y –≤ %H:%M")
                    task_info.append(f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {deadline_str}")

                    # –°—Ç–∞—Ç—É—Å –≤—Å–µ–≥–¥–∞ "–í —Ä–∞–±–æ—Ç–µ" –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
                    task_info.append("üü¢ **–°—Ç–∞—Ç—É—Å:** –í —Ä–∞–±–æ—Ç–µ")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
                    now = datetime.now()
                    time_left = deadline_dt - now
                    if time_left.days < 0:
                        task_info.append("üî¥ **–°—Ä–æ–∫:** –ü—Ä–æ—Å—Ä–æ—á–µ–Ω!")
                    elif time_left.days == 0:
                        task_info.append("üü° **–°—Ä–æ–∫:** –°–µ–≥–æ–¥–Ω—è!")
                    elif time_left.days == 1:
                        task_info.append("üü† **–°—Ä–æ–∫:** –ó–∞–≤—Ç—Ä–∞")
                    else:
                        task_info.append(f"‚è±Ô∏è **–û—Å—Ç–∞–ª–æ—Å—å:** {time_left.days} –¥–Ω.")
                except:
                    task_info.append(f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {task[5]}")

            # –û–ø–∏—Å–∞–Ω–∏–µ
            if task[2]:  # description
                desc = task[2]
                if len(desc) > 200:
                    desc = desc[:200] + "..."
                safe_desc = escape_markdown(desc)
                task_info.append(f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{safe_desc}")

            # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            if task[6]:  # created_at
                try:
                    created_dt = datetime.fromisoformat(task[6].replace('Z', '+00:00'))
                    created_str = created_dt.strftime("%d.%m.%Y")
                    task_info.append(f"üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {created_str}")
                except:
                    pass

            task_message = "\n".join(task_info)

            # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
            inline_keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_task_{task[0]}"),
                    InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_task_{task[0]}")
                ]
            ]
            inline_markup = InlineKeyboardMarkup(inline_keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
            await update.message.reply_text(
                task_message,
                parse_mode='Markdown',
                reply_markup=inline_markup
            )

        # –ü–æ—Å–ª–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        keyboard = [
            ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
            ["üí∞ –†–∞—Å—Ö–æ–¥—ã", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        summary_text = (
            f"üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {db_user['name']}**\n"
            f"üë• **–†–æ–ª—å:** {self.get_role_display_name(db_user['role'] if db_user['role'] else 'unknown')}\n"
            f"üìä **–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:** {len(tasks)}"
        )

        await update.message.reply_text(
            summary_text,
            parse_mode='Markdown'
        )

        await update.message.reply_text(
            "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def handle_completed_tasks(self, update, context):
        """–ü–æ–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.message.from_user

        conn = self.bot.get_db_connection()

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = conn.execute(
            "SELECT id, name, role FROM users WHERE telegram_id = ?",
            (user.id,)
        ).fetchone()

        if not db_user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            conn.close()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        tasks = conn.execute("""
            SELECT t.id, t.title, t.description, t.project, t.task_type, t.finished_at, t.created_at, t.task_format
            FROM tasks t
            WHERE t.executor_id = ? AND t.status = 'done'
            ORDER BY t.finished_at DESC
            LIMIT 50
        """, (db_user['id'],)).fetchall()

        conn.close()

        if not tasks:
            keyboard = [
                ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
                ["üí∞ –†–∞—Å—Ö–æ–¥—ã", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

            await update.message.reply_text(
                "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.",
                reply_markup=reply_markup
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ (–∫–∞–∫ —É –∞–¥–º–∏–Ω–∞)
        for i, task in enumerate(tasks, 1):
            task_info = []

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ —Å –Ω–æ–º–µ—Ä–æ–º
            task_info.append(f"‚úÖ **–ó–∞–¥–∞—á–∞ #{i}**")
            task_info.append(f"**{task[1]}**")  # title
            task_info.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")

            # –ü—Ä–æ–µ–∫—Ç
            if task[3]:  # project
                task_info.append(f"üéØ **–ü—Ä–æ–µ–∫—Ç:** {task[3]}")

            # –¢–∏–ø –∑–∞–¥–∞—á–∏
            if task[4]:  # task_type
                task_info.append(f"üìÇ **–¢–∏–ø:** {task[4]}")

            # –§–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏ (–¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤)
            if task[7]:  # task_format
                task_info.append(f"üé® **–§–æ—Ä–º–∞—Ç:** {task[7]}")

            # –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if task[5]:  # finished_at
                try:
                    finished_dt = datetime.fromisoformat(task[5].replace('Z', '+00:00'))
                    finished_str = finished_dt.strftime("%d.%m.%Y –≤ %H:%M")
                    task_info.append(f"‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {finished_str}")
                    task_info.append("üü¢ **–°—Ç–∞—Ç—É—Å:** –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
                except:
                    task_info.append(f"‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {task[5]}")

            # –û–ø–∏—Å–∞–Ω–∏–µ
            if task[2]:  # description
                desc = task[2]
                if len(desc) > 200:
                    desc = desc[:200] + "..."
                safe_desc = escape_markdown(desc)
                task_info.append(f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{safe_desc}")

            # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            if task[6]:  # created_at
                try:
                    created_dt = datetime.fromisoformat(task[6].replace('Z', '+00:00'))
                    created_str = created_dt.strftime("%d.%m.%Y")
                    task_info.append(f"üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {created_str}")
                except:
                    pass

            task_message = "\n".join(task_info)

            # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–∏—Ç—å)
            inline_keyboard = [
                [
                    InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_task_{task[0]}")
                ]
            ]
            inline_markup = InlineKeyboardMarkup(inline_keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
            await update.message.reply_text(
                task_message,
                parse_mode='Markdown',
                reply_markup=inline_markup
            )

        # –ü–æ—Å–ª–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        keyboard = [
            ["üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"],
            ["üí∞ –†–∞—Å—Ö–æ–¥—ã", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        summary_text = (
            f"‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {db_user['name']}**\n"
            f"üë• **–†–æ–ª—å:** {self.get_role_display_name(db_user['role'] if db_user['role'] else 'unknown')}\n"
            f"üìä **–í—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:** {len(tasks)}"
        )

        await update.message.reply_text(
            summary_text,
            parse_mode='Markdown'
        )

        await update.message.reply_text(
            "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def handle_task_id_input(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ—é"""
        if not context.user_data.get('awaiting_task_id'):
            return False

        message_text = update.message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
        try:
            task_id = int(message_text)
        except ValueError:
            return False

        user = update.message.from_user

        conn = self.bot.get_db_connection()

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = conn.execute(
            "SELECT id FROM users WHERE telegram_id = ?",
            (user.id,)
        ).fetchone()

        if not db_user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            conn.close()
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        task = conn.execute("""
            SELECT t.*, p.name as project_name, u.name as creator_name
            FROM tasks t
            LEFT JOIN projects p ON t.project_id = p.id
            LEFT JOIN users u ON t.creator_id = u.id
            WHERE t.id = ? AND t.executor_id = ?
        """, (task_id, db_user['id'])).fetchone()

        conn.close()

        if not task:
            await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.")
            context.user_data.pop('awaiting_task_id', None)
            return True

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        deadline_text = "–ù–µ —É–∫–∞–∑–∞–Ω"
        if task['deadline']:
            try:
                deadline_obj = datetime.fromisoformat(task['deadline'])
                deadline_text = deadline_obj.strftime("%d.%m.%Y")
            except:
                deadline_text = task['deadline']

        project_text = task['project_name'] if task['project_name'] else "–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞"
        status_text = {
            'new': 'üÜï –ù–æ–≤–∞—è',
            'in_progress': '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
            'done': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'overdue': '‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞'
        }.get(task['status'], task['status'])

        message = (
            f"üìã **–ó–∞–¥–∞—á–∞ #{task['id']}**\n\n"
            f"üìù {task['title']}\n"
            f"üìÑ {task['description'] if task['description'] else '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
            f"üè∑Ô∏è –¢–∏–ø: {task['task_type']}\n"
            f"üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline_text}\n"
            f"üìÅ –ü—Ä–æ–µ–∫—Ç: {project_text}\n"
            f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {task['creator_name']}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
        )

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞)
        if task['status'] in ('new', 'in_progress'):
            keyboard = [
                ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"],
                ["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"],
                ["üîô –ù–∞–∑–∞–¥"]
            ]
        else:
            keyboard = [["üîô –ù–∞–∑–∞–¥"]]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        context.user_data['current_task_id'] = task_id
        context.user_data.pop('awaiting_task_id', None)

        return True

    async def handle_complete_task(self, update, context):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        task_id = context.user_data.get('current_task_id')
        if not task_id:
            await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
            return

        user = update.message.from_user

        conn = self.bot.get_db_connection()

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = conn.execute(
            "SELECT id FROM users WHERE telegram_id = ?",
            (user.id,)
        ).fetchone()

        if not db_user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            conn.close()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        task = conn.execute(
            "SELECT * FROM tasks WHERE id = ? AND executor_id = ?",
            (task_id, db_user['id'])
        ).fetchone()

        if not task:
            await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.")
            conn.close()
            return

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
        conn.execute("""
            UPDATE tasks
            SET status = 'done', finished_at = ?
            WHERE id = ?
        """, (datetime.now().isoformat(), task_id))

        conn.commit()
        conn.close()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        keyboard = [
            ["‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"],
            ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=reply_markup
        )

        context.user_data.pop('current_task_id', None)

    async def handle_delete_task(self, update, context):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        task_id = context.user_data.get('current_task_id')
        if not task_id:
            await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
            return

        user = update.message.from_user

        conn = self.bot.get_db_connection()

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = conn.execute(
            "SELECT id FROM users WHERE telegram_id = ?",
            (user.id,)
        ).fetchone()

        if not db_user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            conn.close()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        task = conn.execute(
            "SELECT * FROM tasks WHERE id = ? AND executor_id = ?",
            (task_id, db_user['id'])
        ).fetchone()

        if not task:
            await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.")
            conn.close()
            return

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
        conn.execute("DELETE FROM tasks WHERE id = ?", (task_id,))

        conn.commit()
        conn.close()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        keyboard = [
            ["‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"],
            ["üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"],
            ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            f"üóëÔ∏è –ó–∞–¥–∞—á–∞ #{task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=reply_markup
        )

        context.user_data.pop('current_task_id', None)

    async def handle_task_callback(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        query = update.callback_query
        await query.answer()

        data = query.data
        user = update.effective_user

        conn = self.bot.get_db_connection()

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = conn.execute(
            "SELECT id FROM users WHERE telegram_id = ?",
            (user.id,)
        ).fetchone()

        if not db_user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            conn.close()
            return

        if data.startswith("complete_task_"):
            task_id = int(data.replace("complete_task_", ""))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            task = conn.execute(
                "SELECT * FROM tasks WHERE id = ? AND executor_id = ?",
                (task_id, db_user['id'])
            ).fetchone()

            if not task:
                await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.")
                conn.close()
                return

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            conn.execute(
                "UPDATE tasks SET status = 'done', finished_at = ? WHERE id = ?",
                (datetime.now().isoformat(), task_id)
            )
            conn.commit()
            conn.close()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} **{task['title']}** —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                parse_mode='Markdown'
            )

        elif data.startswith("delete_task_"):
            task_id = int(data.replace("delete_task_", ""))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            task = conn.execute(
                "SELECT * FROM tasks WHERE id = ? AND executor_id = ?",
                (task_id, db_user['id'])
            ).fetchone()

            if not task:
                await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.")
                conn.close()
                return

            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
            conn.execute("DELETE FROM tasks WHERE id = ?", (task_id,))
            conn.commit()
            conn.close()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                f"üóëÔ∏è –ó–∞–¥–∞—á–∞ #{task_id} **{task['title']}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
                parse_mode='Markdown'
            )

        elif data.startswith("accept_task_"):
            task_id = int(data.replace("accept_task_", ""))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            task = conn.execute(
                "SELECT * FROM tasks WHERE id = ? AND executor_id = ?",
                (task_id, db_user['id'])
            ).fetchone()

            if not task:
                await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.")
                conn.close()
                return

            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É (–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ in_progress)
            conn.execute(
                "UPDATE tasks SET status = 'in_progress', accepted_at = ? WHERE id = ?",
                (datetime.now().isoformat(), task_id)
            )
            conn.commit()
            conn.close()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} **{task['title']}** –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!\n\n"
                f"üìå –ó–∞–¥–∞—á–∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–í —Ä–∞–±–æ—Ç–µ'",
                parse_mode='Markdown'
            )
