import { useEffect, useState } from 'react'
import { API_URL } from '../api'
import { formatDateUTC5 } from '../utils/dateUtils'

interface User {
  id: number
  telegram_username: string
  telegram_id?: number
  name: string
  role: string
  telegram_registered_at?: string
  is_active: boolean
}

function Users() {
  const [users, setUsers] = useState<User[]>([])
  const [showModal, setShowModal] = useState(false)
  const [editing, setEditing] = useState<User | null>(null)
  const [telegramUsername, setTelegramUsername] = useState('')
  const [telegramId, setTelegramId] = useState('')
  const [name, setName] = useState('')
  const [password, setPassword] = useState('')
  const [role, setRole] = useState('designer')

  const token = localStorage.getItem('token')

  const load = async () => {
    const res = await fetch(`${API_URL}/users/`, {
      headers: { Authorization: `Bearer ${token}` },
    })
    if (res.ok) {
      const data = await res.json()
      setUsers(data)
    }
  }

  useEffect(() => { load() }, [])

  const openAdd = () => {
    setEditing(null)
    setTelegramUsername('')
    setTelegramId('')
    setName('')
    setPassword('')
    setRole('designer')
    setShowModal(true)
  }

  const openEdit = (u: User) => {
    // Don't allow editing inactive users
    if (u.role === 'inactive' || !u.is_active) return
    
    setEditing(u)
    setTelegramUsername(u.telegram_username)
    setTelegramId(u.telegram_id?.toString() || '')
    setName(u.name)
    setPassword('')
    setRole(u.role)
    setShowModal(true)
  }

  const save = async () => {
    const payload: any = { telegram_username: telegramUsername, name, role }
    if (telegramId) payload.telegram_id = parseInt(telegramId)
    if (password) payload.password = password
    if (editing) {
      await fetch(`${API_URL}/users/${editing.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(payload),
      })
    } else {
      payload.password = password
      await fetch(`${API_URL}/users/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(payload),
      })
    }
    setShowModal(false)
    load()
  }

  const toggleStatus = async (user: User) => {
    await fetch(`${API_URL}/users/${user.id}/toggle-status`, {
      method: 'PUT',
      headers: { Authorization: `Bearer ${token}` },
    })
    load()
  }

  const deleteUser = async (user: User) => {
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${user.name}"?`)) {
      try {
        const response = await fetch(`${API_URL}/users/${user.id}`, {
          method: 'DELETE',
          headers: { Authorization: `Bearer ${token}` },
        })

        if (response.ok) {
          const result = await response.json()
          alert(result.message || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
          load() // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
        } else if (response.status === 404) {
          alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω')
          load() // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
        } else {
          const error = await response.json()
          alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
        }
      } catch (error) {
        console.error('Error deleting user:', error)
        alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      }
    }
  }

  const getRoleDisplay = (role: string) => {
    const roleMap: { [key: string]: string } = {
      'designer': '–î–∏–∑–∞–π–Ω–µ—Ä',
      'smm_manager': '–°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä',
      'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      'inactive': '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'
    }
    return roleMap[role] || role
  }

  const groupUsersByRole = (users: User[]) => {
    const activeUsers = users.filter(u => u.role !== 'inactive' && u.is_active)
    const inactiveUsers = users.filter(u => u.role === 'inactive' || !u.is_active)
    
    const grouped: { [key: string]: User[] } = {}
    activeUsers.forEach(user => {
      if (!grouped[user.role]) {
        grouped[user.role] = []
      }
      grouped[user.role].push(user)
    })
    
    return { grouped, inactiveUsers }
  }

  const getRoleOrder = () => {
    return ['admin', 'smm_manager', 'designer']
  }

  return (
    <div className="p-4">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h1>
        <button className="bg-blue-500 text-white px-3 py-1 rounded" onClick={openAdd}>
          –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        </button>
      </div>
      
      <div className="space-y-6">
        {(() => {
          const { grouped, inactiveUsers } = groupUsersByRole(users)
          const roleOrder = getRoleOrder()
          
          return (
            <>
              {roleOrder.map(roleKey => {
                if (!grouped[roleKey] || grouped[roleKey].length === 0) return null
                
                return (
                  <div key={roleKey} className="bg-white rounded-lg shadow">
                    <div className="px-4 py-2 bg-gray-50 border-b border-gray-200 rounded-t-lg">
                      <h3 className="font-medium text-base text-gray-800">
                        {getRoleDisplay(roleKey)} ({grouped[roleKey].length})
                      </h3>
                    </div>
                    <div className="divide-y">
                      {grouped[roleKey].map(u => (
                        <div key={u.id} className="p-4 flex items-center justify-between hover:bg-gray-50">
                          <div className="flex-1">
                            <div className="flex items-center gap-3">
                              <span className="font-medium text-lg">{u.name}</span>
                            </div>
                            <div className="text-sm text-gray-500 mt-1 space-y-1">
                              <div>üì± @{u.telegram_username}</div>
                              {u.telegram_id && <div>üÜî ID: {u.telegram_id}</div>}
                              {u.telegram_registered_at && (
                                <div>‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram: {formatDateUTC5(u.telegram_registered_at)}</div>
                              )}
                              {!u.telegram_registered_at && (
                                <div className="text-yellow-600">‚ö†Ô∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram</div>
                              )}
                            </div>
                          </div>
                          
                          <div className="flex items-center gap-2">
                            <button 
                              className="px-3 py-1 text-sm border border-blue-500 text-blue-500 rounded hover:bg-blue-50"
                              onClick={() => openEdit(u)}
                            >
                              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                            <button 
                              className="px-3 py-1 text-sm bg-yellow-500 text-white rounded hover:bg-yellow-600"
                              onClick={() => toggleStatus(u)}
                            >
                              –°–¥–µ–ª–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
                            </button>
                            <button 
                              className="px-3 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600"
                              onClick={() => deleteUser(u)}
                            >
                              –£–¥–∞–ª–∏—Ç—å
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )
              })}
              
              {inactiveUsers.length > 0 && (
                <div className="bg-white rounded-lg shadow">
                  <div className="px-4 py-2 bg-red-50 border-b border-red-200 rounded-t-lg">
                    <h3 className="font-medium text-base text-red-800">
                      –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({inactiveUsers.length})
                    </h3>
                  </div>
                  <div className="divide-y">
                    {inactiveUsers.map(u => (
                      <div key={u.id} className="p-4 flex items-center justify-between hover:bg-gray-50">
                        <div className="flex-1">
                          <div className="flex items-center gap-3">
                            <span className="font-medium text-lg text-gray-500">{u.name}</span>
                            <span className="text-sm text-red-600 bg-red-100 px-2 py-1 rounded">
                              –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π
                            </span>
                          </div>
                          <div className="text-sm text-gray-400 mt-1">
                            üì± @{u.telegram_username}
                          </div>
                        </div>
                        
                        <div className="flex items-center gap-2">
                          <button 
                            className="px-3 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600"
                            onClick={() => toggleStatus(u)}
                          >
                            –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                          </button>
                          <button 
                            className="px-3 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600"
                            onClick={() => deleteUser(u)}
                          >
                            –£–¥–∞–ª–∏—Ç—å
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </>
          )
        })()}
      </div>

      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg w-96">
            <h2 className="text-xl font-semibold mb-4">
              {editing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
            </h2>
            
            <div className="space-y-3">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Telegram Username</label>
                <div className="relative">
                  <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">@</span>
                  <input 
                    className="border p-2 pl-8 w-full rounded" 
                    value={telegramUsername} 
                    onChange={e => setTelegramUsername(e.target.value.replace('@', ''))} 
                    placeholder="pullerize"
                  />
                </div>
                <p className="text-xs text-gray-500 mt-1">
                  –í–≤–µ–¥–∏—Ç–µ Telegram username –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Telegram ID</label>
                <input
                  type="number"
                  className="border p-2 w-full rounded"
                  value={telegramId}
                  onChange={e => setTelegramId(e.target.value)}
                  placeholder="123456789"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ /start)
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ò–º—è</label>
                <input 
                  className="border p-2 w-full rounded" 
                  value={name} 
                  onChange={e => setName(e.target.value)} 
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ü–∞—Ä–æ–ª—å {editing && '(–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å)'}
                </label>
                <input 
                  type="password" 
                  className="border p-2 w-full rounded" 
                  value={password} 
                  onChange={e => setPassword(e.target.value)} 
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–†–æ–ª—å</label>
                <select 
                  className="border p-2 w-full rounded" 
                  value={role} 
                  onChange={e => setRole(e.target.value)}
                >
                  <option value="designer">–î–∏–∑–∞–π–Ω–µ—Ä</option>
                  <option value="smm_manager">–°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä</option>
                  <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                </select>
              </div>
            </div>
            
            <div className="flex justify-end mt-6 gap-2">
              <button 
                className="px-4 py-2 border rounded hover:bg-gray-50" 
                onClick={() => setShowModal(false)}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button 
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600" 
                onClick={save}
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default Users