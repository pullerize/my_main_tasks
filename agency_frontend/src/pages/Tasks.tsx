import { useEffect, useState } from 'react'
import { API_URL } from '../api'
import { formatDateShortUTC5, getCurrentTimeUTC5, formatDateUTC5, formatDeadline } from '../utils/dateUtils'
import { usePersistedState } from '../utils/filterStorage'

interface Task {
  id: number
  title: string
  description?: string
  status: string
  deadline?: string
  accepted_at?: string
  finished_at?: string
  resume_count?: number
  executor_id?: number
  author_id?: number
  created_at: string
  project?: string
  task_type?: string
  task_format?: string
  high_priority?: boolean
  is_recurring?: boolean
  recurrence_type?: string
  recurrence_time?: string
  recurrence_days?: string
  next_run_at?: string
}

interface User {
  id: number
  name: string
  role: string
}

const DESIGNER_TYPES = ['Motion', '–°—Ç–∞—Ç–∏–∫–∞', '–í–∏–¥–µ–æ', '–ö–∞—Ä—É—Å–µ–ª—å', '–î—Ä—É–≥–æ–µ']
const DESIGNER_FORMATS = ['9:16', '1:1', '4:5', '16:9', '–î—Ä—É–≥–æ–µ']
const MANAGER_TYPES = [
  '–ü—É–±–ª–∏–∫–∞—Ü–∏—è',
  '–ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω',
  '–û—Ç—á–µ—Ç',
  '–°—ä–µ–º–∫–∞',
  '–í—Å—Ç—Ä–µ—á–∞',
  '–°—Ç—Ä–∞—Ç–µ–≥–∏—è',
  '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è',
  '–ê–¥–º–∏–Ω –∑–∞–¥–∞—á–∏',
  '–ê–Ω–∞–ª–∏–∑',
  '–ë—Ä–∏—Ñ–∏–Ω–≥',
  '–°—Ü–µ–Ω–∞—Ä–∏–π',
  '–î—Ä—É–≥–æ–µ',
]
const DIGITAL_TYPES = [
  '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã',
  '–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
  'A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 
  '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
  '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π',
  'Email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥',
  '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞',
  '–¢–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞',
  'SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
  '–í–µ–±-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
  '–î—Ä—É–≥–æ–µ',
]
const ADMIN_TYPES = [
  '–ü—É–±–ª–∏–∫–∞—Ü–∏—è',
  '–°—ä–µ–º–∫–∏',
  '–°—Ç—Ä–∞—Ç–µ–≥–∏—è',
  '–û—Ç—á–µ—Ç',
  '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è',
  '–í—Å—Ç—Ä–µ—á–∞',
  '–î–æ–∫—É–º–µ–Ω—Ç—ã',
  '–†–∞–±–æ—Ç–∞ —Å –∫–∞–¥—Ä–∞–º–∏',
  '–ü–ª–∞–Ω–µ—Ä–∫–∞',
  '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞—á–∏',
  '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
  '–î–æ–≥–æ–≤–æ—Ä',
  '–î—Ä—É–≥–æ–µ',
]

const ROLE_NAMES: Record<string, string> = {
  designer: '–î–∏–∑–∞–π–Ω–µ—Ä',
  smm_manager: '–°–ú–ú-–º–µ–Ω–µ–¥–∂–µ—Ä',
  admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
  digital: 'Digital',
}

const TYPE_ICONS: Record<string, string> = {
  Motion: 'üéûÔ∏è',
  '–°—Ç–∞—Ç–∏–∫–∞': 'üñºÔ∏è',
  '–í–∏–¥–µ–æ': 'üé¨',
  '–ö–∞—Ä—É—Å–µ–ª—å': 'üñºÔ∏è',
  '–î—Ä—É–≥–æ–µ': 'üìå',
  '–ü—É–±–ª–∏–∫–∞—Ü–∏—è': 'üìù',
  '–ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω': 'üìÖ',
  '–û—Ç—á–µ—Ç': 'üìä',
  '–°—ä–µ–º–∫–∞': 'üìπ',
  '–í—Å—Ç—Ä–µ—á–∞': 'ü§ù',
  '–°—Ç—Ä–∞—Ç–µ–≥–∏—è': 'üìà',
  '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è': 'üé§',
  '–ê–¥–º–∏–Ω –∑–∞–¥–∞—á–∏': 'üóÇÔ∏è',
  '–ê–Ω–∞–ª–∏–∑': 'üîé',
  '–ë—Ä–∏—Ñ–∏–Ω–≥': 'üìã',
  '–°—Ü–µ–Ω–∞—Ä–∏–π': 'üìú',
  '–°—ä–µ–º–∫–∏': 'üé•',
  '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è': 'üí∞',
  '–î–æ–∫—É–º–µ–Ω—Ç—ã': 'üìÑ',
  '–†–∞–±–æ—Ç–∞ —Å –∫–∞–¥—Ä–∞–º–∏': 'üë•',
  '–ü–ª–∞–Ω–µ—Ä–∫–∞': 'üóìÔ∏è',
  '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞—á–∏': 'üõ†Ô∏è',
  '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ': 'üßë‚Äçüíº',
  '–î–æ–≥–æ–≤–æ—Ä': '‚úçÔ∏è',
  '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã': 'üéØ',
  '–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': 'üìà',
  'A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': 'üß™',
  '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏': 'üìä',
  '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π': 'üí∞',
  'Email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥': 'üìß',
  '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞': 'üîç',
  '–¢–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞': 'üéØ',
  'SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è': 'üîç',
  '–í–µ–±-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞': 'üìä',
}

const FORMAT_ICONS: Record<string, string> = {
  '9:16': 'üì±',
  '1:1': 'üî≤',
  '4:5': 'üñºÔ∏è',
  '16:9': 'üéûÔ∏è',
  '–î—Ä—É–≥–æ–µ': 'üìå',
}

const formatDate = (iso?: string) => {
  if (!iso) return ''
  return formatDateShortUTC5(iso)
}

const timeLeft = (iso?: string) => {
  if (!iso) return '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
  const now = Date.now()
  const target = new Date(iso).getTime()
  const diff = target - now
  if (diff <= 0) return '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'
  const hours = Math.floor(diff / 3600000)
  const minutes = Math.floor((diff % 3600000) / 60000)
  const seconds = Math.floor((diff % 60000) / 1000)
  const parts = [] as string[]
  if (hours) parts.push(`${hours}—á`)
  if (minutes || hours) parts.push(`${minutes}–º`)
  parts.push(`${seconds}—Å`)
  return parts.join(' ')
}

const renderDeadline = (t: Task) => {
  if (t.status === 'done') {
    if (t.deadline && t.finished_at && new Date(t.finished_at) > new Date(t.deadline)) {
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
          üö´ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
        </span>
      )
    }
    return ''
  }
  
  if (!t.deadline) {
    return (
      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
        üìã –ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞
      </span>
    )
  }

  const txt = timeLeft(t.deadline)
  if (txt === '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ') {
    return (
      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
        üö´ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
      </span>
    )
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
  const now = Date.now()
  const deadline = new Date(t.deadline).getTime()
  const timeLeftMs = deadline - now
  const hoursLeft = timeLeftMs / 3600000

  if (hoursLeft < 24) {
    return (
      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
        ‚ö° {txt}
      </span>
    )
  } else if (hoursLeft < 48) {
    return (
      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
        ‚ö†Ô∏è {txt}
      </span>
    )
  } else {
    return (
      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
        ‚úÖ {txt}
      </span>
    )
  }
}

// Helper function to translate recurrence types
const getRecurrenceTypeLabel = (type: string): string => {
  switch (type) {
    case 'daily': return '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'
    case 'weekly': return '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'
    case 'monthly': return '–ï–∂–µ–º–µ—Å—è—á–Ω–æ'
    default: return type
  }
}

function Tasks() {
  const [tasks, setTasks] = useState<Task[]>([])
  const [showModal, setShowModal] = useState(false)
  const [selectedTask, setSelectedTask] = useState<Task | null>(null)
  const [isEditing, setIsEditing] = useState(false)
  const [title, setTitle] = useState('')
  const [description, setDescription] = useState('')
  const [executorId, setExecutorId] = useState('')
  const [deadlineTime, setDeadlineTime] = useState('')
  const [deadlineDate, setDeadlineDate] = useState('')
  const [project, setProject] = useState('')
  const [taskType, setTaskType] = useState('')
  const [taskFormat, setTaskFormat] = useState('')
  const [executorRole, setExecutorRole] = useState('')
  const [highPriority, setHighPriority] = useState(false)
  const [isRecurring, setIsRecurring] = useState(false)
  const [recurrenceType, setRecurrenceType] = useState('')
  const [recurrenceTime, setRecurrenceTime] = useState('')
  const [recurrenceDays, setRecurrenceDays] = useState<number[]>([])
  const [users, setUsers] = useState<User[]>([])
  const [projects, setProjects] = useState<{id: number; name: string}[]>([])

  const [filterRole, setFilterRole] = usePersistedState('filter_tasks_role', '')
  // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ usePersistedState –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const [filterUser, setFilterUser] = useState(() => {
    try {
      const stored = localStorage.getItem('filter_tasks_user')
      if (stored !== null) {
        const parsed = JSON.parse(stored)
        console.log('Initial filterUser from localStorage:', parsed)
        return parsed
      }
    } catch (e) {
      console.warn('Error parsing filterUser from localStorage:', e)
    }
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    const userId = Number(localStorage.getItem('userId'))
    return userId ? String(userId) : ''
  })
  
  const [hasInitialized, setHasInitialized] = useState(false)
  const [filterDate, setFilterDate] = usePersistedState('filter_tasks_date', 'all')
  const [customDate, setCustomDate] = usePersistedState('filter_tasks_custom_date', '')
  const [filterStatus, setFilterStatus] = usePersistedState('filter_tasks_status', 'active')
  const [filterProject, setFilterProject] = usePersistedState('filter_tasks_project', '')

  const role = localStorage.getItem('role') || ''
  const userId = Number(localStorage.getItem('userId'))

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º filterUser –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    console.log('Saving filterUser to localStorage:', filterUser)
    localStorage.setItem('filter_tasks_user', JSON.stringify(filterUser))
  }, [filterUser])

  useEffect(() => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞—Ö–æ–¥–µ, –µ—Å–ª–∏ –≤ localStorage –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if (!hasInitialized && userId) {
      const stored = localStorage.getItem('filter_tasks_user')
      console.log('Initialization check:', { stored, filterUser, userId })
      
      // –ï—Å–ª–∏ –≤ localStorage –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (stored === null) {
        console.log('No stored filter, setting default user filter to:', String(userId))
        setFilterUser(String(userId))
      }
      setHasInitialized(true)
    }
  }, [userId, hasInitialized])

  const allowedUsers = Array.isArray(users) ? users.filter((u) => {
    if (role === 'admin') return true
    if (role === 'designer') return u.role === 'designer'
    if (role === 'digital') return u.role === 'digital'
    if (role === 'smm_manager')
      return u.role === 'designer' || u.role === 'smm_manager' || u.role === 'digital'
    return false
  }) : []

  const allowedRoles = () => {
    if (role === 'admin') return ['designer', 'smm_manager', 'digital', 'admin']
    if (role === 'smm_manager') return ['designer', 'smm_manager', 'digital']
    if (role === 'digital') return ['digital']
    if (role === 'designer') return ['designer']
    return []
  }

  const getExecutorName = (id?: number) => {
    if (!Array.isArray(users) || !id) return ''
    const u = users.find((x) => x.id === id)
    return u ? u.name : ''
  }

  const getUserName = (id?: number) => {
    if (!Array.isArray(users) || !id) return ''
    const u = users.find((x) => x.id === id)
    return u ? u.name : ''
  }
  
  useEffect(() => {
    const token = localStorage.getItem('token')
    
    if (!token) {
      setTasks([])
      setUsers([])
      setProjects([])
      return
    }

    fetch(`${API_URL}/tasks/`, {
      headers: { Authorization: `Bearer ${token}` },
    })
      .then((res) => {
        if (res.ok) return res.json()
        throw new Error('Unauthorized')
      })
      .then((data) => {
        console.log('Tasks from API:', data);
        setTasks(Array.isArray(data) ? data : []);
      })
      .catch(() => setTasks([]))
      
    fetch(`${API_URL}/users/`, { headers: { Authorization: `Bearer ${token}` } })
      .then((res) => {
        if (res.ok) return res.json()
        throw new Error('Unauthorized')
      })
      .then((data) => setUsers(Array.isArray(data) ? data : []))
      .catch(() => setUsers([]))
      
    fetch(`${API_URL}/projects/`, { headers: { Authorization: `Bearer ${token}` } })
      .then((res) => {
        if (res.ok) return res.json()
        throw new Error('Unauthorized')
      })
      .then((data) => {
        const activeProjects = Array.isArray(data) ? data.filter((p: any) => !p.is_archived) : []
        setProjects(activeProjects)
      })
      .catch(() => setProjects([]))
  }, [])

  useEffect(() => {
    const id = setInterval(() => {
      setTasks((ts) => [...ts])
    }, 1000)
    return () => clearInterval(id)
  }, [])

  const filteredTasks = Array.isArray(tasks) ? tasks.filter((t) => {
    if (!Array.isArray(users)) return true
    
    
    const execRole = users.find((u) => u.id === t.executor_id)?.role
    if (role === 'designer' && execRole !== 'designer') return false
    if (role === 'digital' && execRole !== 'digital') return false
    if (
      role === 'smm_manager' &&
      execRole !== 'designer' &&
      execRole !== 'smm_manager' &&
      execRole !== 'digital'
    )
      return false
    if (filterStatus !== 'all') {
      if (filterStatus === 'new' && t.status !== 'new') return false
      if (filterStatus === 'in_progress' && t.status !== 'in_progress') return false
      if (filterStatus === 'done' && t.status !== 'done') return false
    }
    if (filterRole) {
      const exec = users.find((u) => u.id === t.executor_id)
      if (!exec || exec.role !== filterRole) return false
    }
    if (filterUser && String(t.executor_id) !== filterUser) return false
    if (filterProject && t.project !== filterProject) return false
    if (filterDate !== 'all') {
      const created = new Date(t.created_at)
      const now = new Date()
      const diff = now.getTime() - created.getTime()
      if (filterDate === 'today' && diff > 86400000) return false
      if (filterDate === 'week' && diff > 7 * 86400000) return false
      if (filterDate === 'month' && diff > 30 * 86400000) return false
      if (filterDate === 'custom' && customDate) {
        const sel = new Date(customDate)
        if (
          created.getFullYear() !== sel.getFullYear() ||
          created.getMonth() !== sel.getMonth() ||
          created.getDate() !== sel.getDate()
        )
          return false
      }
    }
    return true
  }) : []

  const sortedTasks = filteredTasks
    .slice()
    .sort((a, b) => {
      // First sort by priority: high priority tasks first
      if (a.high_priority && !b.high_priority) return -1
      if (!a.high_priority && b.high_priority) return 1
      
      // Then sort by creation date: newest first
      const dateA = new Date(a.created_at).getTime()
      const dateB = new Date(b.created_at).getTime()
      return dateB - dateA
    })

  const validateDeadline = () => {
    const execRole = executorId && Array.isArray(users) ? users.find(u => u.id === Number(executorId))?.role : role
    if (execRole === 'designer') {
      if (!deadlineTime) return true
      const now = new Date()
      if (now.getHours() >= 17) {
        const today = new Date()
        const [h, m] = deadlineTime.split(':').map(Number)
        const dl = new Date(today)
        dl.setHours(h, m, 0, 0)
        const next = new Date(now)
        next.setDate(now.getDate() + 1)
        next.setHours(9,0,0,0)
        if (dl < next) return false
      }
    }
    return true
  }

  const createTask = async () => {
    if (!validateDeadline()) {
      alert('–ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –¥–∏–∑–∞–π–Ω–µ—Ä—É —Å —Ç–∞–∫–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º –ø–æ—Å–ª–µ 17:00')
      return
    }
    let deadlineStr: string | undefined
    if (deadlineTime.length === 5) {
      if (isRecurring) {
        // –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        const now = new Date()
        const [hh, mm] = deadlineTime.split(':').map(Number)
        const today = new Date(now)
        today.setHours(hh, mm, 0, 0)
        
        const y = today.getFullYear()
        const m = String(today.getMonth() + 1).padStart(2, '0')
        const d = String(today.getDate()).padStart(2, '0')
        deadlineStr = `${y}-${m}-${d}T${deadlineTime}`
      } else if (deadlineDate) {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        deadlineStr = `${deadlineDate}T${deadlineTime}`
      }
    }
    const payload = {
      title,
      description,
      project: project || undefined,
      task_type: taskType || undefined,
      task_format: taskFormat || undefined,
      executor_id: executorId ? Number(executorId) : undefined,
      deadline: deadlineStr,
      high_priority: highPriority,
      is_recurring: isRecurring,
      recurrence_type: isRecurring ? recurrenceType : undefined,
      recurrence_time: isRecurring ? recurrenceTime : undefined,
      recurrence_days: isRecurring && recurrenceDays.length > 0 ? recurrenceDays.join(',') : undefined,
    }
    const token = localStorage.getItem('token')
    await fetch(`${API_URL}/tasks/`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(payload),
    })
    setShowModal(false)
    setSelectedTask(null)
    setIsEditing(false)
    setIsEditing(false)
    setTitle('')
    setDescription('')
    setProject('')
    setTaskType('')
    setTaskFormat('')
    setExecutorId('')
    setExecutorRole('')
    setDeadlineTime('')
    setDeadlineDate('')
    setHighPriority(false)
    setIsRecurring(false)
    setRecurrenceType('')
    setRecurrenceDays([])
    const res = await fetch(`${API_URL}/tasks/`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    })
    const data = await res.json()
    console.log('Tasks refreshed:', data);
    setTasks(Array.isArray(data) ? data : [])
  }

  const saveTask = async () => {
    if (!selectedTask) return
    if (!validateDeadline()) {
      alert('–ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –¥–∏–∑–∞–π–Ω–µ—Ä—É —Å —Ç–∞–∫–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º –ø–æ—Å–ª–µ 17:00')
      return
    }
    let deadlineStr: string | undefined
    if (deadlineTime.length === 5) {
      if (isRecurring) {
        // –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        const now = new Date()
        const [hh, mm] = deadlineTime.split(':').map(Number)
        const today = new Date(now)
        today.setHours(hh, mm, 0, 0)
        
        const y = today.getFullYear()
        const m = String(today.getMonth() + 1).padStart(2, '0')
        const d = String(today.getDate()).padStart(2, '0')
        deadlineStr = `${y}-${m}-${d}T${deadlineTime}`
      } else if (deadlineDate) {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        deadlineStr = `${deadlineDate}T${deadlineTime}`
      }
    }
    const payload = {
      title,
      description,
      project: project || undefined,
      task_type: taskType || undefined,
      task_format: taskFormat || undefined,
      executor_id: executorId ? Number(executorId) : undefined,
      deadline: deadlineStr,
      high_priority: highPriority,
      is_recurring: isRecurring,
      recurrence_type: isRecurring ? recurrenceType : undefined,
      recurrence_time: isRecurring ? recurrenceTime : undefined,
      recurrence_days: isRecurring && recurrenceDays.length > 0 ? recurrenceDays.join(',') : undefined,
    }
    const token = localStorage.getItem('token')
    await fetch(`${API_URL}/tasks/${selectedTask.id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(payload),
    })
    setShowModal(false)
    setSelectedTask(null)
    setTitle('')
    setDescription('')
    setProject('')
    setTaskType('')
    setTaskFormat('')
    setExecutorId('')
    setExecutorRole('')
    setDeadlineTime('')
    setDeadlineDate('')
    setHighPriority(false)
    setIsRecurring(false)
    setRecurrenceType('')
    setRecurrenceDays([])
    const res = await fetch(`${API_URL}/tasks/`, {
      headers: { Authorization: `Bearer ${token}` },
    })
    const data = await res.json()
    console.log('Tasks after save:', data);
    setTasks(Array.isArray(data) ? data : [])
  }

  const deleteTask = async (id: number) => {
    const token = localStorage.getItem('token')
    await fetch(`${API_URL}/tasks/${id}`, {
      method: 'DELETE',
      headers: { Authorization: `Bearer ${token}` },
    })
    setTasks(Array.isArray(tasks) ? tasks.filter((t) => t.id !== id) : [])
  }

  const togglePriority = async (id: number, currentPriority: boolean) => {
    try {
      console.log('Toggling priority for task', id, 'from', currentPriority, 'to', !currentPriority)
      const token = localStorage.getItem('token')
      const response = await fetch(`${API_URL}/tasks/${id}/priority`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          high_priority: !currentPriority
        })
      })
      
      if (!response.ok) {
        console.error('Failed to toggle priority:', response.status, response.statusText)
        const errorText = await response.text()
        console.error('Error response:', errorText)
        return
      }
      
      console.log('Priority toggled successfully, updating local state')
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞
      setTasks(prevTasks => {
        if (!Array.isArray(prevTasks)) return []
        const updatedTasks = prevTasks.map(t => 
          t.id === id ? { ...t, high_priority: !currentPriority } : t
        )
        console.log('Updated tasks:', updatedTasks.find(t => t.id === id))
        return [...updatedTasks] // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞
      })
      
      console.log('Local state updated')
    } catch (error) {
      console.error('Error toggling priority:', error)
    }
  }

  const acceptTask = async (id: number) => {
    const token = localStorage.getItem('token')
    const res = await fetch(`${API_URL}/tasks/${id}/accept`, {
      method: 'PATCH',
      headers: { Authorization: `Bearer ${token}` },
    })
    if (res.ok) {
      const updated = await res.json()
      setTasks(Array.isArray(tasks) ? tasks.map((t) => (t.id === id ? updated : t)) : [])
    }
  }

  const toggleStatus = async (id: number, status: string) => {
    const token = localStorage.getItem('token')
    const res = await fetch(`${API_URL}/tasks/${id}/status?status=${status}`, {
      method: 'PATCH',
      headers: { Authorization: `Bearer ${token}` },
    })
    if (res.ok) {
      const updated = await res.json()
      setTasks(Array.isArray(tasks) ? tasks.map((t) => (t.id === id ? updated : t)) : [])
    }
  }

  return (
    <div className="w-full overflow-hidden bg-gray-50 min-h-screen">
      <div className="bg-white shadow-sm border-b p-6">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏</h1>
            <p className="text-gray-600 mt-1">–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã</p>
          </div>
          <button
            className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-6 py-3 rounded-lg font-medium shadow-lg transform hover:scale-105 transition-all duration-200 flex items-center space-x-2"
            onClick={() => {
              setSelectedTask(null)
              setIsEditing(true)
              setTitle('')
              setDescription('')
              setProject('')
              setTaskType('')
              setTaskFormat('')
              setExecutorId('')
              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞
              const availableRoles = allowedRoles()
              if (availableRoles.length === 1) {
                setExecutorRole(availableRoles[0])
              } else {
                setExecutorRole('')
              }
              setHighPriority(false)
                        setDeadlineTime('')
    setDeadlineDate('')
              setShowModal(true)
            }}
          >
            <span>+</span>
            <span>–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É</span>
          </button>
        </div>
        
        {/* –õ–µ–≥–µ–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ */}
        <div className="flex items-center gap-6 mt-4 p-3 bg-gray-50 rounded-lg">
          <span className="text-sm font-medium text-gray-700">–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á:</span>
          <div className="flex flex-wrap items-center gap-4">
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 rounded-full bg-blue-500"></div>
              <span className="text-sm text-gray-600">–ù–æ–≤–∞—è</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
              <span className="text-sm text-gray-600">–í —Ä–∞–±–æ—Ç–µ</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 rounded-full bg-green-500"></div>
              <span className="text-sm text-gray-600">–í—ã–ø–æ–ª–Ω–µ–Ω–∞</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 rounded-full bg-red-500"></div>
              <span className="text-sm text-gray-600">–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞</span>
            </div>
          </div>
        </div>
      </div>
      <div className="bg-white p-6 shadow-sm border-b">
        <div className="flex flex-wrap gap-4 items-center">
          <div className="flex flex-wrap gap-3">
            <select
              className="bg-white border border-gray-300 rounded-lg px-4 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
              value={filterProject}
              onChange={(e) => setFilterProject(e.target.value)}
            >
              <option value="">–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã</option>
              {Array.isArray(projects) && projects.map(p => (
                <option key={p.id} value={p.name}>{p.name}</option>
              ))}
            </select>
            {role !== 'designer' && (
              <select
                className="bg-white border border-gray-300 rounded-lg px-4 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                value={filterRole}
                onChange={(e) => setFilterRole(e.target.value)}
              >
                <option value="">–í—Å–µ —Ä–æ–ª–∏</option>
                <option value="designer">{ROLE_NAMES.designer}</option>
                <option value="smm_manager">{ROLE_NAMES.smm_manager}</option>
                <option value="digital">{ROLE_NAMES.digital}</option>
                {role === 'admin' && (
                  <option value="admin">{ROLE_NAMES.admin}</option>
                )}
              </select>
            )}
            <select
              className="bg-white border border-gray-300 rounded-lg px-4 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
              value={filterUser}
              onChange={(e) => {
                const newValue = e.target.value
                console.log('onChange: Changing filterUser from', filterUser, 'to', newValue, 'type:', typeof newValue)
                setFilterUser(newValue)
              }}
            >
              <option value="">–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</option>
              {Array.isArray(users) && users
                .filter((u) =>
                  role === 'admin'
                    ? filterRole
                      ? u.role === filterRole
                      : true
                    : u.role !== 'admin' && (filterRole ? u.role === filterRole : true)
                )
                .map((u) => (
                  <option key={u.id} value={u.id}>
                    {u.name}
                  </option>
                ))}
            </select>
            <select
              className="bg-white border border-gray-300 rounded-lg px-4 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
              value={filterDate}
              onChange={(e) => setFilterDate(e.target.value)}
            >
              <option value="all">–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è</option>
              <option value="today">–ó–∞ —Å–µ–≥–æ–¥–Ω—è</option>
              <option value="week">–ó–∞ –Ω–µ–¥–µ–ª—é</option>
              <option value="month">–ó–∞ –º–µ—Å—è—Ü</option>
              <option value="custom">–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É</option>
            </select>
            {filterDate === 'custom' && (
              <input
                type="date"
                className="bg-white border border-gray-300 rounded-lg px-4 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                value={customDate}
                onChange={(e) => setCustomDate(e.target.value)}
              />
            )}
            <select
              className="bg-white border border-gray-300 rounded-lg px-4 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
            >
              <option value="new">–ù–æ–≤—ã–µ</option>
              <option value="in_progress">–í —Ä–∞–±–æ—Ç–µ</option>
              <option value="done">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</option>
              <option value="all">–í—Å–µ</option>
            </select>
          </div>
          <div className="ml-auto bg-gradient-to-r from-gray-100 to-gray-200 px-4 py-2 rounded-full">
            <span className="text-sm font-medium text-gray-700">–í—Å–µ–≥–æ: {sortedTasks.length}</span>
          </div>
        </div>
      </div>

      <div className="p-6">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider min-w-[200px]">
                    –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider min-w-[120px]">
                    –ü—Ä–æ–µ–∫—Ç
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider min-w-[140px]">
                    –¢–∏–ø –∑–∞–¥–∞—á–∏
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider min-w-[120px]">
                    –ê–≤—Ç–æ—Ä
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider min-w-[120px]">
                    –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider min-w-[140px]">
                    –°–æ–∑–¥–∞–Ω–∞
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider min-w-[120px]">
                    –î–µ–¥–ª–∞–π–Ω
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider min-w-[160px]">
                    –î–µ–π—Å—Ç–≤–∏—è
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {sortedTasks.map((t) => (
                  <tr
                    key={t.id}
                    className={`hover:bg-gray-50 transition-colors duration-150 ${
                      ''
                    }`}
                  >
                    <td className="px-6 py-4">
                      <div className="flex items-center space-x-3">
                        <div className="flex items-center space-x-2">
                          <div className={`w-3 h-3 rounded-full ${
                            t.status === 'new' ? 'bg-blue-500' :
                            t.status === 'in_progress' ? 'bg-yellow-500' :
                            t.status === 'done' ? 'bg-green-500' : 
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ—Å—Ç—å
                            (t.deadline && new Date(t.deadline) < new Date()) ? 'bg-red-500' : 
                            'bg-gray-400'
                          }`}></div>
                        </div>
                        <div
                          className="text-sm font-medium text-gray-900 cursor-pointer hover:text-blue-600 transition-colors"
                          onClick={() => {
                            setSelectedTask(t)
                            setIsEditing(false)
                            setShowModal(true)
                            setTitle(t.title)
                            setDescription(t.description || '')
                            setProject(t.project || '')
                            setTaskType(t.task_type || '')
                            setTaskFormat(t.task_format || '')
                            setExecutorId(t.executor_id ? String(t.executor_id) : '')
                            setExecutorRole(Array.isArray(users) ? (users.find(u => u.id === t.executor_id)?.role || '') : '')
                            setHighPriority(t.high_priority || false)
                            setIsRecurring(t.is_recurring || false)
                            setRecurrenceType(t.recurrence_type || '')
                            // –ü–∞—Ä—Å–∏–º recurrence_days –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –º–∞—Å—Å–∏–≤
                            if (t.recurrence_days) {
                              const days = t.recurrence_days.split(',').map(d => parseInt(d.trim())).filter(d => !isNaN(d))
                              setRecurrenceDays(days)
                            } else {
                              setRecurrenceDays([])
                            }
                            setRecurrenceTime(t.recurrence_time || '')
                            if (t.deadline) {
                              const d = new Date(t.deadline)
                              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–æ UTC
                              const hours = d.getHours().toString().padStart(2, '0')
                              const minutes = d.getMinutes().toString().padStart(2, '0')
                              setDeadlineTime(`${hours}:${minutes}`)
                              
                              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞
                              const year = d.getFullYear()
                              const month = (d.getMonth() + 1).toString().padStart(2, '0')
                              const day = d.getDate().toString().padStart(2, '0')
                              setDeadlineDate(`${year}-${month}-${day}`)
                            } else {
                              setDeadlineTime('')
                              setDeadlineDate('')
                            }
                          }}
                        >
                          <div className="truncate max-w-[180px] flex items-center gap-2">
                            <button
                              className={`inline-flex items-center justify-center w-5 h-5 hover:scale-110 transition-all duration-200 ${
                                t.high_priority 
                                  ? 'text-yellow-500 drop-shadow-[0_0_8px_rgba(250,204,21,0.4)]' 
                                  : 'text-gray-400 hover:text-yellow-400'
                              }`}
                              title={t.high_priority ? '–£–±—Ä–∞—Ç—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç' : '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç'}
                              onClick={(e) => {
                                e.stopPropagation() // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                                togglePriority(t.id, t.high_priority || false)
                              }}
                            >
                              <svg 
                                width="16" 
                                height="16" 
                                viewBox="0 0 24 24" 
                                fill={t.high_priority ? "currentColor" : "none"}
                                stroke="currentColor" 
                                strokeWidth="2"
                              >
                                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                              </svg>
                            </button>
                            {t.title}
                            {t.is_recurring && (
                              <span className="text-blue-600 text-xs" title="–ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞">üîÑ</span>
                            )}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="text-sm text-gray-900">
                        <div className="truncate max-w-[100px]">{t.project || '-'}</div>
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex items-center space-x-2">
                        <span className="text-lg">{TYPE_ICONS[t.task_type || ''] || 'üìã'}</span>
                        <span className="text-sm text-gray-900 truncate max-w-[100px]">{t.task_type || '-'}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="text-sm text-gray-900">
                        <div className="truncate max-w-[100px]">{getUserName(t.author_id) || '-'}</div>
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="text-sm text-gray-900">
                        <div className="truncate max-w-[100px]">{getExecutorName(t.executor_id) || '-'}</div>
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="text-sm text-gray-900">
                        <div className="truncate max-w-[120px]">{formatDate(t.created_at)}</div>
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="text-sm">
                        {t.status === 'new' ? (
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                            üÜï –ù–æ–≤–∞—è
                          </span>
                        ) : t.status === 'done' ? (
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            ‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–æ
                          </span>
                        ) : (
                          renderDeadline(t)
                        )}
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex gap-2 justify-start flex-wrap">
                        {(() => {
                          const isOverdue = t.deadline && t.status !== 'done' && new Date(t.deadline) < new Date()
                          const canManage = t.executor_id === userId || t.author_id === userId || role === 'admin' || isOverdue
                          
                          // –î–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
                          if (t.status === 'new') {
                            return (
                              <>
                                {canManage && (
                                  <button
                                    className="inline-flex items-center px-3 py-1.5 border border-red-300 text-xs font-medium rounded-md text-red-700 bg-red-50 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors"
                                    onClick={() => deleteTask(t.id)}
                                  >
                                    –£–¥–∞–ª–∏—Ç—å
                                  </button>
                                )}
                                {t.executor_id === userId && (
                                  <button
                                    className="inline-flex items-center px-3 py-1.5 border border-blue-300 text-xs font-medium rounded-md text-blue-700 bg-blue-50 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                                    onClick={() => acceptTask(t.id)}
                                  >
                                    –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É
                                  </button>
                                )}
                              </>
                            )
                          }
                          // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á (–≤ —Ä–∞–±–æ—Ç–µ)
                          else if (t.status === 'in_progress') {
                            return (
                              <>
                                {canManage && (
                                  <button
                                    className="inline-flex items-center px-3 py-1.5 border border-red-300 text-xs font-medium rounded-md text-red-700 bg-red-50 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors"
                                    onClick={() => deleteTask(t.id)}
                                  >
                                    –£–¥–∞–ª–∏—Ç—å
                                  </button>
                                )}
                                {canManage && (
                                  <button
                                    className="inline-flex items-center px-3 py-1.5 border border-green-300 text-xs font-medium rounded-md text-green-700 bg-green-50 hover:bg-green-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors"
                                    onClick={() => toggleStatus(t.id, 'done')}
                                  >
                                    –ó–∞–≤–µ—Ä—à–∏—Ç—å
                                  </button>
                                )}
                                {isOverdue && !canManage && (
                                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                    –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
                                  </span>
                                )}
                              </>
                            )
                          }
                          // –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                          else {
                            return (
                              (t.executor_id === userId || t.author_id === userId || role === 'admin') && (
                                <button
                                  className="inline-flex items-center px-3 py-1.5 border border-yellow-300 text-xs font-medium rounded-md text-yellow-700 bg-yellow-50 hover:bg-yellow-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 transition-colors"
                                  onClick={() => toggleStatus(t.id, 'in_progress')}
                                >
                                  –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å
                                </button>
                              )
                            )
                          }
                        })()}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          {sortedTasks.length === 0 && (
            <div className="text-center py-12">
              <div className="text-gray-400 text-6xl mb-4">üìã</div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">–ù–µ—Ç –∑–∞–¥–∞—á</h3>
              <p className="text-gray-500">–ü–æ–∫–∞ —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!</p>
            </div>
          )}
        </div>
      </div>

      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
          <div className="bg-white p-6 rounded-lg w-[40rem] max-h-[90vh] overflow-y-auto shadow-lg space-y-4">
            <h2 className="text-xl mb-2">
              {isEditing ? (selectedTask ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É' : '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞') : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ'}
            </h2>
            
            {/* –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º —Ä–æ–ª—å, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –ø—Ä–æ–µ–∫—Ç, –∞ –∑–∞—Ç–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ */}
            {isEditing && !selectedTask ? (
              <>
                {/* –í—ã–±–æ—Ä —Ä–æ–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Ä–æ–ª–∏ –∏–ª–∏ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤) */}
                {(allowedRoles().length > 1 || role === 'designer') && (
                  <select
                    className="border p-2 w-full mb-2"
                    value={executorRole}
                    onChange={(e) => {
                      setExecutorRole(e.target.value)
                      setExecutorId('')
                    }}
                  >
                    <option value="">
                      {allowedRoles().length === 1 ? 
                        `–†–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: ${ROLE_NAMES[allowedRoles()[0]]}` : 
                        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'
                      }
                    </option>
                    {allowedRoles().map((r) => (
                      <option key={r} value={r}>
                        {ROLE_NAMES[r]}
                      </option>
                    ))}
                  </select>
                )}
                
                {/* –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è */}
                <select
                  className="border p-2 w-full mb-2"
                  value={executorId}
                  onChange={(e) => setExecutorId(e.target.value)}
                  disabled={allowedRoles().length > 1 && !executorRole}
                >
                  <option value="" disabled>
                    {allowedRoles().length > 1 && !executorRole ? 
                      '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' : 
                      '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'
                    }
                  </option>
                  {allowedUsers
                    .filter((u) => {
                      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–π
                      if (executorRole) return u.role === executorRole
                      // –ï—Å–ª–∏ —Ä–æ–ª—å –æ–¥–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–π —Ä–æ–ª–∏
                      if (allowedRoles().length === 1) return u.role === allowedRoles()[0]
                      // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                      return true
                    })
                    .map((u) => (
                      <option key={u.id} value={u.id}>
                        {u.name} ({ROLE_NAMES[u.role]})
                      </option>
                    ))}
                </select>
                
                {/* –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è) */}
                {executorId && (
                  <select
                    className="border p-2 w-full mb-2"
                    value={project}
                    onChange={(e) => setProject(e.target.value)}
                  >
                    <option value="">–ü—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω</option>
                    {Array.isArray(projects) && projects.map(p => (
                      <option key={p.id} value={p.name}>{p.name}</option>
                    ))}
                  </select>
                )}
                
                {/* –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω) */}
                {executorId && (
                  <select
                    className="border p-2 w-full mb-2"
                    value={taskType}
                    onChange={(e) => setTaskType(e.target.value)}
                  >
                    <option value="">–¢–∏–ø –∑–∞–¥–∞—á–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω</option>
                    {(
                      (Array.isArray(users) && users.find((u) => u.id === Number(executorId))?.role || role) === 'designer'
                        ? DESIGNER_TYPES
                        : (Array.isArray(users) && users.find((u) => u.id === Number(executorId))?.role || role) === 'digital'
                        ? DIGITAL_TYPES
                        : (Array.isArray(users) && users.find((u) => u.id === Number(executorId))?.role || role) === 'admin'
                        ? ADMIN_TYPES
                        : MANAGER_TYPES
                    ).map((t) => (
                      <option key={t} value={t}>
                        {TYPE_ICONS[t]} {t}
                      </option>
                    ))}
                  </select>
                )}
                
                {/* –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤) */}
                {executorId && (Array.isArray(users) && users.find((u) => u.id === Number(executorId))?.role || role) === 'designer' && (
                  <select
                    className="border p-2 w-full mb-2"
                    value={taskFormat}
                    onChange={(e) => setTaskFormat(e.target.value)}
                  >
                    <option value="">–§–æ—Ä–º–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω</option>
                    {DESIGNER_FORMATS.map((f) => (
                      <option key={f} value={f}>
                        {FORMAT_ICONS[f]} {f}
                      </option>
                    ))}
                  </select>
                )}
                
                {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π) */}
                {executorId && (
                  <>
                    <input
                      className="border p-2 w-full mb-2"
                      placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
                      value={title}
                      onChange={(e) => setTitle(e.target.value)}
                    />
                    <textarea
                      className="border p-2 w-full mb-2"
                      placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
                      value={description}
                      onChange={(e) => setDescription(e.target.value)}
                    />
                  </>
                )}
              </>
            ) : (
              <>
                {/* –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Å—Ä–∞–∑—É */}
                <input
                  className="border p-2 w-full mb-2"
                  placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  disabled={!isEditing}
                />
                <textarea
                  className="border p-2 w-full mb-2"
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  disabled={!isEditing}
                />
                {isEditing && allowedRoles().length > 0 ? (
                  <>
                    {/* –í—ã–±–æ—Ä —Ä–æ–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Ä–æ–ª–∏ –∏–ª–∏ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤) */}
                    {(allowedRoles().length > 1 || role === 'designer') && (
                      <select
                        className="border p-2 w-full mb-2"
                        value={executorRole}
                        onChange={(e) => {
                          setExecutorRole(e.target.value)
                          setExecutorId('')
                        }}
                      >
                        <option value="">
                          {allowedRoles().length === 1 ? 
                            `–†–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: ${ROLE_NAMES[allowedRoles()[0]]}` : 
                            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'
                          }
                        </option>
                        {allowedRoles().map((r) => (
                          <option key={r} value={r}>
                            {ROLE_NAMES[r]}
                          </option>
                        ))}
                      </select>
                    )}
                    
                    {/* –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è */}
                    <select
                      className="border p-2 w-full mb-2"
                      value={executorId}
                      onChange={(e) => setExecutorId(e.target.value)}
                      disabled={allowedRoles().length > 1 && !executorRole}
                    >
                      <option value="" disabled>
                        {allowedRoles().length > 1 && !executorRole ? 
                          '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' : 
                          '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'
                        }
                      </option>
                      {allowedUsers
                        .filter((u) => {
                          // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–π
                          if (executorRole) return u.role === executorRole
                          // –ï—Å–ª–∏ —Ä–æ–ª—å –æ–¥–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–π —Ä–æ–ª–∏
                          if (allowedRoles().length === 1) return u.role === allowedRoles()[0]
                          // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                          return true
                        })
                        .map((u) => (
                          <option key={u.id} value={u.id}>
                            {u.name} ({ROLE_NAMES[u.role]})
                          </option>
                        ))}
                    </select>
                  </>
                ) : null}
                {executorId && isEditing ? (
                    <>
                      <select
                        className="border p-2 w-full mb-2"
                        value={project}
                        onChange={(e) => setProject(e.target.value)}
                      >
                        <option value="">–ü—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω</option>
                        {Array.isArray(projects) && projects.map(p => (
                          <option key={p.id} value={p.name}>{p.name}</option>
                        ))}
                      </select>
                      <select
                        className="border p-2 w-full mb-2"
                        value={taskType}
                        onChange={(e) => setTaskType(e.target.value)}
                      >
                        <option value="">–¢–∏–ø –∑–∞–¥–∞—á–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω</option>
                        {(
                          (Array.isArray(users) && users.find((u) => u.id === Number(executorId))?.role || role) === 'designer'
                            ? DESIGNER_TYPES
                            : (Array.isArray(users) && users.find((u) => u.id === Number(executorId))?.role || role) === 'digital'
                            ? DIGITAL_TYPES
                            : (Array.isArray(users) && users.find((u) => u.id === Number(executorId))?.role || role) === 'admin'
                            ? ADMIN_TYPES
                            : MANAGER_TYPES
                        ).map((t) => (
                          <option key={t} value={t}>
                            {TYPE_ICONS[t]} {t}
                          </option>
                        ))}
                      </select>
                      {(Array.isArray(users) && users.find((u) => u.id === Number(executorId))?.role || role) === 'designer' && (
                        <select
                          className="border p-2 w-full mb-2"
                          value={taskFormat}
                          onChange={(e) => setTaskFormat(e.target.value)}
                        >
                          <option value="">–§–æ—Ä–º–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω</option>
                          {DESIGNER_FORMATS.map((f) => (
                            <option key={f} value={f}>
                              {FORMAT_ICONS[f]} {f}
                            </option>
                          ))}
                        </select>
                      )}
                    </>
                ) : null}
              </>
            )}
            {executorId && !isEditing ? (
                <div className="space-y-1 mb-2">
                  <div>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {getExecutorName(selectedTask?.executor_id)}</div>
                  {project && <div>–ü—Ä–æ–µ–∫—Ç: {project}</div>}
                  {taskType && (
                    <div>
                      –¢–∏–ø –∑–∞–¥–∞—á–∏: {TYPE_ICONS[taskType]} {taskType}
                    </div>
                  )}
                  {taskFormat && (
                    <div>
                      –§–æ—Ä–º–∞—Ç: {FORMAT_ICONS[taskFormat]} {taskFormat}
                    </div>
                  )}
                  <div className="flex items-center gap-2">
                    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 
                    {selectedTask?.high_priority ? (
                      <span className="flex items-center gap-1 text-yellow-500">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" stroke="currentColor" strokeWidth="2">
                          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                        </svg>
                        –í—ã—Å–æ–∫–∏–π
                      </span>
                    ) : (
                      <span className="flex items-center gap-1 text-gray-400">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                        </svg>
                        –û–±—ã—á–Ω—ã–π
                      </span>
                    )}
                  </div>
                  <div>–í—Ä–µ–º—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏: {formatDateUTC5(selectedTask?.created_at || '')}</div>
                  {selectedTask?.accepted_at && (
                    <div>–í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É: {formatDeadline(selectedTask.accepted_at)}</div>
                  )}
                  {selectedTask?.deadline && (
                    <div>–î–µ–¥–ª–∞–π–Ω: {formatDeadline(selectedTask.deadline)}</div>
                  )}
                  {selectedTask?.finished_at && (
                    <div>–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {formatDeadline(selectedTask.finished_at)}</div>
                  )}
                  {selectedTask?.resume_count !== undefined && selectedTask.resume_count > 0 && (
                    <div className="flex items-center gap-2">
                      <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:</span>
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                        üîÑ {selectedTask.resume_count} —Ä–∞–∑{selectedTask.resume_count > 1 ? (selectedTask.resume_count > 4 ? '' : '–∞') : ''}
                      </span>
                    </div>
                  )}
                  <div>–ö—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É: {getUserName(selectedTask?.author_id)}</div>
                </div>
            ) : null}
            

            {/* –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç */}
            {isEditing && (
              <div className="flex items-center gap-2 mb-4">
                <input
                  type="checkbox"
                  id="highPriority"
                  className="w-4 h-4"
                  checked={highPriority}
                  onChange={(e) => setHighPriority(e.target.checked)}
                />
                <label htmlFor="highPriority" className="text-sm font-medium text-gray-700">
                  –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                </label>
              </div>
            )}

            {/* –ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞ */}
            {isEditing && (
              <div className="mb-4 p-4 border rounded-lg bg-gray-50">
                <div className="flex items-center gap-2 mb-3">
                  <input
                    type="checkbox"
                    id="isRecurring"
                    className="w-4 h-4"
                    checked={isRecurring}
                    onChange={(e) => setIsRecurring(e.target.checked)}
                  />
                  <label htmlFor="isRecurring" className="text-sm font-medium text-gray-700">
                    üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞
                  </label>
                </div>
                
                {isRecurring && (
                  <div className="ml-6">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –¢–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:
                    </label>
                    <select
                      className="border p-2 w-full rounded-md mb-3"
                      value={recurrenceType}
                      onChange={(e) => {
                        setRecurrenceType(e.target.value)
                        setRecurrenceDays([]) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞
                      }}
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</option>
                      <option value="daily">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</option>
                      <option value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</option>
                      <option value="monthly">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</option>
                    </select>
                    
                    {/* –í—ã–±–æ—Ä –¥–Ω–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è */}
                    {recurrenceType === 'daily' && (
                      <div className="mb-4">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          –î–Ω–∏ –Ω–µ–¥–µ–ª–∏:
                        </label>
                        <div className="flex flex-wrap gap-2">
                          {[
                            { value: 1, label: '–ü–Ω' },
                            { value: 2, label: '–í—Ç' },
                            { value: 3, label: '–°—Ä' },
                            { value: 4, label: '–ß—Ç' },
                            { value: 5, label: '–ü—Ç' },
                            { value: 6, label: '–°–±' },
                            { value: 7, label: '–í—Å' }
                          ].map(day => (
                            <label key={day.value} className="flex items-center gap-1">
                              <input
                                type="checkbox"
                                checked={recurrenceDays.includes(day.value)}
                                onChange={(e) => {
                                  if (e.target.checked) {
                                    setRecurrenceDays([...recurrenceDays, day.value])
                                  } else {
                                    setRecurrenceDays(recurrenceDays.filter(d => d !== day.value))
                                  }
                                }}
                              />
                              <span className="text-sm">{day.label}</span>
                            </label>
                          ))}
                        </div>
                        <p className="text-xs text-gray-500 mt-1">
                          –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                        </p>
                      </div>
                    )}
                    
                    {recurrenceType === 'weekly' && (
                      <div className="mb-4">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          –î–Ω–∏ –Ω–µ–¥–µ–ª–∏:
                        </label>
                        <div className="flex flex-wrap gap-2">
                          {[
                            { value: 1, label: '–ü–Ω' },
                            { value: 2, label: '–í—Ç' },
                            { value: 3, label: '–°—Ä' },
                            { value: 4, label: '–ß—Ç' },
                            { value: 5, label: '–ü—Ç' },
                            { value: 6, label: '–°–±' },
                            { value: 7, label: '–í—Å' }
                          ].map(day => (
                            <label key={day.value} className="flex items-center gap-1">
                              <input
                                type="checkbox"
                                checked={recurrenceDays.includes(day.value)}
                                onChange={(e) => {
                                  if (e.target.checked) {
                                    setRecurrenceDays([...recurrenceDays, day.value])
                                  } else {
                                    setRecurrenceDays(recurrenceDays.filter(d => d !== day.value))
                                  }
                                }}
                              />
                              <span className="text-sm">{day.label}</span>
                            </label>
                          ))}
                        </div>
                        <p className="text-xs text-gray-500 mt-1">
                          –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                        </p>
                      </div>
                    )}
                    
                    {recurrenceType === 'monthly' && (
                      <div className="mb-4">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          –î–µ–Ω—å –º–µ—Å—è—Ü–∞:
                        </label>
                        <select
                          className="border p-2 w-full rounded-md"
                          value={recurrenceDays.length > 0 ? recurrenceDays[0] : ''}
                          onChange={(e) => {
                            const day = parseInt(e.target.value)
                            if (day) {
                              setRecurrenceDays([day])
                            } else {
                              setRecurrenceDays([])
                            }
                          }}
                        >
                          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞</option>
                          {Array.from({ length: 31 }, (_, i) => i + 1).map(day => (
                            <option key={day} value={day}>{day}</option>
                          ))}
                        </select>
                        <p className="text-xs text-gray-500 mt-1">
                          –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                        </p>
                      </div>
                    )}
                    
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:
                    </label>
                    <input
                      type="time"
                      className="border p-2 w-full rounded-md"
                      value={recurrenceTime}
                      onChange={(e) => setRecurrenceTime(e.target.value)}
                      placeholder="16:45"
                    />
                    
                    <p className="text-xs text-gray-500 mt-1">
                      –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ —Å–µ–≥–æ–¥–Ω—è - —Å–æ–∑–¥–∞—Å—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è, –∏–Ω–∞—á–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥.
                    </p>
                  </div>
                )}
              </div>
            )}

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –∑–∞–¥–∞—á–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
            {!isEditing && selectedTask?.is_recurring && (
              <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                <div className="flex items-center gap-2 text-blue-800">
                  <span className="text-lg">üîÑ</span>
                  <div>
                    <div className="font-medium">–ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞</div>
                    <div className="text-sm">
                      –¢–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {getRecurrenceTypeLabel(selectedTask.recurrence_type)}
                    </div>
                    {selectedTask.recurrence_time && (
                      <div className="text-sm">
                        –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {selectedTask.recurrence_time}
                      </div>
                    )}
                    {selectedTask.recurrence_days && (
                      <div className="text-sm">
                        {selectedTask.recurrence_type === 'monthly' ? '–î–µ–Ω—å –º–µ—Å—è—Ü–∞:' : '–î–Ω–∏:'} {
                          selectedTask.recurrence_type === 'monthly' 
                            ? selectedTask.recurrence_days
                            : selectedTask.recurrence_days.split(',').map(d => {
                                const dayNames = { '1': '–ü–Ω', '2': '–í—Ç', '3': '–°—Ä', '4': '–ß—Ç', '5': '–ü—Ç', '6': '–°–±', '7': '–í—Å' }
                                return dayNames[d.trim()] || d.trim()
                              }).join(', ')
                        }
                      </div>
                    )}
                    {selectedTask.next_run_at && (
                      <div className="text-sm">
                        –°–ª–µ–¥—É—é—â–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {formatDeadline(selectedTask.next_run_at)}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* –î–µ–¥–ª–∞–π–Ω */}
            {isEditing && (
              <div className="mb-4">
                <h3 className="text-sm font-medium text-gray-700 mb-2">–î–µ–¥–ª–∞–π–Ω</h3>
                
                {/* –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è */}
                {isRecurring ? (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –í—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞:
                    </label>
                    <input
                      type="text"
                      className="border p-2 w-24"
                      placeholder="HH:MM"
                      value={deadlineTime}
                      onChange={(e) => {
                        let v = e.target.value.replace(/\D/g, '').slice(0, 4)
                        if (v.length >= 3) v = v.slice(0, 2) + ':' + v.slice(2)
                        setDeadlineTime(v)
                      }}
                    />
                  </div>
                ) : (
                  /* –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞—á –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è */
                  <div className="space-y-2">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞:
                      </label>
                      <input
                        type="date"
                        className="border p-2 rounded"
                        value={deadlineDate}
                        onChange={(e) => setDeadlineDate(e.target.value)}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –í—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞:
                      </label>
                      <input
                        type="text"
                        className="border p-2 w-24"
                        placeholder="HH:MM"
                        value={deadlineTime}
                        onChange={(e) => {
                          let v = e.target.value.replace(/\D/g, '').slice(0, 4)
                          if (v.length >= 3) v = v.slice(0, 2) + ':' + v.slice(2)
                          setDeadlineTime(v)
                        }}
                      />
                    </div>
                  </div>
                )}
              </div>
            )}

            <div className="flex justify-end">
              <button
                className="mr-2 px-4 py-1 border rounded"
                onClick={() => { setShowModal(false); setSelectedTask(null); setIsEditing(false); }}
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
              {!isEditing && selectedTask && (
                <button
                  className="mr-2 px-4 py-1 border rounded"
                  onClick={() => setIsEditing(true)}
                >
                  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
              )}
              {isEditing && (
                <button
                  className="bg-blue-500 text-white px-4 py-1 rounded"
                  onClick={selectedTask ? saveTask : createTask}
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default Tasks
