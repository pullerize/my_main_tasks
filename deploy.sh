#!/bin/bash

# üöÄ 8Bit Codex - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

echo "=========================================="
echo "üöÄ 8Bit Codex Production Deployment"
echo "–î–æ–º–µ–Ω: 8bit-task.site"
echo "=========================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
if [ ! -f .env ]; then
    error ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    info "–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example:"
    echo "  cp .env.example .env"
    echo "  nano .env"
    exit 1
fi

info "‚úì .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/engine/install/"
    exit 1
fi

info "‚úì Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
if ! docker compose version &> /dev/null; then
    error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    exit 1
fi

info "‚úì Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p certbot-www
mkdir -p agency_backend/uploads/leads
mkdir -p agency_backend/files
mkdir -p agency_backend/contracts
mkdir -p agency_backend/static/projects
mkdir -p agency_backend/static/digital

info "‚úì –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ .env
info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

check_env_var() {
    local var_name=$1
    local default_value=$2
    
    if grep -q "^${var_name}=${default_value}" .env; then
        warn "${var_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ò–∑–º–µ–Ω–∏—Ç–µ –≤ .env"
        return 1
    fi
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
WARNINGS=0

if ! check_env_var "SECRET_KEY" "CHANGE_THIS_TO_SECURE_RANDOM_STRING_32_CHARS"; then
    ((WARNINGS++))
fi

if ! check_env_var "POSTGRES_PASSWORD" "CHANGE_THIS_TO_SECURE_PASSWORD"; then
    ((WARNINGS++))
fi

if ! check_env_var "BOT_TOKEN" "your-telegram-bot-token-here"; then
    ((WARNINGS++))
fi

if [ $WARNINGS -gt 0 ]; then
    echo ""
    error "–ù–∞–π–¥–µ–Ω–æ $WARNINGS –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ .env!"
    echo ""
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

info "‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
echo ""
echo "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
echo "  1) –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ (—Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º SSL)"
echo "  2) –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
echo "  3) –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "  4) –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo "  5) –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
echo ""
read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): " -n 1 -r
echo ""

case $REPLY in
    1)
        info "=== –ü–ï–†–í–ò–ß–ù–û–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï ==="
        
        # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
        info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
        docker compose -f docker-compose.production.yml build
        
        # –ó–∞–ø—É—Å–∫ –ë–î
        info "–ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        docker compose -f docker-compose.production.yml up -d db
        sleep 10
        
        # –ó–∞–ø—É—Å–∫ backend –∏ frontend
        info "–ó–∞–ø—É—Å–∫ backend –∏ frontend..."
        docker compose -f docker-compose.production.yml up -d backend frontend
        sleep 5
        
        # –ó–∞–ø—É—Å–∫ Nginx –±–µ–∑ SSL
        info "–ó–∞–ø—É—Å–∫ Nginx –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SSL..."
        docker compose -f docker-compose.production.yml up -d nginx
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        info "–ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
        warn "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è Let's Encrypt:"
        read -p "Email: " LETSENCRYPT_EMAIL
        
        docker compose -f docker-compose.production.yml run --rm certbot certonly \
            --webroot \
            --webroot-path=/var/www/certbot \
            --email "$LETSENCRYPT_EMAIL" \
            --agree-tos \
            --no-eff-email \
            -d 8bit-task.site \
            -d www.8bit-task.site
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Nginx —Å SSL
        info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Nginx —Å SSL..."
        docker compose -f docker-compose.production.yml restart nginx
        
        # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
        info "–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞..."
        docker compose -f docker-compose.production.yml up -d telegram_bot
        
        # –ó–∞–ø—É—Å–∫ Certbot –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        docker compose -f docker-compose.production.yml up -d certbot
        
        info "‚úì –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
        ;;
        
    2)
        info "=== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==="
        
        info "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
        git pull origin main || warn "Git pull –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"
        
        info "–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫..."
        docker compose -f docker-compose.production.yml up -d --build
        
        info "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
        docker image prune -f
        
        info "‚úì –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
        ;;
        
    3)
        info "=== –ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í ==="
        docker compose -f docker-compose.production.yml restart
        info "‚úì –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!"
        ;;
        
    4)
        info "=== –ü–†–û–°–ú–û–¢–† –õ–û–ì–û–í ==="
        echo "–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
        docker compose -f docker-compose.production.yml logs -f
        ;;
        
    5)
        info "=== –û–°–¢–ê–ù–û–í–ö–ê –°–ï–†–í–ò–°–û–í ==="
        docker compose -f docker-compose.production.yml down
        info "‚úì –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
        ;;
        
    *)
        error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!"
        exit 1
        ;;
esac

echo ""
info "=========================================="
info "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
docker compose -f docker-compose.production.yml ps
echo ""
info "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  ‚Ä¢ –õ–æ–≥–∏:          docker compose logs -f [—Å–µ—Ä–≤–∏—Å]"
echo "  ‚Ä¢ –°—Ç–∞—Ç—É—Å:        docker compose ps"
echo "  ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:    docker compose restart [—Å–µ—Ä–≤–∏—Å]"
echo "  ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞:     docker compose down"
echo ""
info "–°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: https://8bit-task.site"
info "API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://8bit-task.site/docs"
info "=========================================="
