version: "3.9"

services:
  # ==================== PostgreSQL Database ====================
  db:
    image: postgres:16-alpine
    container_name: 8bit_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-8bit_tasks}
      POSTGRES_USER: ${POSTGRES_USER:-8bit_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-8bit_user} -d ${POSTGRES_DB:-8bit_tasks}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app_network

  # ==================== FastAPI Backend ====================
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: 8bit_backend
    env_file: .env
    environment:
      DB_ENGINE: postgresql
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-8bit_tasks}
      POSTGRES_USER: ${POSTGRES_USER:-8bit_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: production
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - backend_uploads:/app/uploads
      - backend_files:/app/files
      - backend_contracts:/app/contracts
      - backend_static:/app/static
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - app_network

  # ==================== React Frontend ====================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    container_name: 8bit_frontend
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_network

  # ==================== Telegram Bot ====================
  telegram_bot:
    build:
      context: .
      dockerfile: Dockerfile.telegram
    container_name: 8bit_telegram_bot
    env_file: .env
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      DB_ENGINE: postgresql
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-8bit_tasks}
      POSTGRES_USER: ${POSTGRES_USER:-8bit_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      API_BASE_URL: http://backend:8000
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_network

  # ==================== Nginx Reverse Proxy ====================
  nginx:
    image: nginx:alpine
    container_name: 8bit_nginx
    volumes:
      - ./conf.d/app.conf:/etc/nginx/conf.d/default.conf:ro
      - ssl_certs:/etc/letsencrypt
      - ./certbot-www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - app_network

  # ==================== Certbot for SSL ====================
  certbot:
    image: certbot/certbot
    container_name: 8bit_certbot
    volumes:
      - ssl_certs:/etc/letsencrypt
      - ./certbot-www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  backend_uploads:
  backend_files:
  backend_contracts:
  backend_static:
  ssl_certs:
